{
  "instrumentation": "node-jscoverage",
  "sloc": 629,
  "hits": 614,
  "misses": 15,
  "coverage": 97.61526232114467,
  "files": [
    {
      "filename": "array.js",
      "coverage": 100,
      "hits": 114,
      "misses": 0,
      "sloc": 114,
      "source": {
        "1": {
          "source": "var arraySlice = Array.prototype.slice,",
          "coverage": 1
        },
        "2": {
          "source": "    compare = require('./compare'),",
          "coverage": ""
        },
        "3": {
          "source": "    is = require('./is'),",
          "coverage": ""
        },
        "4": {
          "source": "    compare = compare.compare;",
          "coverage": ""
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "function _createIteratorFn(fn, c) {",
          "coverage": 1
        },
        "7": {
          "source": "    var config = c || {};",
          "coverage": 136
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "    if(is.isFunction(fn) &amp;&amp; (config.type !== 'strict')) {",
          "coverage": 136
        },
        "10": {
          "source": "        return c ? fn.bind(c) : fn;",
          "coverage": 50
        },
        "11": {
          "source": "    }",
          "coverage": ""
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "    if(config.type === undefined) {",
          "coverage": 86
        },
        "14": {
          "source": "        config.type = 'loose';",
          "coverage": 41
        },
        "15": {
          "source": "    }",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "    return function(value) {",
          "coverage": 86
        },
        "18": {
          "source": "        return compare(fn, value, config);",
          "coverage": 218
        },
        "19": {
          "source": "    };",
          "coverage": ""
        },
        "20": {
          "source": "}",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "function _createIteratorNotFn(fn, config) {",
          "coverage": 1
        },
        "23": {
          "source": "    var functionToNot = _createIteratorFn(fn, config);",
          "coverage": 47
        },
        "24": {
          "source": "        ",
          "coverage": ""
        },
        "25": {
          "source": "    return function() {",
          "coverage": 47
        },
        "26": {
          "source": "        return !functionToNot.apply(this, arguments);",
          "coverage": 96
        },
        "27": {
          "source": "    };",
          "coverage": ""
        },
        "28": {
          "source": "}",
          "coverage": ""
        },
        "29": {
          "source": "",
          "coverage": ""
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "/**",
          "coverage": ""
        },
        "32": {
          "source": " * @class Luc.Array ",
          "coverage": ""
        },
        "33": {
          "source": " * Package for Array methods. &lt;br&gt;",
          "coverage": ""
        },
        "34": {
          "source": " * ",
          "coverage": ""
        },
        "35": {
          "source": " * Keep in mind that Luc is optionally packaged with es5 shim so you can write es5 code in non es5 browsers.",
          "coverage": ""
        },
        "36": {
          "source": " * It comes with your favorite {@link Array Array} methods such as Array.forEach, Array.filter, Array.some, Array.every Array.reduceRight ..",
          "coverage": ""
        },
        "37": {
          "source": " *",
          "coverage": ""
        },
        "38": {
          "source": " * Also don't forget about Luc.Array.each and Luc.Array.toArray, they are great utility methods",
          "coverage": ""
        },
        "39": {
          "source": " * that are used all over the framework.",
          "coverage": ""
        },
        "40": {
          "source": " * ",
          "coverage": ""
        },
        "41": {
          "source": " * All remove\\* / find\\* methods follow the same api.  \\*All functions will return an array of removed or found",
          "coverage": ""
        },
        "42": {
          "source": " * items.  The items will be added to the array in the order they are",
          "coverage": ""
        },
        "43": {
          "source": " * found.  \\*First functions will return the first item and stop iterating after that, if none",
          "coverage": ""
        },
        "44": {
          "source": " *  is found false is returned.  remove\\* functions will directly change the passed in array.",
          "coverage": ""
        },
        "45": {
          "source": " *  \\*Not functions only do the following actions if the comparison is not true.",
          "coverage": ""
        },
        "46": {
          "source": " *  All remove\\* / find\\* take the following api: array, objectToCompareOrIterator, compareConfigOrThisArg &lt;br&gt;for example:",
          "coverage": ""
        },
        "47": {
          "source": " *",
          "coverage": ""
        },
        "48": {
          "source": "    //most common use case",
          "coverage": ""
        },
        "49": {
          "source": "    Luc.Array.findFirst([1,2,3, {}], {});",
          "coverage": ""
        },
        "50": {
          "source": "    &gt;Object {}",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "    //pass in optional config for a strict === comparison",
          "coverage": ""
        },
        "53": {
          "source": "    Luc.Array.findFirst([1,2,3,{}], {}, {type: 'strict'});",
          "coverage": ""
        },
        "54": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "    //pass in an iterator and thisArg",
          "coverage": ""
        },
        "57": {
          "source": "    Luc.Array.findFirst([1,2,3,{}], function(val, index, array){",
          "coverage": ""
        },
        "58": {
          "source": "        return val === 3 || this.num === val;",
          "coverage": ""
        },
        "59": {
          "source": "    }, {num: 1});",
          "coverage": ""
        },
        "60": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "61": {
          "source": "    ",
          "coverage": ""
        },
        "62": {
          "source": "    //you can see remove modifies the passed in array.",
          "coverage": ""
        },
        "63": {
          "source": "    var arr = [1,2,{a:1},1, {a:1}];",
          "coverage": ""
        },
        "64": {
          "source": "    Luc.Array.removeFirst(arr, {a:1})",
          "coverage": ""
        },
        "65": {
          "source": "    &gt;{a:1}",
          "coverage": ""
        },
        "66": {
          "source": "    arr;",
          "coverage": ""
        },
        "67": {
          "source": "    &gt;[1, 2, 1, {a:1}]",
          "coverage": ""
        },
        "68": {
          "source": "    Luc.Array.removeLast(arr, 1)",
          "coverage": ""
        },
        "69": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "70": {
          "source": "    arr;",
          "coverage": ""
        },
        "71": {
          "source": "    &gt;[1,2, {a:1}]",
          "coverage": ""
        },
        "72": {
          "source": "    ",
          "coverage": ""
        },
        "73": {
          "source": "    ",
          "coverage": ""
        },
        "74": {
          "source": "    Luc.Array.findAll([1,2,3, {a:1,b:2}], function() {return true;})",
          "coverage": ""
        },
        "75": {
          "source": "    &gt; [1,2,3, {a:1,b:2}]",
          "coverage": ""
        },
        "76": {
          "source": "    //show how not works with an iterator",
          "coverage": ""
        },
        "77": {
          "source": "    Luc.Array.findAllNot([1,2,3, {a:1,b:2}], function() {return true;})",
          "coverage": ""
        },
        "78": {
          "source": "    &gt;[]",
          "coverage": ""
        },
        "79": {
          "source": " *",
          "coverage": ""
        },
        "80": {
          "source": " * For commonly used find/remove functions check out Luc.ArrayFns for example a",
          "coverage": ""
        },
        "81": {
          "source": " * \"compact\" like function",
          "coverage": ""
        },
        "82": {
          "source": " * ",
          "coverage": ""
        },
        "83": {
          "source": "    Luc.Array.findAllNotFalsy([false, '', undefined, 0, {}, []])",
          "coverage": ""
        },
        "84": {
          "source": "    &gt;[0, {}, []]",
          "coverage": ""
        },
        "85": {
          "source": " *",
          "coverage": ""
        },
        "86": {
          "source": " * Or remove all empty items",
          "coverage": ""
        },
        "87": {
          "source": " * ",
          "coverage": ""
        },
        "88": {
          "source": "    var arr = ['', 0 , [], {a:1}, true, {}, [1]]",
          "coverage": ""
        },
        "89": {
          "source": "    Luc.Array.removeAllEmpty(arr)",
          "coverage": ""
        },
        "90": {
          "source": "    &gt;['', [], {}]",
          "coverage": ""
        },
        "91": {
          "source": "    arr",
          "coverage": ""
        },
        "92": {
          "source": "    &gt;[0, {a:1}, true, [1]]",
          "coverage": ""
        },
        "93": {
          "source": " */",
          "coverage": ""
        },
        "94": {
          "source": "",
          "coverage": ""
        },
        "95": {
          "source": "/**",
          "coverage": ""
        },
        "96": {
          "source": " * Turn the passed in item into an array if it",
          "coverage": ""
        },
        "97": {
          "source": " * isn't one already, if the item is an array just return it.  ",
          "coverage": ""
        },
        "98": {
          "source": " * It returns an empty array if item is null or undefined.",
          "coverage": ""
        },
        "99": {
          "source": " * If it is just a single item return an array containing the item.",
          "coverage": ""
        },
        "100": {
          "source": " * ",
          "coverage": ""
        },
        "101": {
          "source": "    Luc.Array.toArray()",
          "coverage": ""
        },
        "102": {
          "source": "    &gt;[]",
          "coverage": ""
        },
        "103": {
          "source": "    Luc.Array.toArray(null)",
          "coverage": ""
        },
        "104": {
          "source": "    &gt;[]",
          "coverage": ""
        },
        "105": {
          "source": "    Luc.Array.toArray(1)",
          "coverage": ""
        },
        "106": {
          "source": "    &gt;[1]",
          "coverage": ""
        },
        "107": {
          "source": "    Luc.Array.toArray([1,2])",
          "coverage": ""
        },
        "108": {
          "source": "    &gt;[1, 2]",
          "coverage": ""
        },
        "109": {
          "source": " *",
          "coverage": ""
        },
        "110": {
          "source": " * @param  {Object} item item to turn into an array.",
          "coverage": ""
        },
        "111": {
          "source": " * @return the array",
          "coverage": ""
        },
        "112": {
          "source": " */",
          "coverage": ""
        },
        "113": {
          "source": "function toArray(item) {",
          "coverage": 1
        },
        "114": {
          "source": "    if (Array.isArray(item)) {",
          "coverage": 62
        },
        "115": {
          "source": "        return item;",
          "coverage": 28
        },
        "116": {
          "source": "    }",
          "coverage": ""
        },
        "117": {
          "source": "    return (item === null || item === undefined) ? [] : [item];",
          "coverage": 34
        },
        "118": {
          "source": "}",
          "coverage": ""
        },
        "119": {
          "source": "",
          "coverage": ""
        },
        "120": {
          "source": "/**",
          "coverage": ""
        },
        "121": {
          "source": " * Return the last item of the array",
          "coverage": ""
        },
        "122": {
          "source": " * @param  {Array} arr",
          "coverage": ""
        },
        "123": {
          "source": " * @return {Object} the item",
          "coverage": ""
        },
        "124": {
          "source": "    ",
          "coverage": ""
        },
        "125": {
          "source": "    var myLongArrayNameForThingsThatIWantToKeepTrackOf = [1,2,3]",
          "coverage": ""
        },
        "126": {
          "source": "    ",
          "coverage": ""
        },
        "127": {
          "source": "    Luc.Array.last(myLongArrayNameForThingsThatIWantToKeepTrackOf);",
          "coverage": ""
        },
        "128": {
          "source": "    vs.",
          "coverage": ""
        },
        "129": {
          "source": "    myLongArrayNameForThingsThatIWantToKeepTrackOf[myLongArrayNameForThingsThatIWantToKeepTrackOf.length -1]",
          "coverage": ""
        },
        "130": {
          "source": " *",
          "coverage": ""
        },
        "131": {
          "source": " */",
          "coverage": ""
        },
        "132": {
          "source": "function last(arr) {",
          "coverage": 1
        },
        "133": {
          "source": "    return arr[arr.length -1];",
          "coverage": 2
        },
        "134": {
          "source": "}",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "/**",
          "coverage": ""
        },
        "137": {
          "source": " * Flatten out an array of objects based of their value for the passed in key.",
          "coverage": ""
        },
        "138": {
          "source": " * This also takes account for null/undefined values.",
          "coverage": ""
        },
        "139": {
          "source": " *",
          "coverage": ""
        },
        "140": {
          "source": "    Luc.Array.pluck([undefined, {a:'1', b:2}, {b:3}, {b:4}], 'b')",
          "coverage": ""
        },
        "141": {
          "source": "    &gt;[undefined, 2, 3, 4]",
          "coverage": ""
        },
        "142": {
          "source": " * @param  {Object[]} arr ",
          "coverage": ""
        },
        "143": {
          "source": " * @param  {String} key ",
          "coverage": ""
        },
        "144": {
          "source": " * @return {Array}     ",
          "coverage": ""
        },
        "145": {
          "source": " */",
          "coverage": ""
        },
        "146": {
          "source": "function pluck(arr, key) {",
          "coverage": 1
        },
        "147": {
          "source": "    return arr.map(function(value) {",
          "coverage": 1
        },
        "148": {
          "source": "        return value &amp;&amp; value[key];",
          "coverage": 3
        },
        "149": {
          "source": "    });",
          "coverage": ""
        },
        "150": {
          "source": "}",
          "coverage": ""
        },
        "151": {
          "source": "",
          "coverage": ""
        },
        "152": {
          "source": "/**",
          "coverage": ""
        },
        "153": {
          "source": " * Return the items in between the passed in index",
          "coverage": ""
        },
        "154": {
          "source": " * and the end of the array.",
          "coverage": ""
        },
        "155": {
          "source": " *",
          "coverage": ""
        },
        "156": {
          "source": "    Luc.Array.fromIndex([1,2,3,4,5], 1)",
          "coverage": ""
        },
        "157": {
          "source": "    &gt;[2, 3, 4, 5]",
          "coverage": ""
        },
        "158": {
          "source": "",
          "coverage": ""
        },
        "159": {
          "source": " * @param  {Array/arguments} arr ",
          "coverage": ""
        },
        "160": {
          "source": " * @param  {Number} index ",
          "coverage": ""
        },
        "161": {
          "source": " * @return {Array} the new array.",
          "coverage": ""
        },
        "162": {
          "source": " * ",
          "coverage": ""
        },
        "163": {
          "source": " */",
          "coverage": ""
        },
        "164": {
          "source": "function fromIndex(a, index) {",
          "coverage": 1
        },
        "165": {
          "source": "    var arr = is.isArguments(a) ? arraySlice.call(a) : a;",
          "coverage": 15
        },
        "166": {
          "source": "    return arraySlice.call(arr, index, arr.length);",
          "coverage": 15
        },
        "167": {
          "source": "}",
          "coverage": ""
        },
        "168": {
          "source": "",
          "coverage": ""
        },
        "169": {
          "source": "/**",
          "coverage": ""
        },
        "170": {
          "source": " * Runs an Array.forEach after calling Luc.Array.toArray on the item.",
          "coverage": ""
        },
        "171": {
          "source": "  It is very useful for setting up flexible api's that can handle none one or many.",
          "coverage": ""
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "    Luc.Array.each(this.items, function(item) {",
          "coverage": ""
        },
        "174": {
          "source": "        this._addItem(item);",
          "coverage": ""
        },
        "175": {
          "source": "    });",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "    vs.",
          "coverage": ""
        },
        "178": {
          "source": "",
          "coverage": ""
        },
        "179": {
          "source": "    if(Array.isArray(this.items)){",
          "coverage": ""
        },
        "180": {
          "source": "        this.items.forEach(function(item) {",
          "coverage": ""
        },
        "181": {
          "source": "            this._addItem(item);",
          "coverage": ""
        },
        "182": {
          "source": "        })",
          "coverage": ""
        },
        "183": {
          "source": "    }",
          "coverage": ""
        },
        "184": {
          "source": "    else if(this.items !== undefined) {",
          "coverage": ""
        },
        "185": {
          "source": "        this._addItem(this.items);",
          "coverage": ""
        },
        "186": {
          "source": "    }",
          "coverage": ""
        },
        "187": {
          "source": "",
          "coverage": ""
        },
        "188": {
          "source": " * @param  {Object}   item",
          "coverage": ""
        },
        "189": {
          "source": " * @param  {Function} callback",
          "coverage": ""
        },
        "190": {
          "source": " * @param  {Object}   thisArg   ",
          "coverage": ""
        },
        "191": {
          "source": " *",
          "coverage": ""
        },
        "192": {
          "source": " */",
          "coverage": ""
        },
        "193": {
          "source": "function each(item, fn, thisArg) {",
          "coverage": 1
        },
        "194": {
          "source": "    var arr = toArray(item);",
          "coverage": 57
        },
        "195": {
          "source": "    return arr.forEach.call(arr, fn, thisArg);",
          "coverage": 57
        },
        "196": {
          "source": "}",
          "coverage": ""
        },
        "197": {
          "source": "",
          "coverage": ""
        },
        "198": {
          "source": "/**",
          "coverage": ""
        },
        "199": {
          "source": " * Insert or append the second array/arguments into the",
          "coverage": ""
        },
        "200": {
          "source": " * first array/arguments.  This method does not alter",
          "coverage": ""
        },
        "201": {
          "source": " * the passed in array/arguments.",
          "coverage": ""
        },
        "202": {
          "source": " * ",
          "coverage": ""
        },
        "203": {
          "source": " * @param  {Array/arguments} firstArrayOrArgs",
          "coverage": ""
        },
        "204": {
          "source": " * @param  {Array/arguments} secondArrayOrArgs",
          "coverage": ""
        },
        "205": {
          "source": " * @param  {Number/true} indexOrAppend true to append ",
          "coverage": ""
        },
        "206": {
          "source": " * the second array to the end of the first one.  If it is a number",
          "coverage": ""
        },
        "207": {
          "source": " * insert the secondArray into the first one at the passed in index.",
          "coverage": ""
        },
        "208": {
          "source": " * @return {Array} the newly created array.",
          "coverage": ""
        },
        "209": {
          "source": " *",
          "coverage": ""
        },
        "210": {
          "source": "    Luc.Array.insert([0,4], [1,2,3], 1);",
          "coverage": ""
        },
        "211": {
          "source": "    &gt;[0, 1, 2, 3, 4]",
          "coverage": ""
        },
        "212": {
          "source": "    Luc.Array.insert([0,4], [1,2,3], true);",
          "coverage": ""
        },
        "213": {
          "source": "    &gt;[0, 4, 1, 2, 3]",
          "coverage": ""
        },
        "214": {
          "source": "    Luc.Array.insert([0,4], [1,2,3], 0);",
          "coverage": ""
        },
        "215": {
          "source": "    &gt;[1, 2, 3, 0, 4]",
          "coverage": ""
        },
        "216": {
          "source": " *",
          "coverage": ""
        },
        "217": {
          "source": " */",
          "coverage": ""
        },
        "218": {
          "source": "function insert(firstArrayOrArgs, secondArrayOrArgs, indexOrAppend) {",
          "coverage": 1
        },
        "219": {
          "source": "    var firstArray = arraySlice.call(firstArrayOrArgs),",
          "coverage": 22
        },
        "220": {
          "source": "        secondArray = arraySlice.call(secondArrayOrArgs),",
          "coverage": ""
        },
        "221": {
          "source": "        spliceArgs;",
          "coverage": ""
        },
        "222": {
          "source": "",
          "coverage": ""
        },
        "223": {
          "source": "    if(indexOrAppend === true) {",
          "coverage": 22
        },
        "224": {
          "source": "        return firstArray.concat(secondArray);",
          "coverage": 8
        },
        "225": {
          "source": "    }",
          "coverage": ""
        },
        "226": {
          "source": "",
          "coverage": ""
        },
        "227": {
          "source": "    spliceArgs = [indexOrAppend, 0].concat(secondArray);",
          "coverage": 14
        },
        "228": {
          "source": "    firstArray.splice.apply(firstArray, spliceArgs);",
          "coverage": 14
        },
        "229": {
          "source": "    return firstArray;",
          "coverage": 14
        },
        "230": {
          "source": "}",
          "coverage": ""
        },
        "231": {
          "source": "",
          "coverage": ""
        },
        "232": {
          "source": "/**",
          "coverage": ""
        },
        "233": {
          "source": " * Remove an item from the passed in arr",
          "coverage": ""
        },
        "234": {
          "source": " * from the index.",
          "coverage": ""
        },
        "235": {
          "source": " * @param  {Array} arr",
          "coverage": ""
        },
        "236": {
          "source": " * @param  {Number} index",
          "coverage": ""
        },
        "237": {
          "source": " * @return {Object} the item removed.",
          "coverage": ""
        },
        "238": {
          "source": " *",
          "coverage": ""
        },
        "239": {
          "source": "    var arr = [1,2,3];",
          "coverage": ""
        },
        "240": {
          "source": "    Luc.Array.removeAtIndex(arr, 1);",
          "coverage": ""
        },
        "241": {
          "source": "    &gt;2",
          "coverage": ""
        },
        "242": {
          "source": "    arr;",
          "coverage": ""
        },
        "243": {
          "source": "    &gt;[1,3]",
          "coverage": ""
        },
        "244": {
          "source": "",
          "coverage": ""
        },
        "245": {
          "source": " */",
          "coverage": ""
        },
        "246": {
          "source": "function removeAtIndex(arr, index) {",
          "coverage": 1
        },
        "247": {
          "source": "    var item = arr[index];",
          "coverage": 43
        },
        "248": {
          "source": "    arr.splice(index, 1);",
          "coverage": 43
        },
        "249": {
          "source": "    return item;",
          "coverage": 43
        },
        "250": {
          "source": "}",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": "function _removeFirst(arr, fn) {",
          "coverage": 1
        },
        "253": {
          "source": "    var removed = false;",
          "coverage": 29
        },
        "254": {
          "source": "",
          "coverage": ""
        },
        "255": {
          "source": "    arr.some(function(value, index) {",
          "coverage": 29
        },
        "256": {
          "source": "        if (fn.apply(this, arguments)) {",
          "coverage": 44
        },
        "257": {
          "source": "            removed = removeAtIndex(arr, index);",
          "coverage": 24
        },
        "258": {
          "source": "            return true;",
          "coverage": 24
        },
        "259": {
          "source": "        }",
          "coverage": ""
        },
        "260": {
          "source": "    });",
          "coverage": ""
        },
        "261": {
          "source": "",
          "coverage": ""
        },
        "262": {
          "source": "    return removed;",
          "coverage": 29
        },
        "263": {
          "source": "}",
          "coverage": ""
        },
        "264": {
          "source": "",
          "coverage": ""
        },
        "265": {
          "source": "/**",
          "coverage": ""
        },
        "266": {
          "source": " * Remove the first item from the passed in array",
          "coverage": ""
        },
        "267": {
          "source": " * that {@link Luc#compare matches} the passed in object.  Instead of ",
          "coverage": ""
        },
        "268": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "269": {
          "source": " * used.",
          "coverage": ""
        },
        "270": {
          "source": " * ",
          "coverage": ""
        },
        "271": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "272": {
          "source": "{copyDoc#arrRemoveSingle}",
          "coverage": ""
        },
        "273": {
          "source": " */",
          "coverage": ""
        },
        "274": {
          "source": "function removeFirst(arr, obj, config) {",
          "coverage": 1
        },
        "275": {
          "source": "    var fn = _createIteratorFn(obj, config);",
          "coverage": 13
        },
        "276": {
          "source": "    return _removeFirst(arr, fn);",
          "coverage": 13
        },
        "277": {
          "source": "}",
          "coverage": ""
        },
        "278": {
          "source": "",
          "coverage": ""
        },
        "279": {
          "source": "/**",
          "coverage": ""
        },
        "280": {
          "source": " * Remove the first item from the passed in array",
          "coverage": ""
        },
        "281": {
          "source": " * that does not {@link Luc#compare match} the passed in object.  Instead of ",
          "coverage": ""
        },
        "282": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "283": {
          "source": " * used.",
          "coverage": ""
        },
        "284": {
          "source": " * ",
          "coverage": ""
        },
        "285": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "286": {
          "source": "{copyDoc#arrRemoveSingle}",
          "coverage": ""
        },
        "287": {
          "source": " */",
          "coverage": ""
        },
        "288": {
          "source": "function removeFirstNot(arr, obj, config) {",
          "coverage": 1
        },
        "289": {
          "source": "    var fn = _createIteratorNotFn(obj, config);",
          "coverage": 16
        },
        "290": {
          "source": "    return _removeFirst(arr, fn);",
          "coverage": 16
        },
        "291": {
          "source": "}",
          "coverage": ""
        },
        "292": {
          "source": "",
          "coverage": ""
        },
        "293": {
          "source": "",
          "coverage": ""
        },
        "294": {
          "source": "function _removeAll(arr, fn) {",
          "coverage": 1
        },
        "295": {
          "source": "    var indexsToRemove = [],",
          "coverage": 16
        },
        "296": {
          "source": "        removed = [];",
          "coverage": ""
        },
        "297": {
          "source": "",
          "coverage": ""
        },
        "298": {
          "source": "    arr.forEach(function(value, index) {",
          "coverage": 16
        },
        "299": {
          "source": "        if (fn.apply(this, arguments)) {",
          "coverage": 39
        },
        "300": {
          "source": "            indexsToRemove.unshift(index);",
          "coverage": 19
        },
        "301": {
          "source": "            removed.push(value);",
          "coverage": 19
        },
        "302": {
          "source": "        }",
          "coverage": ""
        },
        "303": {
          "source": "    });",
          "coverage": ""
        },
        "304": {
          "source": "",
          "coverage": ""
        },
        "305": {
          "source": "    indexsToRemove.forEach(function(index){",
          "coverage": 16
        },
        "306": {
          "source": "        removeAtIndex(arr, index);",
          "coverage": 19
        },
        "307": {
          "source": "    });",
          "coverage": ""
        },
        "308": {
          "source": "",
          "coverage": ""
        },
        "309": {
          "source": "    return removed;",
          "coverage": 16
        },
        "310": {
          "source": "}",
          "coverage": ""
        },
        "311": {
          "source": "",
          "coverage": ""
        },
        "312": {
          "source": "/**",
          "coverage": ""
        },
        "313": {
          "source": " * Remove the all the items from the passed in array",
          "coverage": ""
        },
        "314": {
          "source": " * that do not {@link Luc#compare match} the passed in object.  Instead of ",
          "coverage": ""
        },
        "315": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "316": {
          "source": " * used.",
          "coverage": ""
        },
        "317": {
          "source": " * ",
          "coverage": ""
        },
        "318": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "319": {
          "source": "{copyDoc#arrRemoveAll}",
          "coverage": ""
        },
        "320": {
          "source": " */",
          "coverage": ""
        },
        "321": {
          "source": "function removeAllNot(arr, obj, config) {",
          "coverage": 1
        },
        "322": {
          "source": "    var fn = _createIteratorNotFn(obj, config);",
          "coverage": 7
        },
        "323": {
          "source": "    return _removeAll(arr, fn);",
          "coverage": 7
        },
        "324": {
          "source": "}",
          "coverage": ""
        },
        "325": {
          "source": "",
          "coverage": ""
        },
        "326": {
          "source": "/**",
          "coverage": ""
        },
        "327": {
          "source": " * Remove the all the items from the passed in array",
          "coverage": ""
        },
        "328": {
          "source": " * that {@link Luc#compare matches} the passed in object.  Instead of ",
          "coverage": ""
        },
        "329": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "330": {
          "source": " * used.",
          "coverage": ""
        },
        "331": {
          "source": " * ",
          "coverage": ""
        },
        "332": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "333": {
          "source": "{copyDoc#arrRemoveAll}",
          "coverage": ""
        },
        "334": {
          "source": " */",
          "coverage": ""
        },
        "335": {
          "source": "function removeAll(arr, obj, config) {",
          "coverage": 1
        },
        "336": {
          "source": "    var fn = _createIteratorFn(obj, config);",
          "coverage": 9
        },
        "337": {
          "source": "    return _removeAll(arr, fn);",
          "coverage": 9
        },
        "338": {
          "source": "}",
          "coverage": ""
        },
        "339": {
          "source": "",
          "coverage": ""
        },
        "340": {
          "source": "function _findFirst(arr, fn) {",
          "coverage": 1
        },
        "341": {
          "source": "    var item = false;",
          "coverage": 61
        },
        "342": {
          "source": "    arr.some(function(value, index) {",
          "coverage": 61
        },
        "343": {
          "source": "        if (fn.apply(this, arguments)) {",
          "coverage": 121
        },
        "344": {
          "source": "            item = arr[index];",
          "coverage": 39
        },
        "345": {
          "source": "            return true;",
          "coverage": 39
        },
        "346": {
          "source": "        }",
          "coverage": ""
        },
        "347": {
          "source": "    });",
          "coverage": ""
        },
        "348": {
          "source": "",
          "coverage": ""
        },
        "349": {
          "source": "    return item;",
          "coverage": 61
        },
        "350": {
          "source": "}",
          "coverage": ""
        },
        "351": {
          "source": "",
          "coverage": ""
        },
        "352": {
          "source": "/**",
          "coverage": ""
        },
        "353": {
          "source": " * Find the first item from the passed in array",
          "coverage": ""
        },
        "354": {
          "source": " * that does {@link Luc#compare matches} the passed in object.  Instead of ",
          "coverage": ""
        },
        "355": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "356": {
          "source": " * used.",
          "coverage": ""
        },
        "357": {
          "source": " * ",
          "coverage": ""
        },
        "358": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "359": {
          "source": "{copyDoc#arrFindSingle}",
          "coverage": ""
        },
        "360": {
          "source": " */",
          "coverage": ""
        },
        "361": {
          "source": "function findFirst(arr, obj, config) {",
          "coverage": 1
        },
        "362": {
          "source": "    var fn = _createIteratorFn(obj, config);",
          "coverage": 48
        },
        "363": {
          "source": "    return _findFirst(arr, fn);",
          "coverage": 48
        },
        "364": {
          "source": "}",
          "coverage": ""
        },
        "365": {
          "source": "",
          "coverage": ""
        },
        "366": {
          "source": "/**",
          "coverage": ""
        },
        "367": {
          "source": " * Find the first item from the passed in array",
          "coverage": ""
        },
        "368": {
          "source": " * that does not {@link Luc#compare match} the passed in object.  Instead of ",
          "coverage": ""
        },
        "369": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "370": {
          "source": " * used.",
          "coverage": ""
        },
        "371": {
          "source": " * ",
          "coverage": ""
        },
        "372": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "373": {
          "source": "{copyDoc#arrFindSingle}",
          "coverage": ""
        },
        "374": {
          "source": " */",
          "coverage": ""
        },
        "375": {
          "source": "function findFirstNot(arr, obj, config) {",
          "coverage": 1
        },
        "376": {
          "source": "    var fn = _createIteratorNotFn(obj, config);",
          "coverage": 13
        },
        "377": {
          "source": "    return _findFirst(arr, fn);",
          "coverage": 13
        },
        "378": {
          "source": "}",
          "coverage": ""
        },
        "379": {
          "source": "",
          "coverage": ""
        },
        "380": {
          "source": "function _findAll(arr, fn) {",
          "coverage": 1
        },
        "381": {
          "source": "    return arr.filter(fn);",
          "coverage": 30
        },
        "382": {
          "source": "}",
          "coverage": ""
        },
        "383": {
          "source": "",
          "coverage": ""
        },
        "384": {
          "source": "/**",
          "coverage": ""
        },
        "385": {
          "source": " * Find all of the the items from the passed in array",
          "coverage": ""
        },
        "386": {
          "source": " * that {@link Luc#compare matches} the passed in object.  Instead of ",
          "coverage": ""
        },
        "387": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "388": {
          "source": " * used.",
          "coverage": ""
        },
        "389": {
          "source": " * ",
          "coverage": ""
        },
        "390": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "391": {
          "source": "{copyDoc#arrFindAll}",
          "coverage": ""
        },
        "392": {
          "source": " */",
          "coverage": ""
        },
        "393": {
          "source": "function findAll(arr, obj, config) {",
          "coverage": 1
        },
        "394": {
          "source": "    var fn = _createIteratorFn(obj, config);",
          "coverage": 19
        },
        "395": {
          "source": "    return _findAll(arr, fn);",
          "coverage": 19
        },
        "396": {
          "source": "}",
          "coverage": ""
        },
        "397": {
          "source": "",
          "coverage": ""
        },
        "398": {
          "source": "/**",
          "coverage": ""
        },
        "399": {
          "source": " * Find all of the the items from the passed in array",
          "coverage": ""
        },
        "400": {
          "source": " * that do not {@link Luc#compare match} the passed in object.  Instead of ",
          "coverage": ""
        },
        "401": {
          "source": " * comparing an object an iterator function can be",
          "coverage": ""
        },
        "402": {
          "source": " * used.",
          "coverage": ""
        },
        "403": {
          "source": " * ",
          "coverage": ""
        },
        "404": {
          "source": "{copyDoc#arrParams}",
          "coverage": ""
        },
        "405": {
          "source": "{copyDoc#arrFindAll}",
          "coverage": ""
        },
        "406": {
          "source": " */",
          "coverage": ""
        },
        "407": {
          "source": "function findAllNot(arr, obj, config) {",
          "coverage": 1
        },
        "408": {
          "source": "    var fn = _createIteratorNotFn(obj, config);",
          "coverage": 11
        },
        "409": {
          "source": "    return _findAll(arr, fn);",
          "coverage": 11
        },
        "410": {
          "source": "}",
          "coverage": ""
        },
        "411": {
          "source": "",
          "coverage": ""
        },
        "412": {
          "source": "",
          "coverage": ""
        },
        "413": {
          "source": "exports.toArray = toArray;",
          "coverage": 1
        },
        "414": {
          "source": "exports.each = each;",
          "coverage": 1
        },
        "415": {
          "source": "exports.insert = insert;",
          "coverage": 1
        },
        "416": {
          "source": "exports.fromIndex = fromIndex;",
          "coverage": 1
        },
        "417": {
          "source": "exports.last = last;",
          "coverage": 1
        },
        "418": {
          "source": "exports.pluck = pluck;",
          "coverage": 1
        },
        "419": {
          "source": "",
          "coverage": ""
        },
        "420": {
          "source": "exports.removeAtIndex = removeAtIndex;",
          "coverage": 1
        },
        "421": {
          "source": "exports.findFirstNot = findFirstNot;",
          "coverage": 1
        },
        "422": {
          "source": "exports.findAllNot = findAllNot;",
          "coverage": 1
        },
        "423": {
          "source": "exports.findFirst = findFirst;",
          "coverage": 1
        },
        "424": {
          "source": "exports.findAll = findAll;",
          "coverage": 1
        },
        "425": {
          "source": "",
          "coverage": ""
        },
        "426": {
          "source": "exports.removeFirstNot = removeFirstNot;",
          "coverage": 1
        },
        "427": {
          "source": "exports.removeAllNot = removeAllNot;",
          "coverage": 1
        },
        "428": {
          "source": "exports.removeFirst = removeFirst;",
          "coverage": 1
        },
        "429": {
          "source": "exports.removeAll = removeAll;",
          "coverage": 1
        },
        "430": {
          "source": "",
          "coverage": ""
        },
        "431": {
          "source": "(function(){",
          "coverage": 1
        },
        "432": {
          "source": "    var _createLastFn = function(fnName) {",
          "coverage": 1
        },
        "433": {
          "source": "        var lastName = fnName.replace('First', 'Last');",
          "coverage": 4
        },
        "434": {
          "source": "",
          "coverage": ""
        },
        "435": {
          "source": "        exports[lastName] = function(arr, obj, config) {",
          "coverage": 4
        },
        "436": {
          "source": "            var ret;",
          "coverage": 14
        },
        "437": {
          "source": "",
          "coverage": ""
        },
        "438": {
          "source": "            arr.reverse();",
          "coverage": 14
        },
        "439": {
          "source": "            ret = exports[fnName](arr, obj, config);",
          "coverage": 14
        },
        "440": {
          "source": "            arr.reverse();",
          "coverage": 14
        },
        "441": {
          "source": "",
          "coverage": ""
        },
        "442": {
          "source": "            return ret;",
          "coverage": 14
        },
        "443": {
          "source": "        };",
          "coverage": ""
        },
        "444": {
          "source": "",
          "coverage": ""
        },
        "445": {
          "source": "    }, namesToAddLast = ['findFirstNot', 'findFirst', 'removeFirstNot', 'removeFirst'];",
          "coverage": ""
        },
        "446": {
          "source": "",
          "coverage": ""
        },
        "447": {
          "source": "    namesToAddLast.forEach(function(fnName) {",
          "coverage": 1
        },
        "448": {
          "source": "        _createLastFn(fnName);",
          "coverage": 4
        },
        "449": {
          "source": "    });",
          "coverage": ""
        },
        "450": {
          "source": "",
          "coverage": ""
        },
        "451": {
          "source": "}());",
          "coverage": ""
        },
        "452": {
          "source": "",
          "coverage": ""
        },
        "453": {
          "source": "/**",
          "coverage": ""
        },
        "454": {
          "source": " * @member Luc.Array ",
          "coverage": ""
        },
        "455": {
          "source": " * @method findLastNot ",
          "coverage": ""
        },
        "456": {
          "source": " * Same as Luc.Array.findFirstNot except start at the end.",
          "coverage": ""
        },
        "457": {
          "source": " */",
          "coverage": ""
        },
        "458": {
          "source": "",
          "coverage": ""
        },
        "459": {
          "source": "/**",
          "coverage": ""
        },
        "460": {
          "source": " * @member Luc.Array ",
          "coverage": ""
        },
        "461": {
          "source": " * @method findLast",
          "coverage": ""
        },
        "462": {
          "source": " * Same as Luc.Array.findFirst except start at the end.",
          "coverage": ""
        },
        "463": {
          "source": " */",
          "coverage": ""
        },
        "464": {
          "source": "",
          "coverage": ""
        },
        "465": {
          "source": "/**",
          "coverage": ""
        },
        "466": {
          "source": " * @member Luc.Array ",
          "coverage": ""
        },
        "467": {
          "source": " * @method removeLastNot ",
          "coverage": ""
        },
        "468": {
          "source": " * Same as Luc.Array.removeFirstNot except start at the end.",
          "coverage": ""
        },
        "469": {
          "source": " */",
          "coverage": ""
        },
        "470": {
          "source": "",
          "coverage": ""
        },
        "471": {
          "source": "/**",
          "coverage": ""
        },
        "472": {
          "source": " * @member Luc.Array ",
          "coverage": ""
        },
        "473": {
          "source": " * @method removeLast ",
          "coverage": ""
        },
        "474": {
          "source": " * Same as Luc.Array.removeFirst except start at the end.",
          "coverage": ""
        },
        "475": {
          "source": " */",
          "coverage": ""
        }
      }
    },
    {
      "filename": "arrayFnGenerator.js",
      "coverage": 100,
      "hits": 38,
      "misses": 0,
      "sloc": 38,
      "source": {
        "1": {
          "source": "var array = require('./array'),",
          "coverage": 1
        },
        "2": {
          "source": "    is = require('./is'),",
          "coverage": ""
        },
        "3": {
          "source": "    Generator;",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "Generator = {",
          "coverage": 1
        },
        "6": {
          "source": "    arrayFnNames: ['findFirstNot', 'findAllNot', 'findFirst', 'findAll',",
          "coverage": ""
        },
        "7": {
          "source": "            'removeFirstNot', 'removeAllNot', 'removeFirst', 'removeAll',",
          "coverage": ""
        },
        "8": {
          "source": "            'removeLastNot', 'removeLast', 'findLast', 'findLastNot'",
          "coverage": ""
        },
        "9": {
          "source": "    ],",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "    createFn: function(arrayFnName, fn) {",
          "coverage": ""
        },
        "12": {
          "source": "        return function(arr) {",
          "coverage": 132
        },
        "13": {
          "source": "            return array[arrayFnName](arr, fn);",
          "coverage": 36
        },
        "14": {
          "source": "        };",
          "coverage": ""
        },
        "15": {
          "source": "    },",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "    createBoundFn: function(arrayFnName, fnToBind) {",
          "coverage": ""
        },
        "18": {
          "source": "        return function(arr, value) {",
          "coverage": 24
        },
        "19": {
          "source": "            var fn = fnToBind.apply(this, array.fromIndex(arguments, 1));",
          "coverage": 11
        },
        "20": {
          "source": "            return array[arrayFnName](arr, fn);",
          "coverage": 11
        },
        "21": {
          "source": "        };",
          "coverage": ""
        },
        "22": {
          "source": "    }",
          "coverage": ""
        },
        "23": {
          "source": "};",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "module.exports = Generator;",
          "coverage": 1
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "/**",
          "coverage": ""
        },
        "28": {
          "source": " * @class Luc.ArrayFns",
          "coverage": ""
        },
        "29": {
          "source": " * This is documented as a separate package but it actually exists under the ",
          "coverage": ""
        },
        "30": {
          "source": " * Luc.Array namespace.  Check out the \"Filter class members\" input box",
          "coverage": ""
        },
        "31": {
          "source": " * just to the right when searching for functions.",
          "coverage": ""
        },
        "32": {
          "source": " *&lt;br&gt;",
          "coverage": ""
        },
        "33": {
          "source": " * ",
          "coverage": ""
        },
        "34": {
          "source": " * There are a lot of functions in this package but all of them ",
          "coverage": ""
        },
        "35": {
          "source": " * follow the same api.  \\*All functions will return an array of removed or found",
          "coverage": ""
        },
        "36": {
          "source": " * items.  The items will be added to the array in the order they are",
          "coverage": ""
        },
        "37": {
          "source": " * found.  \\*First functions will return the first item and stop iterating after that, if none",
          "coverage": ""
        },
        "38": {
          "source": " *  is found false is returned.  remove\\* functions will directly change the passed in array.",
          "coverage": ""
        },
        "39": {
          "source": " *  \\*Not functions only do the following actions if the comparison is not true.",
          "coverage": ""
        },
        "40": {
          "source": " *  \\*Last functions do the same as their \\*First counterparts except that the iterating",
          "coverage": ""
        },
        "41": {
          "source": " *  starts at the end of the array. Almost every public method of Luc.is is available it",
          "coverage": ""
        },
        "42": {
          "source": " *  uses the following grammar Luc.Array[\"methodName\"\"isMethodName\"]",
          "coverage": ""
        },
        "43": {
          "source": " *",
          "coverage": ""
        },
        "44": {
          "source": "      Luc.Array.findAllNotEmpty([false, true, null, undefined, 0, '', [], [1]])",
          "coverage": ""
        },
        "45": {
          "source": "      &gt; [true, 0, [1]]",
          "coverage": ""
        },
        "46": {
          "source": "",
          "coverage": ""
        },
        "47": {
          "source": "      //Or remove all empty items",
          "coverage": ""
        },
        "48": {
          "source": "      var arr = ['', 0 , [], {a:1}, true, {}, [1]]",
          "coverage": ""
        },
        "49": {
          "source": "      Luc.Array.removeAllEmpty(arr)",
          "coverage": ""
        },
        "50": {
          "source": "      &gt;['', [], {}]",
          "coverage": ""
        },
        "51": {
          "source": "      arr",
          "coverage": ""
        },
        "52": {
          "source": "      &gt;[0, {a:1}, true, [1]]",
          "coverage": ""
        },
        "53": {
          "source": "     ",
          "coverage": ""
        },
        "54": {
          "source": "      Luc.Array.findFirstNotString([1,2,3,'5'])",
          "coverage": ""
        },
        "55": {
          "source": "      &gt;1",
          "coverage": ""
        },
        "56": {
          "source": "      var arr = [1,2,3,'5'];",
          "coverage": ""
        },
        "57": {
          "source": "      Luc.Array.removeAllNotString(arr);",
          "coverage": ""
        },
        "58": {
          "source": "      &gt;[1,2,3]",
          "coverage": ""
        },
        "59": {
          "source": "      arr",
          "coverage": ""
        },
        "60": {
          "source": "      &gt;[\"5\"]",
          "coverage": ""
        },
        "61": {
          "source": " *",
          "coverage": ""
        },
        "62": {
          "source": " * As of right now there are two function sets which differ from the is",
          "coverage": ""
        },
        "63": {
          "source": " * api.",
          "coverage": ""
        },
        "64": {
          "source": " *",
          "coverage": ""
        },
        "65": {
          "source": " * InstanceOf",
          "coverage": ""
        },
        "66": {
          "source": " * ",
          "coverage": ""
        },
        "67": {
          "source": "    Luc.Array.findAllInstanceOf([1,2, new Date(), {}, []], Object)",
          "coverage": ""
        },
        "68": {
          "source": "    &gt;[date, {}, []]",
          "coverage": ""
        },
        "69": {
          "source": "    &gt;Luc.Array.findAllNotInstanceOf([1,2, new Date(), {}, []], Object)",
          "coverage": ""
        },
        "70": {
          "source": "    [1, 2]",
          "coverage": ""
        },
        "71": {
          "source": " *",
          "coverage": ""
        },
        "72": {
          "source": " * In",
          "coverage": ""
        },
        "73": {
          "source": " * ",
          "coverage": ""
        },
        "74": {
          "source": "    Luc.Array.findAllIn([1,2,3], [1,2])",
          "coverage": ""
        },
        "75": {
          "source": "    &gt;[1, 2]",
          "coverage": ""
        },
        "76": {
          "source": "    Luc.Array.findFirstIn([1,2,3], [1,2])",
          "coverage": ""
        },
        "77": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "    //defaults to loose comparison",
          "coverage": ""
        },
        "80": {
          "source": "    Luc.Array.findAllIn([1,2,3, {a:1, b:2}], [1,{a:1}])",
          "coverage": ""
        },
        "81": {
          "source": "    &gt; [1, {a:1,b:2}]",
          "coverage": ""
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "    Luc.Array.findAllIn([1,2,3, {a:1, b:2}], [1,{a:1}], {type: 'deep'})",
          "coverage": ""
        },
        "84": {
          "source": "    &gt;[1]",
          "coverage": ""
        },
        "85": {
          "source": " */",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "(function _createIsFns() {",
          "coverage": 1
        },
        "88": {
          "source": "    var isToIgnore = ['isRegExp', 'isArguments'];",
          "coverage": 1
        },
        "89": {
          "source": "",
          "coverage": ""
        },
        "90": {
          "source": "    Object.keys(is).forEach(function(key) {",
          "coverage": 1
        },
        "91": {
          "source": "        var name = key.split('is')[1];",
          "coverage": 10
        },
        "92": {
          "source": "        Generator.arrayFnNames.forEach(function(fnName) {",
          "coverage": 10
        },
        "93": {
          "source": "            if(isToIgnore.indexOf(key) === -1) {",
          "coverage": 120
        },
        "94": {
          "source": "                array[fnName + name] = Generator.createFn(fnName, is[key]);",
          "coverage": 96
        },
        "95": {
          "source": "            }",
          "coverage": ""
        },
        "96": {
          "source": "        });",
          "coverage": ""
        },
        "97": {
          "source": "    });",
          "coverage": ""
        },
        "98": {
          "source": "}());",
          "coverage": ""
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "(function _createFalsyFns() {",
          "coverage": 1
        },
        "101": {
          "source": "    var usefullFalsyFns = ['findFirstNot', 'findAllNot', 'removeFirstNot', 'removeAllNot',",
          "coverage": 1
        },
        "102": {
          "source": "                            'removeFirst', 'removeAll', 'removeLastNot', 'removeLast',  'findLastNot'];",
          "coverage": ""
        },
        "103": {
          "source": "",
          "coverage": ""
        },
        "104": {
          "source": "    var fns = {",
          "coverage": 1
        },
        "105": {
          "source": "        'False': function(val) {",
          "coverage": ""
        },
        "106": {
          "source": "            return val === false;",
          "coverage": 15
        },
        "107": {
          "source": "        },",
          "coverage": ""
        },
        "108": {
          "source": "        'True': function(val) {",
          "coverage": ""
        },
        "109": {
          "source": "            return val === true;",
          "coverage": 15
        },
        "110": {
          "source": "        },",
          "coverage": ""
        },
        "111": {
          "source": "        'Null': function(val) {",
          "coverage": ""
        },
        "112": {
          "source": "            return val === null;",
          "coverage": 15
        },
        "113": {
          "source": "        },",
          "coverage": ""
        },
        "114": {
          "source": "        'Undefined': function(val) {",
          "coverage": ""
        },
        "115": {
          "source": "            return val === undefined;",
          "coverage": 15
        },
        "116": {
          "source": "        }",
          "coverage": ""
        },
        "117": {
          "source": "    };",
          "coverage": ""
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "    Object.keys(fns).forEach(function(key) {",
          "coverage": 1
        },
        "120": {
          "source": "        usefullFalsyFns.forEach(function(fnName) {",
          "coverage": 4
        },
        "121": {
          "source": "            array[fnName + key] = Generator.createFn(fnName, fns[key]);",
          "coverage": 36
        },
        "122": {
          "source": "        });",
          "coverage": ""
        },
        "123": {
          "source": "    });",
          "coverage": ""
        },
        "124": {
          "source": "}());",
          "coverage": ""
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "(function _createBoundFns() {",
          "coverage": 1
        },
        "127": {
          "source": "    var fns = {",
          "coverage": 1
        },
        "128": {
          "source": "        'InstanceOf': function(Constructor) {",
          "coverage": ""
        },
        "129": {
          "source": "            return function(value) {",
          "coverage": 2
        },
        "130": {
          "source": "                return (value instanceof Constructor);",
          "coverage": 1
        },
        "131": {
          "source": "            };",
          "coverage": ""
        },
        "132": {
          "source": "        },'In': function(arr, c) {",
          "coverage": ""
        },
        "133": {
          "source": "            var defaultC = {type:'looseRight'};",
          "coverage": 9
        },
        "134": {
          "source": "            return function(value) {",
          "coverage": 9
        },
        "135": {
          "source": "                if(value !== false) {",
          "coverage": 31
        },
        "136": {
          "source": "                    var cfg = c || defaultC;",
          "coverage": 30
        },
        "137": {
          "source": "                    //this is a right to left comparison ",
          "coverage": ""
        },
        "138": {
          "source": "                    //expected loose behavior should be looseRight",
          "coverage": ""
        },
        "139": {
          "source": "                    return array.findFirst(arr, value, cfg.type === 'loose' ? defaultC : cfg) !== false;",
          "coverage": 30
        },
        "140": {
          "source": "                }",
          "coverage": ""
        },
        "141": {
          "source": "                ",
          "coverage": ""
        },
        "142": {
          "source": "                return arr.indexOf(false) &gt; -1;",
          "coverage": 1
        },
        "143": {
          "source": "            };",
          "coverage": ""
        },
        "144": {
          "source": "        }",
          "coverage": ""
        },
        "145": {
          "source": "    };",
          "coverage": ""
        },
        "146": {
          "source": "",
          "coverage": ""
        },
        "147": {
          "source": "    Object.keys(fns).forEach(function(key) {",
          "coverage": 1
        },
        "148": {
          "source": "        Generator.arrayFnNames.forEach(function(fnName) {",
          "coverage": 2
        },
        "149": {
          "source": "            array[fnName + key] = Generator.createBoundFn(fnName, fns[key]);",
          "coverage": 24
        },
        "150": {
          "source": "        });",
          "coverage": ""
        },
        "151": {
          "source": "    });",
          "coverage": ""
        },
        "152": {
          "source": "}());",
          "coverage": ""
        }
      }
    },
    {
      "filename": "class/base.js",
      "coverage": 100,
      "hits": 7,
      "misses": 0,
      "sloc": 7,
      "source": {
        "1": {
          "source": "var emptyFn = require('../function').emptyFn,",
          "coverage": 1
        },
        "2": {
          "source": "    apply = require('../object').apply;",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "/**",
          "coverage": ""
        },
        "5": {
          "source": " * @class Luc.Base",
          "coverage": ""
        },
        "6": {
          "source": " * Simple class that by default {@link Luc#apply applies} the ",
          "coverage": ""
        },
        "7": {
          "source": " * first argument to the instance and then calls",
          "coverage": ""
        },
        "8": {
          "source": " * Luc.Base.init.",
          "coverage": ""
        },
        "9": {
          "source": " *",
          "coverage": ""
        },
        "10": {
          "source": "    var b = new Luc.Base({",
          "coverage": ""
        },
        "11": {
          "source": "        a: 1,",
          "coverage": ""
        },
        "12": {
          "source": "        init: function() {",
          "coverage": ""
        },
        "13": {
          "source": "            console.log('hey')",
          "coverage": ""
        },
        "14": {
          "source": "        }",
          "coverage": ""
        },
        "15": {
          "source": "    })",
          "coverage": ""
        },
        "16": {
          "source": "    b.a",
          "coverage": ""
        },
        "17": {
          "source": "    &gt;hey",
          "coverage": ""
        },
        "18": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "19": {
          "source": " *",
          "coverage": ""
        },
        "20": {
          "source": " * We found that most of our classes do this so we made",
          "coverage": ""
        },
        "21": {
          "source": " * it the default.  Having a config object as the first and only ",
          "coverage": ""
        },
        "22": {
          "source": " * param keeps a clean api as well.",
          "coverage": ""
        },
        "23": {
          "source": " *",
          "coverage": ""
        },
        "24": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "25": {
          "source": "        init: function() {",
          "coverage": ""
        },
        "26": {
          "source": "            Luc.Array.each(this.items, this.logItems)",
          "coverage": ""
        },
        "27": {
          "source": "        },",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "        logItems: function(item) {",
          "coverage": ""
        },
        "30": {
          "source": "            console.log(item);",
          "coverage": ""
        },
        "31": {
          "source": "        }",
          "coverage": ""
        },
        "32": {
          "source": "    });",
          "coverage": ""
        },
        "33": {
          "source": "",
          "coverage": ""
        },
        "34": {
          "source": "    var c = new C({items: [1,2,3]});",
          "coverage": ""
        },
        "35": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "36": {
          "source": "    &gt;2",
          "coverage": ""
        },
        "37": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "38": {
          "source": "    var d = new C({items: 'A'});",
          "coverage": ""
        },
        "39": {
          "source": "    &gt;'A'",
          "coverage": ""
        },
        "40": {
          "source": "    var e = new C();",
          "coverage": ""
        },
        "41": {
          "source": " *",
          "coverage": ""
        },
        "42": {
          "source": " * If you don't like the applying of the config to the instance it ",
          "coverage": ""
        },
        "43": {
          "source": " * can always be \"disabled\"",
          "coverage": ""
        },
        "44": {
          "source": " *",
          "coverage": ""
        },
        "45": {
          "source": "    var NoApply = Luc.define({",
          "coverage": ""
        },
        "46": {
          "source": "        beforeInit: function() {",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "        },",
          "coverage": ""
        },
        "49": {
          "source": "        init: function() {",
          "coverage": ""
        },
        "50": {
          "source": "            Luc.Array.each(this.items, this.logItems)",
          "coverage": ""
        },
        "51": {
          "source": "        },",
          "coverage": ""
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "        logItems: function(item) {",
          "coverage": ""
        },
        "54": {
          "source": "            console.log(item);",
          "coverage": ""
        },
        "55": {
          "source": "        }",
          "coverage": ""
        },
        "56": {
          "source": "    });",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "    var c = new NoApply({items: [1,2,3]});",
          "coverage": ""
        },
        "59": {
          "source": " * ",
          "coverage": ""
        },
        "60": {
          "source": " */",
          "coverage": ""
        },
        "61": {
          "source": "function Base() {",
          "coverage": 1
        },
        "62": {
          "source": "    this.beforeInit.apply(this, arguments);",
          "coverage": 18
        },
        "63": {
          "source": "    this.init();",
          "coverage": 18
        },
        "64": {
          "source": "}",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "Base.prototype = {",
          "coverage": 1
        },
        "67": {
          "source": "    /**",
          "coverage": ""
        },
        "68": {
          "source": "     * By default apply the config to the ",
          "coverage": ""
        },
        "69": {
          "source": "     * instance.",
          "coverage": ""
        },
        "70": {
          "source": "     */",
          "coverage": ""
        },
        "71": {
          "source": "    beforeInit: function(config) {",
          "coverage": ""
        },
        "72": {
          "source": "        apply(this, config);",
          "coverage": 18
        },
        "73": {
          "source": "    },",
          "coverage": ""
        },
        "74": {
          "source": "    /**",
          "coverage": ""
        },
        "75": {
          "source": "     * @method",
          "coverage": ""
        },
        "76": {
          "source": "     * Simple hook to initialize",
          "coverage": ""
        },
        "77": {
          "source": "     * the class.  Defaults to Luc.emptyFn",
          "coverage": ""
        },
        "78": {
          "source": "     */",
          "coverage": ""
        },
        "79": {
          "source": "    init: emptyFn",
          "coverage": ""
        },
        "80": {
          "source": "};",
          "coverage": ""
        },
        "81": {
          "source": "",
          "coverage": ""
        },
        "82": {
          "source": "module.exports = Base;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "class/composition.js",
      "coverage": 96.66666666666667,
      "hits": 29,
      "misses": 1,
      "sloc": 30,
      "source": {
        "1": {
          "source": "var obj = require('../object'),",
          "coverage": 1
        },
        "2": {
          "source": "    array = require('../array'),",
          "coverage": ""
        },
        "3": {
          "source": "    apply = obj.apply,",
          "coverage": ""
        },
        "4": {
          "source": "    mix = obj.mix,",
          "coverage": ""
        },
        "5": {
          "source": "    oFilter = obj.filter,",
          "coverage": ""
        },
        "6": {
          "source": "    emptyFn = ('../function').emptyFn,",
          "coverage": ""
        },
        "7": {
          "source": "    is = require('../is');",
          "coverage": ""
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "/**",
          "coverage": ""
        },
        "10": {
          "source": " * @class  Luc.Composition",
          "coverage": ""
        },
        "11": {
          "source": " * @protected",
          "coverage": ""
        },
        "12": {
          "source": " * Class that wraps {@link Luc.define#$compositions composition} config objects",
          "coverage": ""
        },
        "13": {
          "source": " * to conform to an api. This class is not available externally.  The config object",
          "coverage": ""
        },
        "14": {
          "source": " * will override any protected methods and default configs.  Defaults",
          "coverage": ""
        },
        "15": {
          "source": " * can be used for often used configs, keys that are not defaults will",
          "coverage": ""
        },
        "16": {
          "source": " * override the defaults.",
          "coverage": ""
        },
        "17": {
          "source": " *",
          "coverage": ""
        },
        "18": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "19": {
          "source": "        $compositions: {",
          "coverage": ""
        },
        "20": {
          "source": "            defaults: Luc.compositionEnums.EventEmitter,",
          "coverage": ""
        },
        "21": {
          "source": "            methods: ['emit']",
          "coverage": ""
        },
        "22": {
          "source": "        }",
          "coverage": ""
        },
        "23": {
          "source": "    });",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "    var c = new C()",
          "coverage": ""
        },
        "26": {
          "source": "    typeof c.emit",
          "coverage": ""
        },
        "27": {
          "source": "    &gt;\"function\"",
          "coverage": ""
        },
        "28": {
          "source": "    typeof c.on",
          "coverage": ""
        },
        "29": {
          "source": "    &gt;\"undefined\"",
          "coverage": ""
        },
        "30": {
          "source": " *",
          "coverage": ""
        },
        "31": {
          "source": " * If you want to add your own composition all you need to have is",
          "coverage": ""
        },
        "32": {
          "source": " * a name and a Constructor, the rest of the configs of this class and Luc.Composition.create",
          "coverage": ""
        },
        "33": {
          "source": " * can be used to inject behavior if needed.",
          "coverage": ""
        },
        "34": {
          "source": " * ",
          "coverage": ""
        },
        "35": {
          "source": "     function Counter() {",
          "coverage": ""
        },
        "36": {
          "source": "        this.count = 0;",
          "coverage": ""
        },
        "37": {
          "source": "     };",
          "coverage": ""
        },
        "38": {
          "source": "",
          "coverage": ""
        },
        "39": {
          "source": "     Counter.prototype = {",
          "coverage": ""
        },
        "40": {
          "source": "        getCount: function() {",
          "coverage": ""
        },
        "41": {
          "source": "            return this.count;",
          "coverage": ""
        },
        "42": {
          "source": "        },",
          "coverage": ""
        },
        "43": {
          "source": "        increaseCount: function() {",
          "coverage": ""
        },
        "44": {
          "source": "            this.count++;",
          "coverage": ""
        },
        "45": {
          "source": "        }",
          "coverage": ""
        },
        "46": {
          "source": "     }",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "     var C = Luc.define({",
          "coverage": ""
        },
        "49": {
          "source": "            $compositions: {",
          "coverage": ""
        },
        "50": {
          "source": "                name: 'counter',",
          "coverage": ""
        },
        "51": {
          "source": "                Constructor: Counter,",
          "coverage": ""
        },
        "52": {
          "source": "                methods: 'allMethods'",
          "coverage": ""
        },
        "53": {
          "source": "            }",
          "coverage": ""
        },
        "54": {
          "source": "    });",
          "coverage": ""
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "    var c = new C()",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "    c.increaseCount();",
          "coverage": ""
        },
        "59": {
          "source": "    c.increaseCount();",
          "coverage": ""
        },
        "60": {
          "source": "    c.increaseCount();",
          "coverage": ""
        },
        "61": {
          "source": "    c.getCount();",
          "coverage": ""
        },
        "62": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "63": {
          "source": "    c.count",
          "coverage": ""
        },
        "64": {
          "source": "    &gt;undefined",
          "coverage": ""
        },
        "65": {
          "source": " */",
          "coverage": ""
        },
        "66": {
          "source": "function Composition(c) {",
          "coverage": 1
        },
        "67": {
          "source": "    var defaults = c.defaults,",
          "coverage": 27
        },
        "68": {
          "source": "        config = c;",
          "coverage": ""
        },
        "69": {
          "source": "",
          "coverage": ""
        },
        "70": {
          "source": "    if(defaults) {",
          "coverage": 27
        },
        "71": {
          "source": "        mix(config, config.defaults);",
          "coverage": 4
        },
        "72": {
          "source": "        delete config.defaults;",
          "coverage": 4
        },
        "73": {
          "source": "    }",
          "coverage": ""
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "    apply(this, config);",
          "coverage": 27
        },
        "76": {
          "source": "}",
          "coverage": ""
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "Composition.prototype = {",
          "coverage": 1
        },
        "79": {
          "source": "    /**",
          "coverage": ""
        },
        "80": {
          "source": "     * @cfg {String} name (required) the name which the composition",
          "coverage": ""
        },
        "81": {
          "source": "     * will be referred to by the instance.",
          "coverage": ""
        },
        "82": {
          "source": "     */",
          "coverage": ""
        },
        "83": {
          "source": "    ",
          "coverage": ""
        },
        "84": {
          "source": "    /**",
          "coverage": ""
        },
        "85": {
          "source": "     * @cfg {Object} defaults",
          "coverage": ""
        },
        "86": {
          "source": "     */",
          "coverage": ""
        },
        "87": {
          "source": "    ",
          "coverage": ""
        },
        "88": {
          "source": "    /**",
          "coverage": ""
        },
        "89": {
          "source": "     * @cfg {Boolean} initAfter  defaults to false",
          "coverage": ""
        },
        "90": {
          "source": "     * pass in true to init the composition instance after the ",
          "coverage": ""
        },
        "91": {
          "source": "     * superclass has been called.",
          "coverage": ""
        },
        "92": {
          "source": "     */",
          "coverage": ""
        },
        "93": {
          "source": "",
          "coverage": ""
        },
        "94": {
          "source": "    /**",
          "coverage": ""
        },
        "95": {
          "source": "     * @cfg {Function} Constructor (required) the Constructor",
          "coverage": ""
        },
        "96": {
          "source": "     * to use when creating the composition instance.  This",
          "coverage": ""
        },
        "97": {
          "source": "     * is required if Luc.Composition.create is not overwritten by",
          "coverage": ""
        },
        "98": {
          "source": "     * the passed in composition config object.",
          "coverage": ""
        },
        "99": {
          "source": "     */",
          "coverage": ""
        },
        "100": {
          "source": "    ",
          "coverage": ""
        },
        "101": {
          "source": "    /**",
          "coverage": ""
        },
        "102": {
          "source": "     * @protected",
          "coverage": ""
        },
        "103": {
          "source": "     * By default just return a newly created Constructor instance.",
          "coverage": ""
        },
        "104": {
          "source": "     * ",
          "coverage": ""
        },
        "105": {
          "source": "     * When create is called the following properties can be used :",
          "coverage": ""
        },
        "106": {
          "source": "     * ",
          "coverage": ""
        },
        "107": {
          "source": "     * this.instance The instance that is creating",
          "coverage": ""
        },
        "108": {
          "source": "     * the composition.",
          "coverage": ""
        },
        "109": {
          "source": "     * ",
          "coverage": ""
        },
        "110": {
          "source": "     * this.Constructor the constructor that is passed in from",
          "coverage": ""
        },
        "111": {
          "source": "     * the composition config. ",
          "coverage": ""
        },
        "112": {
          "source": "     *",
          "coverage": ""
        },
        "113": {
          "source": "     * this.instanceArgs the arguments passed into the instance when it ",
          "coverage": ""
        },
        "114": {
          "source": "     * is being created.  For example",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "        new MyClassWithAComposition({plugins: []})",
          "coverage": ""
        },
        "117": {
          "source": "        //inside of the create method",
          "coverage": ""
        },
        "118": {
          "source": "        this.instanceArgs",
          "coverage": ""
        },
        "119": {
          "source": "        &gt;[{plugins: []}]",
          "coverage": ""
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "     * @return {Object} ",
          "coverage": ""
        },
        "122": {
          "source": "     * the composition instance.",
          "coverage": ""
        },
        "123": {
          "source": "     *",
          "coverage": ""
        },
        "124": {
          "source": "     * For example set the emitters maxListeners",
          "coverage": ""
        },
        "125": {
          "source": "     * to what the instance has configed.",
          "coverage": ""
        },
        "126": {
          "source": "      ",
          "coverage": ""
        },
        "127": {
          "source": "        maxListeners: 100,",
          "coverage": ""
        },
        "128": {
          "source": "        $compositions: {",
          "coverage": ""
        },
        "129": {
          "source": "            Constructor: Luc.EventEmitter,",
          "coverage": ""
        },
        "130": {
          "source": "            create: function() {",
          "coverage": ""
        },
        "131": {
          "source": "                var emitter = new this.Constructor();",
          "coverage": ""
        },
        "132": {
          "source": "                emitter.setMaxListeners(this.instance.maxListeners);",
          "coverage": ""
        },
        "133": {
          "source": "                return emitter;",
          "coverage": ""
        },
        "134": {
          "source": "            },",
          "coverage": ""
        },
        "135": {
          "source": "            name: 'emitter'",
          "coverage": ""
        },
        "136": {
          "source": "        }",
          "coverage": ""
        },
        "137": {
          "source": "",
          "coverage": ""
        },
        "138": {
          "source": "     */",
          "coverage": ""
        },
        "139": {
          "source": "    create: function() {",
          "coverage": ""
        },
        "140": {
          "source": "        return new this.Constructor();",
          "coverage": 9
        },
        "141": {
          "source": "    },",
          "coverage": ""
        },
        "142": {
          "source": "",
          "coverage": ""
        },
        "143": {
          "source": "    getInstance: function() {",
          "coverage": ""
        },
        "144": {
          "source": "        return this.create();",
          "coverage": 12
        },
        "145": {
          "source": "    },",
          "coverage": ""
        },
        "146": {
          "source": "",
          "coverage": ""
        },
        "147": {
          "source": "    validate: function() {",
          "coverage": ""
        },
        "148": {
          "source": "        if(this.name  === undefined) {",
          "coverage": 15
        },
        "149": {
          "source": "            throw new Error('A name must be defined');",
          "coverage": 1
        },
        "150": {
          "source": "        }",
          "coverage": ""
        },
        "151": {
          "source": "        if(!is.isFunction(this.Constructor) &amp;&amp; this.create === Composition.prototype.create) {",
          "coverage": 14
        },
        "152": {
          "source": "            throw new Error('The Constructor must be function if create is not overridden');",
          "coverage": 1
        },
        "153": {
          "source": "        }",
          "coverage": ""
        },
        "154": {
          "source": "    },",
          "coverage": ""
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": "    /**",
          "coverage": ""
        },
        "157": {
          "source": "     * @property filterMethodFns",
          "coverage": ""
        },
        "158": {
          "source": "     * @type {Object}",
          "coverage": ""
        },
        "159": {
          "source": "     * @property filterMethodFns.allMethods return all methods from the",
          "coverage": ""
        },
        "160": {
          "source": "     * constructors prototype",
          "coverage": ""
        },
        "161": {
          "source": "     * @property filterMethodFns.public return all methods that don't",
          "coverage": ""
        },
        "162": {
          "source": "     * start with _.  We know not everyone follows this convention, but we",
          "coverage": ""
        },
        "163": {
          "source": "     * do and so do many others.",
          "coverage": ""
        },
        "164": {
          "source": "     * @type {Function}",
          "coverage": ""
        },
        "165": {
          "source": "     */",
          "coverage": ""
        },
        "166": {
          "source": "    filterMethodFns: {",
          "coverage": ""
        },
        "167": {
          "source": "        allMethods: function(key, value) {",
          "coverage": ""
        },
        "168": {
          "source": "            return is.isFunction(value);",
          "coverage": 36
        },
        "169": {
          "source": "        },",
          "coverage": ""
        },
        "170": {
          "source": "        publicMethods: function(key, value) {",
          "coverage": ""
        },
        "171": {
          "source": "            return is.isFunction(value) &amp;&amp; key.charAt(0) !== '_';",
          "coverage": 30
        },
        "172": {
          "source": "        }",
          "coverage": ""
        },
        "173": {
          "source": "    },",
          "coverage": ""
        },
        "174": {
          "source": "",
          "coverage": ""
        },
        "175": {
          "source": "    /**",
          "coverage": ""
        },
        "176": {
          "source": "     * @cfg {Function/String/Array[]} methods",
          "coverage": ""
        },
        "177": {
          "source": "     * The keys to add to the definers prototype that will in turn call",
          "coverage": ""
        },
        "178": {
          "source": "     * the compositions method.",
          "coverage": ""
        },
        "179": {
          "source": "     * ",
          "coverage": ""
        },
        "180": {
          "source": "     * Defaults to Luc.emptyFn. ",
          "coverage": ""
        },
        "181": {
          "source": "     * If an array is passed it will just use that Array.",
          "coverage": ""
        },
        "182": {
          "source": "     * ",
          "coverage": ""
        },
        "183": {
          "source": "     * If a string is passed and matches a method from ",
          "coverage": ""
        },
        "184": {
          "source": "     * Luc.Composition.filterMethodFns it will call that instead.",
          "coverage": ""
        },
        "185": {
          "source": "     * ",
          "coverage": ""
        },
        "186": {
          "source": "     * If a function is defined it",
          "coverage": ""
        },
        "187": {
          "source": "     * will get called while iterating over each key value pair of the ",
          "coverage": ""
        },
        "188": {
          "source": "     * Constructor's prototype, if a truthy value is ",
          "coverage": ""
        },
        "189": {
          "source": "     * returned the property will be added to the defining",
          "coverage": ""
        },
        "190": {
          "source": "     * classes prototype.",
          "coverage": ""
        },
        "191": {
          "source": "     * ",
          "coverage": ""
        },
        "192": {
          "source": "     * For example this config will only expose the emit method ",
          "coverage": ""
        },
        "193": {
          "source": "     * to the defining class",
          "coverage": ""
        },
        "194": {
          "source": "     ",
          "coverage": ""
        },
        "195": {
          "source": "        $compositions: {",
          "coverage": ""
        },
        "196": {
          "source": "            Constructor: Luc.EventEmitter,",
          "coverage": ""
        },
        "197": {
          "source": "            methods: function(key, value) {",
          "coverage": ""
        },
        "198": {
          "source": "                return key === 'emit';",
          "coverage": ""
        },
        "199": {
          "source": "            },",
          "coverage": ""
        },
        "200": {
          "source": "            name: 'emitter'",
          "coverage": ""
        },
        "201": {
          "source": "        }",
          "coverage": ""
        },
        "202": {
          "source": "     * this is also a valid config",
          "coverage": ""
        },
        "203": {
          "source": "     * ",
          "coverage": ""
        },
        "204": {
          "source": "        $compositions: {",
          "coverage": ""
        },
        "205": {
          "source": "            Constructor: Luc.EventEmitter,",
          "coverage": ""
        },
        "206": {
          "source": "            methods: ['emitter'],",
          "coverage": ""
        },
        "207": {
          "source": "            name: 'emitter'",
          "coverage": ""
        },
        "208": {
          "source": "        }",
          "coverage": ""
        },
        "209": {
          "source": "     * ",
          "coverage": ""
        },
        "210": {
          "source": "     */",
          "coverage": ""
        },
        "211": {
          "source": "    methods: emptyFn,",
          "coverage": ""
        },
        "212": {
          "source": "",
          "coverage": ""
        },
        "213": {
          "source": "    /**",
          "coverage": ""
        },
        "214": {
          "source": "     * @cfg {String[]/String} ignoreMethods methods that will always",
          "coverage": ""
        },
        "215": {
          "source": "     * be ignored if methods is not an Array.",
          "coverage": ""
        },
        "216": {
          "source": "     *",
          "coverage": ""
        },
        "217": {
          "source": "        ",
          "coverage": ""
        },
        "218": {
          "source": "        var C = Luc.define({",
          "coverage": ""
        },
        "219": {
          "source": "                $compositions: {",
          "coverage": ""
        },
        "220": {
          "source": "                    defaults: Luc.compositionEnums.EventEmitter,",
          "coverage": ""
        },
        "221": {
          "source": "                    methods: 'allMethods',",
          "coverage": ""
        },
        "222": {
          "source": "                    ignoreMethods: ['emit']",
          "coverage": ""
        },
        "223": {
          "source": "                }",
          "coverage": ""
        },
        "224": {
          "source": "            });",
          "coverage": ""
        },
        "225": {
          "source": "",
          "coverage": ""
        },
        "226": {
          "source": "            var c = new C();",
          "coverage": ""
        },
        "227": {
          "source": "            typeof c.emit",
          "coverage": ""
        },
        "228": {
          "source": "            &gt;\"undefined\"",
          "coverage": ""
        },
        "229": {
          "source": "     */",
          "coverage": ""
        },
        "230": {
          "source": "    ignoreMethods: undefined,",
          "coverage": ""
        },
        "231": {
          "source": "",
          "coverage": ""
        },
        "232": {
          "source": "    getObjectWithMethods: function() {",
          "coverage": ""
        },
        "233": {
          "source": "        var methodsObj = this.Constructor &amp;&amp; this.Constructor.prototype;",
          "coverage": 13
        },
        "234": {
          "source": "        if (this.ignoreMethods) {",
          "coverage": 13
        },
        "235": {
          "source": "            methodsObj = apply({}, methodsObj);",
          "coverage": 3
        },
        "236": {
          "source": "            array.each(this.ignoreMethods, function(value) {",
          "coverage": 3
        },
        "237": {
          "source": "                delete methodsObj[value];",
          "coverage": 3
        },
        "238": {
          "source": "            });",
          "coverage": ""
        },
        "239": {
          "source": "        }",
          "coverage": ""
        },
        "240": {
          "source": "",
          "coverage": ""
        },
        "241": {
          "source": "        return methodsObj;",
          "coverage": 13
        },
        "242": {
          "source": "    },",
          "coverage": ""
        },
        "243": {
          "source": "",
          "coverage": ""
        },
        "244": {
          "source": "    getMethodsToCompose: function() {",
          "coverage": ""
        },
        "245": {
          "source": "        var methods = this.methods,",
          "coverage": 13
        },
        "246": {
          "source": "            filterFn;",
          "coverage": ""
        },
        "247": {
          "source": "            ",
          "coverage": ""
        },
        "248": {
          "source": "        if (is.isArray(methods)) {",
          "coverage": 13
        },
        "249": {
          "source": "            return methods;",
          "coverage": 0
        },
        "250": {
          "source": "        }",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": "        filterFn = methods;",
          "coverage": 13
        },
        "253": {
          "source": "",
          "coverage": ""
        },
        "254": {
          "source": "        if (is.isString(methods)) {",
          "coverage": 13
        },
        "255": {
          "source": "            filterFn = this.filterMethodFns[methods];",
          "coverage": 7
        },
        "256": {
          "source": "        }",
          "coverage": ""
        },
        "257": {
          "source": "",
          "coverage": ""
        },
        "258": {
          "source": "        //Constructors are not needed if create is overwritten",
          "coverage": ""
        },
        "259": {
          "source": "        return oFilter(this.getObjectWithMethods(), filterFn, this, {",
          "coverage": 13
        },
        "260": {
          "source": "            ownProperties: false,",
          "coverage": ""
        },
        "261": {
          "source": "            keys: true",
          "coverage": ""
        },
        "262": {
          "source": "        });",
          "coverage": ""
        },
        "263": {
          "source": "    }",
          "coverage": ""
        },
        "264": {
          "source": "};",
          "coverage": ""
        },
        "265": {
          "source": "",
          "coverage": ""
        },
        "266": {
          "source": "module.exports = Composition;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "class/compositionEnums.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "var EventEmitter = require('../events/eventEmitter'),",
          "coverage": 1
        },
        "2": {
          "source": "    PluginManager = require('./pluginManager');",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "/**",
          "coverage": ""
        },
        "5": {
          "source": " * @class Luc.compositionEnums",
          "coverage": ""
        },
        "6": {
          "source": " * Composition enums are just common config objects for Luc.Composition.",
          "coverage": ""
        },
        "7": {
          "source": " * Here is an example of a composition that uses EventEmitter but only",
          "coverage": ""
        },
        "8": {
          "source": " * puts the emit method on the prototype.",
          "coverage": ""
        },
        "9": {
          "source": " *",
          "coverage": ""
        },
        "10": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "11": {
          "source": "        $compositions: {",
          "coverage": ""
        },
        "12": {
          "source": "            defaults: Luc.compositionEnums.EventEmitter,",
          "coverage": ""
        },
        "13": {
          "source": "            methods: ['emit']",
          "coverage": ""
        },
        "14": {
          "source": "        }",
          "coverage": ""
        },
        "15": {
          "source": "    });",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "    typeof c.emit",
          "coverage": ""
        },
        "20": {
          "source": "    &gt;\"function\"",
          "coverage": ""
        },
        "21": {
          "source": "    typeof c.on",
          "coverage": ""
        },
        "22": {
          "source": "    \"undefined\"",
          "coverage": ""
        },
        "23": {
          "source": " * ",
          "coverage": ""
        },
        "24": {
          "source": " */",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "/**",
          "coverage": ""
        },
        "27": {
          "source": " * @property {Object} EventEmitter",
          "coverage": ""
        },
        "28": {
          "source": " */",
          "coverage": ""
        },
        "29": {
          "source": "module.exports.EventEmitter = {",
          "coverage": 1
        },
        "30": {
          "source": "    Constructor: EventEmitter,",
          "coverage": ""
        },
        "31": {
          "source": "    name: 'emitter',",
          "coverage": ""
        },
        "32": {
          "source": "    methods: 'allMethods'",
          "coverage": ""
        },
        "33": {
          "source": "};",
          "coverage": ""
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "/**",
          "coverage": ""
        },
        "37": {
          "source": " * @property {Object} PluginManager",
          "coverage": ""
        },
        "38": {
          "source": " */",
          "coverage": ""
        },
        "39": {
          "source": "module.exports.PluginManager = {",
          "coverage": 1
        },
        "40": {
          "source": "    name: 'plugins',",
          "coverage": ""
        },
        "41": {
          "source": "    initAfter: true,",
          "coverage": ""
        },
        "42": {
          "source": "    Constructor: PluginManager,",
          "coverage": ""
        },
        "43": {
          "source": "    create: function() {",
          "coverage": ""
        },
        "44": {
          "source": "        return new this.Constructor({",
          "coverage": 3
        },
        "45": {
          "source": "            instance: this.instance,",
          "coverage": ""
        },
        "46": {
          "source": "            instanceArgs: this.instanceArgs",
          "coverage": ""
        },
        "47": {
          "source": "        });",
          "coverage": ""
        },
        "48": {
          "source": "    },",
          "coverage": ""
        },
        "49": {
          "source": "    ignoreMethods: 'defaultPlugin',",
          "coverage": ""
        },
        "50": {
          "source": "    methods: 'publicMethods'",
          "coverage": ""
        },
        "51": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "class/definer.js",
      "coverage": 100,
      "hits": 113,
      "misses": 0,
      "sloc": 113,
      "source": {
        "1": {
          "source": "var Base = require('./base'),",
          "coverage": 1
        },
        "2": {
          "source": "    Composition = require('./composition'),",
          "coverage": ""
        },
        "3": {
          "source": "    obj = require('../object'),",
          "coverage": ""
        },
        "4": {
          "source": "    arrayFns = require('../array'),",
          "coverage": ""
        },
        "5": {
          "source": "    emptyFn = require('../function').emptyFn,",
          "coverage": ""
        },
        "6": {
          "source": "    is = require('../is'),",
          "coverage": ""
        },
        "7": {
          "source": "    aEach = arrayFns.each,",
          "coverage": ""
        },
        "8": {
          "source": "    apply = obj.apply,",
          "coverage": ""
        },
        "9": {
          "source": "    oEach = obj.each,",
          "coverage": ""
        },
        "10": {
          "source": "    oFilter = obj.filter,",
          "coverage": ""
        },
        "11": {
          "source": "    mix = obj.mix,",
          "coverage": ""
        },
        "12": {
          "source": "    arraySlice = Array.prototype.slice,",
          "coverage": ""
        },
        "13": {
          "source": "    ClassDefiner;",
          "coverage": ""
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "/**",
          "coverage": ""
        },
        "16": {
          "source": " * @class Luc.ClassDefiner",
          "coverage": ""
        },
        "17": {
          "source": " * @singleton",
          "coverage": ""
        },
        "18": {
          "source": " *",
          "coverage": ""
        },
        "19": {
          "source": " * Singleton that {@link Luc.define#define Luc.define} uses to define classes.  The defualt type can",
          "coverage": ""
        },
        "20": {
          "source": " * be changed to any Constructor",
          "coverage": ""
        },
        "21": {
          "source": " *",
          "coverage": ""
        },
        "22": {
          "source": "    function MyClass(){};",
          "coverage": ""
        },
        "23": {
          "source": "    Luc.ClassDefiner.defaultType = MyClass;",
          "coverage": ""
        },
        "24": {
          "source": "    var C = Luc.define();",
          "coverage": ""
        },
        "25": {
          "source": "    new C() instanceof Luc.Base",
          "coverage": ""
        },
        "26": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "27": {
          "source": "    new C() instanceof MyClass",
          "coverage": ""
        },
        "28": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "29": {
          "source": " */",
          "coverage": ""
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "/**",
          "coverage": ""
        },
        "32": {
          "source": " * @cfg {Function} defaultType this can be changed to any Constructor.  Defaults",
          "coverage": ""
        },
        "33": {
          "source": " * to Luc.Base.",
          "coverage": ""
        },
        "34": {
          "source": " */",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "ClassDefiner = {",
          "coverage": 1
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "    COMPOSITIONS_NAME: '$compositions',",
          "coverage": ""
        },
        "39": {
          "source": "",
          "coverage": ""
        },
        "40": {
          "source": "    defaultType: Base,",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "    processorKeys: {",
          "coverage": ""
        },
        "43": {
          "source": "        $mixins: '_applyMixins',",
          "coverage": ""
        },
        "44": {
          "source": "        $statics: '_applyStatics',",
          "coverage": ""
        },
        "45": {
          "source": "        $compositions: '_applyComposerMethods',",
          "coverage": ""
        },
        "46": {
          "source": "        $super: '_applySuper'",
          "coverage": ""
        },
        "47": {
          "source": "    },",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "    define: function(opts, after) {",
          "coverage": ""
        },
        "50": {
          "source": "        var options = opts || {},",
          "coverage": 28
        },
        "51": {
          "source": "            //if super is a falsy value besides undefined that means no superclass",
          "coverage": ""
        },
        "52": {
          "source": "            Super = options.$super || (options.$super === undefined ? this.defaultType : false),",
          "coverage": ""
        },
        "53": {
          "source": "            afterDefine = after || emptyFn,",
          "coverage": ""
        },
        "54": {
          "source": "            Constructor;",
          "coverage": ""
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "        options.$super = Super;",
          "coverage": 28
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "        Constructor = this._createConstructor(options);",
          "coverage": 28
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "        this._processAfterCreate(Constructor, options);",
          "coverage": 28
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "        afterDefine.call(Constructor, Constructor);",
          "coverage": 26
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "        return Constructor;",
          "coverage": 26
        },
        "65": {
          "source": "    },",
          "coverage": ""
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": "    _createConstructor: function(options) {",
          "coverage": ""
        },
        "68": {
          "source": "        var superclass = options.$super,",
          "coverage": 28
        },
        "69": {
          "source": "            Constructor = this._createConstructorFn(options);",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "        if(superclass) {",
          "coverage": 28
        },
        "72": {
          "source": "            Constructor.prototype = Object.create(superclass.prototype);",
          "coverage": 26
        },
        "73": {
          "source": "        }",
          "coverage": ""
        },
        "74": {
          "source": "        ",
          "coverage": ""
        },
        "75": {
          "source": "        return Constructor;",
          "coverage": 28
        },
        "76": {
          "source": "    },",
          "coverage": ""
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "    _createConstructorFn: function(options) {",
          "coverage": ""
        },
        "79": {
          "source": "        var superclass = options.$super,",
          "coverage": 28
        },
        "80": {
          "source": "            Constructor;",
          "coverage": ""
        },
        "81": {
          "source": "",
          "coverage": ""
        },
        "82": {
          "source": "        if (this._hasConstructorModifyingOptions(options)) {",
          "coverage": 28
        },
        "83": {
          "source": "            Constructor = this._createConstructorFromOptions(options);",
          "coverage": 11
        },
        "84": {
          "source": "        }",
          "coverage": ""
        },
        "85": {
          "source": "        else if(!superclass) {",
          "coverage": 17
        },
        "86": {
          "source": "            Constructor = function() {};",
          "coverage": 1
        },
        "87": {
          "source": "        }",
          "coverage": ""
        },
        "88": {
          "source": "        else {",
          "coverage": ""
        },
        "89": {
          "source": "            Constructor = function() {",
          "coverage": 16
        },
        "90": {
          "source": "                superclass.apply(this, arguments);",
          "coverage": 22
        },
        "91": {
          "source": "            };",
          "coverage": ""
        },
        "92": {
          "source": "        }",
          "coverage": ""
        },
        "93": {
          "source": "",
          "coverage": ""
        },
        "94": {
          "source": "        return Constructor;",
          "coverage": 28
        },
        "95": {
          "source": "    },",
          "coverage": ""
        },
        "96": {
          "source": "",
          "coverage": ""
        },
        "97": {
          "source": "    _hasConstructorModifyingOptions: function(options) {",
          "coverage": ""
        },
        "98": {
          "source": "        return options.$compositions;",
          "coverage": 28
        },
        "99": {
          "source": "    },",
          "coverage": ""
        },
        "100": {
          "source": "",
          "coverage": ""
        },
        "101": {
          "source": "    _createConstructorFromOptions: function(options) {",
          "coverage": ""
        },
        "102": {
          "source": "        var superclass = options.$super,",
          "coverage": 11
        },
        "103": {
          "source": "            me = this,",
          "coverage": ""
        },
        "104": {
          "source": "            initBeforeSuperclass,",
          "coverage": ""
        },
        "105": {
          "source": "            initAfterSuperclass,",
          "coverage": ""
        },
        "106": {
          "source": "            init;",
          "coverage": ""
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "        if (!superclass) {",
          "coverage": 11
        },
        "109": {
          "source": "            init = this._createInitClassFn(options, {",
          "coverage": 1
        },
        "110": {
          "source": "                all: true",
          "coverage": ""
        },
        "111": {
          "source": "            });",
          "coverage": ""
        },
        "112": {
          "source": "",
          "coverage": ""
        },
        "113": {
          "source": "            return function() {",
          "coverage": 1
        },
        "114": {
          "source": "                var args = arraySlice.call(arguments);",
          "coverage": 1
        },
        "115": {
          "source": "                init.call(this, options, args);",
          "coverage": 1
        },
        "116": {
          "source": "            };",
          "coverage": ""
        },
        "117": {
          "source": "        }",
          "coverage": ""
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "        initBeforeSuperclass = this._createInitClassFn(options, {",
          "coverage": 10
        },
        "120": {
          "source": "            before: true",
          "coverage": ""
        },
        "121": {
          "source": "        });",
          "coverage": ""
        },
        "122": {
          "source": "",
          "coverage": ""
        },
        "123": {
          "source": "        initAfterSuperclass = this._createInitClassFn(options, {",
          "coverage": 10
        },
        "124": {
          "source": "            before: false",
          "coverage": ""
        },
        "125": {
          "source": "        });",
          "coverage": ""
        },
        "126": {
          "source": "",
          "coverage": ""
        },
        "127": {
          "source": "        return function() {",
          "coverage": 10
        },
        "128": {
          "source": "            var args = arraySlice.call(arguments);",
          "coverage": 7
        },
        "129": {
          "source": "",
          "coverage": ""
        },
        "130": {
          "source": "            initBeforeSuperclass.call(this, options, args);",
          "coverage": 7
        },
        "131": {
          "source": "            superclass.apply(this, arguments);",
          "coverage": 7
        },
        "132": {
          "source": "            initAfterSuperclass.call(this, options, args);",
          "coverage": 7
        },
        "133": {
          "source": "        };",
          "coverage": ""
        },
        "134": {
          "source": "    },",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "    _createInitClassFn: function(options, config) {",
          "coverage": ""
        },
        "137": {
          "source": "        var me = this,",
          "coverage": 21
        },
        "138": {
          "source": "            compositions = this._filterCompositions(config, options.$compositions);",
          "coverage": ""
        },
        "139": {
          "source": "",
          "coverage": ""
        },
        "140": {
          "source": "        if(compositions.length === 0) {",
          "coverage": 21
        },
        "141": {
          "source": "            return emptyFn;",
          "coverage": 9
        },
        "142": {
          "source": "        }",
          "coverage": ""
        },
        "143": {
          "source": "        ",
          "coverage": ""
        },
        "144": {
          "source": "        return function(options, instanceArgs) {",
          "coverage": 12
        },
        "145": {
          "source": "            me._initCompositions.call(this, compositions, instanceArgs);",
          "coverage": 9
        },
        "146": {
          "source": "        };",
          "coverage": ""
        },
        "147": {
          "source": "    },",
          "coverage": ""
        },
        "148": {
          "source": "",
          "coverage": ""
        },
        "149": {
          "source": "    _filterCompositions: function(config, compositions) {",
          "coverage": ""
        },
        "150": {
          "source": "        var before = config.before, ",
          "coverage": 21
        },
        "151": {
          "source": "            filtered = [];",
          "coverage": ""
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "        if(config.all) {",
          "coverage": 21
        },
        "154": {
          "source": "            return compositions;",
          "coverage": 1
        },
        "155": {
          "source": "        }",
          "coverage": ""
        },
        "156": {
          "source": "",
          "coverage": ""
        },
        "157": {
          "source": "        aEach(compositions, function(composition) {",
          "coverage": 20
        },
        "158": {
          "source": "            if(before &amp;&amp; composition.initAfter !== true || (!before &amp;&amp; composition.initAfter === true)) {",
          "coverage": 28
        },
        "159": {
          "source": "                    filtered.push(composition);",
          "coverage": 14
        },
        "160": {
          "source": "            }",
          "coverage": ""
        },
        "161": {
          "source": "        });",
          "coverage": ""
        },
        "162": {
          "source": "",
          "coverage": ""
        },
        "163": {
          "source": "        return filtered;",
          "coverage": 20
        },
        "164": {
          "source": "    },",
          "coverage": ""
        },
        "165": {
          "source": "",
          "coverage": ""
        },
        "166": {
          "source": "    _processAfterCreate: function($class, options) {",
          "coverage": ""
        },
        "167": {
          "source": "        this._applyValuesToProto($class, options);",
          "coverage": 28
        },
        "168": {
          "source": "        this._handlePostProcessors($class, options);",
          "coverage": 28
        },
        "169": {
          "source": "    },",
          "coverage": ""
        },
        "170": {
          "source": "",
          "coverage": ""
        },
        "171": {
          "source": "    _applyValuesToProto: function($class, options) {",
          "coverage": ""
        },
        "172": {
          "source": "        var proto = $class.prototype,",
          "coverage": 28
        },
        "173": {
          "source": "            values = apply({",
          "coverage": ""
        },
        "174": {
          "source": "                $class: $class",
          "coverage": ""
        },
        "175": {
          "source": "            }, options);",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "        //Don't put the define specific properties",
          "coverage": ""
        },
        "178": {
          "source": "        //on the prototype",
          "coverage": ""
        },
        "179": {
          "source": "        oEach(values, function(key, value) {",
          "coverage": 28
        },
        "180": {
          "source": "            if (!this._getProcessorKey(key)) {",
          "coverage": 92
        },
        "181": {
          "source": "                proto[key] = value;",
          "coverage": 38
        },
        "182": {
          "source": "            }",
          "coverage": ""
        },
        "183": {
          "source": "        }, this);",
          "coverage": ""
        },
        "184": {
          "source": "    },",
          "coverage": ""
        },
        "185": {
          "source": "",
          "coverage": ""
        },
        "186": {
          "source": "    _getProcessorKey: function(key) {",
          "coverage": ""
        },
        "187": {
          "source": "        return this.processorKeys[key];",
          "coverage": 154
        },
        "188": {
          "source": "    },",
          "coverage": ""
        },
        "189": {
          "source": "",
          "coverage": ""
        },
        "190": {
          "source": "    _handlePostProcessors: function($class, options) {",
          "coverage": ""
        },
        "191": {
          "source": "        oEach(options, function(key, value) {",
          "coverage": 28
        },
        "192": {
          "source": "            var method = this._getProcessorKey(key);",
          "coverage": 62
        },
        "193": {
          "source": "",
          "coverage": ""
        },
        "194": {
          "source": "            if (is.isFunction(this[method])) {",
          "coverage": 62
        },
        "195": {
          "source": "                this[method].call(this, $class, options[key]);",
          "coverage": 52
        },
        "196": {
          "source": "            }",
          "coverage": ""
        },
        "197": {
          "source": "        }, this);",
          "coverage": ""
        },
        "198": {
          "source": "    },",
          "coverage": ""
        },
        "199": {
          "source": "",
          "coverage": ""
        },
        "200": {
          "source": "    _applyMixins: function($class, mixins) {",
          "coverage": ""
        },
        "201": {
          "source": "        var proto = $class.prototype;",
          "coverage": 6
        },
        "202": {
          "source": "        aEach(mixins, function(mixin) {",
          "coverage": 6
        },
        "203": {
          "source": "            //accept Constructors or Objects",
          "coverage": ""
        },
        "204": {
          "source": "            var toMix = mixin.prototype || mixin;",
          "coverage": 7
        },
        "205": {
          "source": "            mix(proto, toMix);",
          "coverage": 7
        },
        "206": {
          "source": "        });",
          "coverage": ""
        },
        "207": {
          "source": "    },",
          "coverage": ""
        },
        "208": {
          "source": "",
          "coverage": ""
        },
        "209": {
          "source": "    _applyStatics: function($class, statics) {",
          "coverage": ""
        },
        "210": {
          "source": "        var prototype = $class.prototype;",
          "coverage": 9
        },
        "211": {
          "source": "",
          "coverage": ""
        },
        "212": {
          "source": "        apply($class, statics);",
          "coverage": 9
        },
        "213": {
          "source": "",
          "coverage": ""
        },
        "214": {
          "source": "        if(prototype.getStaticValue === undefined) {",
          "coverage": 9
        },
        "215": {
          "source": "            prototype.getStaticValue = this.getStaticValue;",
          "coverage": 7
        },
        "216": {
          "source": "        }",
          "coverage": ""
        },
        "217": {
          "source": "    },",
          "coverage": ""
        },
        "218": {
          "source": "",
          "coverage": ""
        },
        "219": {
          "source": "    _applyComposerMethods: function($class, compositions) {",
          "coverage": ""
        },
        "220": {
          "source": "        var prototype = $class.prototype,",
          "coverage": 11
        },
        "221": {
          "source": "            methodsToCompose;",
          "coverage": ""
        },
        "222": {
          "source": "",
          "coverage": ""
        },
        "223": {
          "source": "        aEach(compositions, function(compositionConfig) {",
          "coverage": 11
        },
        "224": {
          "source": "            var composition = new Composition(compositionConfig),",
          "coverage": 15
        },
        "225": {
          "source": "                name = composition.name,",
          "coverage": ""
        },
        "226": {
          "source": "                Constructor = composition.Constructor;",
          "coverage": ""
        },
        "227": {
          "source": "",
          "coverage": ""
        },
        "228": {
          "source": "            composition.validate();",
          "coverage": 15
        },
        "229": {
          "source": "",
          "coverage": ""
        },
        "230": {
          "source": "            methodsToCompose = composition.getMethodsToCompose();",
          "coverage": 13
        },
        "231": {
          "source": "",
          "coverage": ""
        },
        "232": {
          "source": "            methodsToCompose.forEach(function(key) {",
          "coverage": 13
        },
        "233": {
          "source": "                if (prototype[key] === undefined) {",
          "coverage": 47
        },
        "234": {
          "source": "                    prototype[key] = this._createComposerProtoFn(key, name);",
          "coverage": 46
        },
        "235": {
          "source": "                }",
          "coverage": ""
        },
        "236": {
          "source": "            }, this);",
          "coverage": ""
        },
        "237": {
          "source": "",
          "coverage": ""
        },
        "238": {
          "source": "            if(prototype.getComposition === undefined) {",
          "coverage": 13
        },
        "239": {
          "source": "                prototype.getComposition = this.getComposition;",
          "coverage": 9
        },
        "240": {
          "source": "            }",
          "coverage": ""
        },
        "241": {
          "source": "",
          "coverage": ""
        },
        "242": {
          "source": "        }, this);",
          "coverage": ""
        },
        "243": {
          "source": "    },",
          "coverage": ""
        },
        "244": {
          "source": "",
          "coverage": ""
        },
        "245": {
          "source": "    _applySuper: function($class, $super) {",
          "coverage": ""
        },
        "246": {
          "source": "        var proto,",
          "coverage": 26
        },
        "247": {
          "source": "            superObj;",
          "coverage": ""
        },
        "248": {
          "source": "",
          "coverage": ""
        },
        "249": {
          "source": "        //super can be falsy to signify no superclass",
          "coverage": ""
        },
        "250": {
          "source": "        if ($super) {",
          "coverage": 26
        },
        "251": {
          "source": "            superObj = {",
          "coverage": 24
        },
        "252": {
          "source": "                $super: $super,",
          "coverage": ""
        },
        "253": {
          "source": "                $superclass: $super.prototype",
          "coverage": ""
        },
        "254": {
          "source": "            };",
          "coverage": ""
        },
        "255": {
          "source": "",
          "coverage": ""
        },
        "256": {
          "source": "            proto = $class.prototype;",
          "coverage": 24
        },
        "257": {
          "source": "",
          "coverage": ""
        },
        "258": {
          "source": "            apply(proto, superObj);",
          "coverage": 24
        },
        "259": {
          "source": "            apply($class, superObj);",
          "coverage": 24
        },
        "260": {
          "source": "",
          "coverage": ""
        },
        "261": {
          "source": "            this._addSuperMethod(proto);",
          "coverage": 24
        },
        "262": {
          "source": "        }",
          "coverage": ""
        },
        "263": {
          "source": "    },",
          "coverage": ""
        },
        "264": {
          "source": "",
          "coverage": ""
        },
        "265": {
          "source": "    _addSuperMethod: function(proto) {",
          "coverage": ""
        },
        "266": {
          "source": "",
          "coverage": ""
        },
        "267": {
          "source": "        function getSuperMethod(callee, sp) {",
          "coverage": 24
        },
        "268": {
          "source": "            var $super = sp || proto,",
          "coverage": 17
        },
        "269": {
          "source": "                key;",
          "coverage": ""
        },
        "270": {
          "source": "",
          "coverage": ""
        },
        "271": {
          "source": "            for (key in $super) {",
          "coverage": 17
        },
        "272": {
          "source": "                if ($super[key] === callee) {",
          "coverage": 74
        },
        "273": {
          "source": "",
          "coverage": ""
        },
        "274": {
          "source": "                    return $super.$superclass[key];",
          "coverage": 10
        },
        "275": {
          "source": "",
          "coverage": ""
        },
        "276": {
          "source": "                    //we could be caching this here on the fn",
          "coverage": ""
        },
        "277": {
          "source": "                    //but then devs would have to know the edge cases",
          "coverage": ""
        },
        "278": {
          "source": "                    //of how to invalidate it",
          "coverage": ""
        },
        "279": {
          "source": "                }",
          "coverage": ""
        },
        "280": {
          "source": "            }",
          "coverage": ""
        },
        "281": {
          "source": "",
          "coverage": ""
        },
        "282": {
          "source": "            return getSuperMethod(callee, $super.$superclass);",
          "coverage": 7
        },
        "283": {
          "source": "        }",
          "coverage": ""
        },
        "284": {
          "source": "",
          "coverage": ""
        },
        "285": {
          "source": "        function callSuper(args) {",
          "coverage": 24
        },
        "286": {
          "source": "            var superMethod = getSuperMethod(callSuper.caller);",
          "coverage": 10
        },
        "287": {
          "source": "",
          "coverage": ""
        },
        "288": {
          "source": "            if(superMethod) {",
          "coverage": 10
        },
        "289": {
          "source": "                return superMethod.apply(this, args);",
          "coverage": 9
        },
        "290": {
          "source": "            }",
          "coverage": ""
        },
        "291": {
          "source": "",
          "coverage": ""
        },
        "292": {
          "source": "            throw new Error('super method not found.');",
          "coverage": 1
        },
        "293": {
          "source": "            ",
          "coverage": ""
        },
        "294": {
          "source": "        }",
          "coverage": ""
        },
        "295": {
          "source": "",
          "coverage": ""
        },
        "296": {
          "source": "        proto.callSuper = callSuper;",
          "coverage": 24
        },
        "297": {
          "source": "    },",
          "coverage": ""
        },
        "298": {
          "source": "",
          "coverage": ""
        },
        "299": {
          "source": "    _createComposerProtoFn: function(methodName, compositionName) {",
          "coverage": ""
        },
        "300": {
          "source": "        return function() {",
          "coverage": 46
        },
        "301": {
          "source": "            var comp = this[ClassDefiner.COMPOSITIONS_NAME][compositionName];",
          "coverage": 26
        },
        "302": {
          "source": "            return comp[methodName].apply(comp, arguments);",
          "coverage": 26
        },
        "303": {
          "source": "        };",
          "coverage": ""
        },
        "304": {
          "source": "    },",
          "coverage": ""
        },
        "305": {
          "source": "",
          "coverage": ""
        },
        "306": {
          "source": "    /**",
          "coverage": ""
        },
        "307": {
          "source": "     * @private",
          "coverage": ""
        },
        "308": {
          "source": "     * @ignore",
          "coverage": ""
        },
        "309": {
          "source": "     * options {Object} the composition config object",
          "coverage": ""
        },
        "310": {
          "source": "     * instanceArgs {Array} the arguments passed to the instance's",
          "coverage": ""
        },
        "311": {
          "source": "     * constructor.",
          "coverage": ""
        },
        "312": {
          "source": "     */",
          "coverage": ""
        },
        "313": {
          "source": "    _initCompositions: function(compositions, instanceArgs) {",
          "coverage": ""
        },
        "314": {
          "source": "        if(!this[ClassDefiner.COMPOSITIONS_NAME]) {",
          "coverage": 9
        },
        "315": {
          "source": "            this[ClassDefiner.COMPOSITIONS_NAME] = {};",
          "coverage": 8
        },
        "316": {
          "source": "        }",
          "coverage": ""
        },
        "317": {
          "source": "",
          "coverage": ""
        },
        "318": {
          "source": "        aEach(compositions, function(compositionConfig) {",
          "coverage": 9
        },
        "319": {
          "source": "            var config = apply({",
          "coverage": 12
        },
        "320": {
          "source": "                instance: this,",
          "coverage": ""
        },
        "321": {
          "source": "                instanceArgs: instanceArgs",
          "coverage": ""
        },
        "322": {
          "source": "            }, compositionConfig), ",
          "coverage": ""
        },
        "323": {
          "source": "            composition;",
          "coverage": ""
        },
        "324": {
          "source": "",
          "coverage": ""
        },
        "325": {
          "source": "            composition = new Composition(config);",
          "coverage": 12
        },
        "326": {
          "source": "",
          "coverage": ""
        },
        "327": {
          "source": "            this[ClassDefiner.COMPOSITIONS_NAME][composition.name] = composition.getInstance();",
          "coverage": 12
        },
        "328": {
          "source": "        }, this);",
          "coverage": ""
        },
        "329": {
          "source": "    },",
          "coverage": ""
        },
        "330": {
          "source": "",
          "coverage": ""
        },
        "331": {
          "source": "    //Methods that can get added to the prototype",
          "coverage": ""
        },
        "332": {
          "source": "    //they will be called in the context of the instance.",
          "coverage": ""
        },
        "333": {
          "source": "    //",
          "coverage": ""
        },
        "334": {
          "source": "    getComposition: function(key) {",
          "coverage": ""
        },
        "335": {
          "source": "        return this[ClassDefiner.COMPOSITIONS_NAME][key];",
          "coverage": 5
        },
        "336": {
          "source": "    },",
          "coverage": ""
        },
        "337": {
          "source": "",
          "coverage": ""
        },
        "338": {
          "source": "    getStaticValue: function (key, $class) {",
          "coverage": ""
        },
        "339": {
          "source": "        var classToFindValue = $class || this.$class,",
          "coverage": 19
        },
        "340": {
          "source": "            $super,",
          "coverage": ""
        },
        "341": {
          "source": "            value;",
          "coverage": ""
        },
        "342": {
          "source": "",
          "coverage": ""
        },
        "343": {
          "source": "        value = classToFindValue[key];",
          "coverage": 19
        },
        "344": {
          "source": "",
          "coverage": ""
        },
        "345": {
          "source": "        if(value === undefined) {",
          "coverage": 19
        },
        "346": {
          "source": "            $super = classToFindValue.prototype.$super;",
          "coverage": 12
        },
        "347": {
          "source": "            if($super) {",
          "coverage": 12
        },
        "348": {
          "source": "                return this.getStaticValue(key, $super);",
          "coverage": 9
        },
        "349": {
          "source": "            }",
          "coverage": ""
        },
        "350": {
          "source": "        }",
          "coverage": ""
        },
        "351": {
          "source": "",
          "coverage": ""
        },
        "352": {
          "source": "        return value;",
          "coverage": 10
        },
        "353": {
          "source": "    }",
          "coverage": ""
        },
        "354": {
          "source": "",
          "coverage": ""
        },
        "355": {
          "source": "};",
          "coverage": ""
        },
        "356": {
          "source": "",
          "coverage": ""
        },
        "357": {
          "source": "ClassDefiner.define = ClassDefiner.define.bind(ClassDefiner);",
          "coverage": 1
        },
        "358": {
          "source": "",
          "coverage": ""
        },
        "359": {
          "source": "module.exports = ClassDefiner;",
          "coverage": 1
        },
        "360": {
          "source": "",
          "coverage": ""
        },
        "361": {
          "source": "/**",
          "coverage": ""
        },
        "362": {
          "source": " * @class  Luc.define",
          "coverage": ""
        },
        "363": {
          "source": " * This is actually a function but has a decent amount of important options",
          "coverage": ""
        },
        "364": {
          "source": " * so we are documenting it like it is a class.  Properties are things that will get",
          "coverage": ""
        },
        "365": {
          "source": " * applied to instances of classes defined with {@link Luc.define#define define}.  None",
          "coverage": ""
        },
        "366": {
          "source": " * are needed for {@link Luc.define#define defining} a class.  {@link Luc.define#define define}",
          "coverage": ""
        },
        "367": {
          "source": " * just takes the passed in config and puts the properties on the prototype and returns",
          "coverage": ""
        },
        "368": {
          "source": " * a Constructor.",
          "coverage": ""
        },
        "369": {
          "source": " *",
          "coverage": ""
        },
        "370": {
          "source": "",
          "coverage": ""
        },
        "371": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "372": {
          "source": "        a: 1,",
          "coverage": ""
        },
        "373": {
          "source": "        doLog: true,",
          "coverage": ""
        },
        "374": {
          "source": "        logA: function() {",
          "coverage": ""
        },
        "375": {
          "source": "            if (this.doLog) {",
          "coverage": ""
        },
        "376": {
          "source": "                console.log(this.a);",
          "coverage": ""
        },
        "377": {
          "source": "            }",
          "coverage": ""
        },
        "378": {
          "source": "        }",
          "coverage": ""
        },
        "379": {
          "source": "    });",
          "coverage": ""
        },
        "380": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "381": {
          "source": "    c.logA();",
          "coverage": ""
        },
        "382": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "383": {
          "source": "    c.a = 45;",
          "coverage": ""
        },
        "384": {
          "source": "    c.logA();",
          "coverage": ""
        },
        "385": {
          "source": "    &gt;45",
          "coverage": ""
        },
        "386": {
          "source": "    c.doLog = false;",
          "coverage": ""
        },
        "387": {
          "source": "    c.logA();",
          "coverage": ""
        },
        "388": {
          "source": "",
          "coverage": ""
        },
        "389": {
          "source": "    new C().logA()",
          "coverage": ""
        },
        "390": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "391": {
          "source": "",
          "coverage": ""
        },
        "392": {
          "source": " *",
          "coverage": ""
        },
        "393": {
          "source": " * Check out the following configs to add functionality to a class without messing",
          "coverage": ""
        },
        "394": {
          "source": " * up the inheritance chain.  All the configs have examples and documentation on ",
          "coverage": ""
        },
        "395": {
          "source": " * how to use them.",
          "coverage": ""
        },
        "396": {
          "source": " *",
          "coverage": ""
        },
        "397": {
          "source": " * {@link Luc.define#$super super} &lt;br&gt;",
          "coverage": ""
        },
        "398": {
          "source": " * {@link Luc.define#$compositions compositions} &lt;br&gt;",
          "coverage": ""
        },
        "399": {
          "source": " * {@link Luc.define#$mixins mixins} &lt;br&gt;",
          "coverage": ""
        },
        "400": {
          "source": " * {@link Luc.define#$statics statics} &lt;br&gt;",
          "coverage": ""
        },
        "401": {
          "source": " * ",
          "coverage": ""
        },
        "402": {
          "source": " * ",
          "coverage": ""
        },
        "403": {
          "source": " */",
          "coverage": ""
        },
        "404": {
          "source": "",
          "coverage": ""
        },
        "405": {
          "source": "/**",
          "coverage": ""
        },
        "406": {
          "source": " * @method  define",
          "coverage": ""
        },
        "407": {
          "source": " * @param {Object} config config object used when creating the class.  Any property that",
          "coverage": ""
        },
        "408": {
          "source": " * is not apart of the special configs will be applied to the prototype.  Check out",
          "coverage": ""
        },
        "409": {
          "source": " * Luc.define for all the config options.   No configs are needed to define a class.",
          "coverage": ""
        },
        "410": {
          "source": " *",
          "coverage": ""
        },
        "411": {
          "source": " * @param {Function} afterDefine (optional) function to run after the Constructor has been created.",
          "coverage": ""
        },
        "412": {
          "source": " * The first an only argument is the newly created Constructor.",
          "coverage": ""
        },
        "413": {
          "source": " * ",
          "coverage": ""
        },
        "414": {
          "source": " * @return {Function} the defined class",
          "coverage": ""
        },
        "415": {
          "source": " *",
          "coverage": ""
        },
        "416": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "417": {
          "source": "        logA: function() {",
          "coverage": ""
        },
        "418": {
          "source": "            console.log(this.a)",
          "coverage": ""
        },
        "419": {
          "source": "        },",
          "coverage": ""
        },
        "420": {
          "source": "        a: 1",
          "coverage": ""
        },
        "421": {
          "source": "    });",
          "coverage": ""
        },
        "422": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "423": {
          "source": "    c.logA();",
          "coverage": ""
        },
        "424": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "425": {
          "source": "",
          "coverage": ""
        },
        "426": {
          "source": "    c.a = 4;",
          "coverage": ""
        },
        "427": {
          "source": "    c.logA();",
          "coverage": ""
        },
        "428": {
          "source": "    &gt;4",
          "coverage": ""
        },
        "429": {
          "source": " *",
          "coverage": ""
        },
        "430": {
          "source": " *",
          "coverage": ""
        },
        "431": {
          "source": " */",
          "coverage": ""
        },
        "432": {
          "source": "",
          "coverage": ""
        },
        "433": {
          "source": "/**",
          "coverage": ""
        },
        "434": {
          "source": " * @property {Function} $class reference to the instance's own constructor.  This",
          "coverage": ""
        },
        "435": {
          "source": " * will get added to any class that is defined with Luc.define.",
          "coverage": ""
        },
        "436": {
          "source": " * ",
          "coverage": ""
        },
        "437": {
          "source": "    var C = Luc.define()",
          "coverage": ""
        },
        "438": {
          "source": "    var c = new C()",
          "coverage": ""
        },
        "439": {
          "source": "    c.$class === C",
          "coverage": ""
        },
        "440": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "441": {
          "source": " *",
          "coverage": ""
        },
        "442": {
          "source": " * There are some really good use cases to have a reference to it's",
          "coverage": ""
        },
        "443": {
          "source": " * own constructor.  &lt;br&gt; Add functionality to an instance in a simple",
          "coverage": ""
        },
        "444": {
          "source": " * and generic way:",
          "coverage": ""
        },
        "445": {
          "source": " *",
          "coverage": ""
        },
        "446": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "447": {
          "source": "        add: function(a,b) {",
          "coverage": ""
        },
        "448": {
          "source": "            return a + b;",
          "coverage": ""
        },
        "449": {
          "source": "        }",
          "coverage": ""
        },
        "450": {
          "source": "    });",
          "coverage": ""
        },
        "451": {
          "source": "",
          "coverage": ""
        },
        "452": {
          "source": "    //Luc.Base applies first ",
          "coverage": ""
        },
        "453": {
          "source": "    //arg to the instance",
          "coverage": ""
        },
        "454": {
          "source": "",
          "coverage": ""
        },
        "455": {
          "source": "    var c = new C({",
          "coverage": ""
        },
        "456": {
          "source": "        add: function(a,b,c) {",
          "coverage": ""
        },
        "457": {
          "source": "            return this.$class.prototype.add.call(this, a,b) + c;",
          "coverage": ""
        },
        "458": {
          "source": "        }",
          "coverage": ""
        },
        "459": {
          "source": "    });",
          "coverage": ""
        },
        "460": {
          "source": "",
          "coverage": ""
        },
        "461": {
          "source": "    c.add(1,2,3)",
          "coverage": ""
        },
        "462": {
          "source": "    &gt;6",
          "coverage": ""
        },
        "463": {
          "source": "    new C().add(1,2,3)",
          "coverage": ""
        },
        "464": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "465": {
          "source": " *",
          "coverage": ""
        },
        "466": {
          "source": " * Or have a simple generic clone method :",
          "coverage": ""
        },
        "467": {
          "source": " *",
          "coverage": ""
        },
        "468": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "469": {
          "source": "        clone: function() {",
          "coverage": ""
        },
        "470": {
          "source": "            var myOwnProps = {};",
          "coverage": ""
        },
        "471": {
          "source": "            Luc.Object.each(this, function(key, value) {",
          "coverage": ""
        },
        "472": {
          "source": "                myOwnProps[key] = value;",
          "coverage": ""
        },
        "473": {
          "source": "            });",
          "coverage": ""
        },
        "474": {
          "source": "",
          "coverage": ""
        },
        "475": {
          "source": "            return new this.$class(myOwnProps);",
          "coverage": ""
        },
        "476": {
          "source": "        }",
          "coverage": ""
        },
        "477": {
          "source": "    });",
          "coverage": ""
        },
        "478": {
          "source": "",
          "coverage": ""
        },
        "479": {
          "source": "    var c = new C({a:1,b:2,c:3});",
          "coverage": ""
        },
        "480": {
          "source": "    c.d = 4;",
          "coverage": ""
        },
        "481": {
          "source": "    var clone = c.clone();",
          "coverage": ""
        },
        "482": {
          "source": "",
          "coverage": ""
        },
        "483": {
          "source": "    clone === c",
          "coverage": ""
        },
        "484": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "485": {
          "source": "",
          "coverage": ""
        },
        "486": {
          "source": "    clone.a",
          "coverage": ""
        },
        "487": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "488": {
          "source": "    clone.b",
          "coverage": ""
        },
        "489": {
          "source": "    &gt;2",
          "coverage": ""
        },
        "490": {
          "source": "    clone.c",
          "coverage": ""
        },
        "491": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "492": {
          "source": "    clone.d",
          "coverage": ""
        },
        "493": {
          "source": "    &gt;4",
          "coverage": ""
        },
        "494": {
          "source": " */",
          "coverage": ""
        },
        "495": {
          "source": "",
          "coverage": ""
        },
        "496": {
          "source": "/**",
          "coverage": ""
        },
        "497": {
          "source": " * @property {Function} [$super] If $super is not false or null ",
          "coverage": ""
        },
        "498": {
          "source": " * the $super property will be added to every instance of the defined class,",
          "coverage": ""
        },
        "499": {
          "source": " * $super is the Constructor passed in with the $super config or the {@link Luc.ClassDefiner#defaultType default}",
          "coverage": ""
        },
        "500": {
          "source": " * ",
          "coverage": ""
        },
        "501": {
          "source": "    var C = Luc.define()",
          "coverage": ""
        },
        "502": {
          "source": "    var c = new C()",
          "coverage": ""
        },
        "503": {
          "source": "    //Luc.Base is the default ",
          "coverage": ""
        },
        "504": {
          "source": "    c.$super === Luc.Base",
          "coverage": ""
        },
        "505": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "506": {
          "source": " */",
          "coverage": ""
        },
        "507": {
          "source": "",
          "coverage": ""
        },
        "508": {
          "source": "/**",
          "coverage": ""
        },
        "509": {
          "source": " * @property {Function} [callSuper] If $super is defined it",
          "coverage": ""
        },
        "510": {
          "source": " * will be on the prototype of $super.  It can be used to call a super's",
          "coverage": ""
        },
        "511": {
          "source": " * method.  This can be used instead of the class's static $superclass reference.",
          "coverage": ""
        },
        "512": {
          "source": " * Check out {@link Luc.define#callSuper callSuper} for more extensive documentation.",
          "coverage": ""
        },
        "513": {
          "source": " * ",
          "coverage": ""
        },
        "514": {
          "source": " * ",
          "coverage": ""
        },
        "515": {
          "source": "    function MyCoolClass() {}",
          "coverage": ""
        },
        "516": {
          "source": "    MyCoolClass.prototype.addNums = function(a,b) {",
          "coverage": ""
        },
        "517": {
          "source": "        return a + b;",
          "coverage": ""
        },
        "518": {
          "source": "    }",
          "coverage": ""
        },
        "519": {
          "source": "",
          "coverage": ""
        },
        "520": {
          "source": "    var MyOtherCoolClass = Luc.define({",
          "coverage": ""
        },
        "521": {
          "source": "        $super: MyCoolClass,",
          "coverage": ""
        },
        "522": {
          "source": "        addNums: function(a, b, c) {",
          "coverage": ""
        },
        "523": {
          "source": "            return this.callSuper([a, b]) + c;",
          "coverage": ""
        },
        "524": {
          "source": "        }",
          "coverage": ""
        },
        "525": {
          "source": "    })",
          "coverage": ""
        },
        "526": {
          "source": "",
          "coverage": ""
        },
        "527": {
          "source": "    var m = new MyOtherCoolClass();",
          "coverage": ""
        },
        "528": {
          "source": "    m.addNums(1,2,3);",
          "coverage": ""
        },
        "529": {
          "source": "    &gt;6",
          "coverage": ""
        },
        "530": {
          "source": " */",
          "coverage": ""
        },
        "531": {
          "source": "",
          "coverage": ""
        },
        "532": {
          "source": "/**",
          "coverage": ""
        },
        "533": {
          "source": " * @method callSuper If $super is defined it",
          "coverage": ""
        },
        "534": {
          "source": " * will be on the prototype of $super.  It can be used to call a super's",
          "coverage": ""
        },
        "535": {
          "source": " * method.",
          "coverage": ""
        },
        "536": {
          "source": " *",
          "coverage": ""
        },
        "537": {
          "source": " * @param {Array/Arguments} args(optional) The arguments for the super methods apply call.",
          "coverage": ""
        },
        "538": {
          "source": " * ",
          "coverage": ""
        },
        "539": {
          "source": " * ",
          "coverage": ""
        },
        "540": {
          "source": "    function MyCoolClass() {}",
          "coverage": ""
        },
        "541": {
          "source": "    MyCoolClass.prototype.addNums = function(a,b) {",
          "coverage": ""
        },
        "542": {
          "source": "        return a + b;",
          "coverage": ""
        },
        "543": {
          "source": "    }",
          "coverage": ""
        },
        "544": {
          "source": "",
          "coverage": ""
        },
        "545": {
          "source": "    var MC = Luc.define({",
          "coverage": ""
        },
        "546": {
          "source": "        $super: MyCoolClass,",
          "coverage": ""
        },
        "547": {
          "source": "        addNums: function(a, b, c) {",
          "coverage": ""
        },
        "548": {
          "source": "            return this.callSuper([a, b]) + c;",
          "coverage": ""
        },
        "549": {
          "source": "        }",
          "coverage": ""
        },
        "550": {
          "source": "    });",
          "coverage": ""
        },
        "551": {
          "source": "    ",
          "coverage": ""
        },
        "552": {
          "source": "    *",
          "coverage": ""
        },
        "553": {
          "source": "    * produces the same code as :",
          "coverage": ""
        },
        "554": {
          "source": "    * ",
          "coverage": ""
        },
        "555": {
          "source": "    var MC = Luc.define({",
          "coverage": ""
        },
        "556": {
          "source": "        $super: MyCoolClass,",
          "coverage": ""
        },
        "557": {
          "source": "        addNums: function(a, b, c) {",
          "coverage": ""
        },
        "558": {
          "source": "            return MC.$superclass.addNums.apply(this, [a, b]) + c;",
          "coverage": ""
        },
        "559": {
          "source": "        }",
          "coverage": ""
        },
        "560": {
          "source": "    });",
          "coverage": ""
        },
        "561": {
          "source": "",
          "coverage": ""
        },
        "562": {
          "source": "    function Counter() {",
          "coverage": ""
        },
        "563": {
          "source": "        this.count = 0;",
          "coverage": ""
        },
        "564": {
          "source": "     };",
          "coverage": ""
        },
        "565": {
          "source": "",
          "coverage": ""
        },
        "566": {
          "source": "     Counter.prototype = {",
          "coverage": ""
        },
        "567": {
          "source": "        getCount: function() {",
          "coverage": ""
        },
        "568": {
          "source": "            return this.count;",
          "coverage": ""
        },
        "569": {
          "source": "        },",
          "coverage": ""
        },
        "570": {
          "source": "        increaseCount: function() {",
          "coverage": ""
        },
        "571": {
          "source": "            this.count++;",
          "coverage": ""
        },
        "572": {
          "source": "        }",
          "coverage": ""
        },
        "573": {
          "source": "     }",
          "coverage": ""
        },
        "574": {
          "source": "    ",
          "coverage": ""
        },
        "575": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "576": {
          "source": "        $super:Counter,",
          "coverage": ""
        },
        "577": {
          "source": "        increaseCount: function () {",
          "coverage": ""
        },
        "578": {
          "source": "            this.count += 2;",
          "coverage": ""
        },
        "579": {
          "source": "            this.callSuper();",
          "coverage": ""
        },
        "580": {
          "source": "        }",
          "coverage": ""
        },
        "581": {
          "source": "    });",
          "coverage": ""
        },
        "582": {
          "source": "",
          "coverage": ""
        },
        "583": {
          "source": "    *",
          "coverage": ""
        },
        "584": {
          "source": "    * is the same as",
          "coverage": ""
        },
        "585": {
          "source": "    * ",
          "coverage": ""
        },
        "586": {
          "source": "",
          "coverage": ""
        },
        "587": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "588": {
          "source": "        $super:Counter,",
          "coverage": ""
        },
        "589": {
          "source": "        increaseCount: function () {",
          "coverage": ""
        },
        "590": {
          "source": "            this.count += 2;",
          "coverage": ""
        },
        "591": {
          "source": "            C.$superclass.increaseCount.call(this);",
          "coverage": ""
        },
        "592": {
          "source": "        }",
          "coverage": ""
        },
        "593": {
          "source": "    });",
          "coverage": ""
        },
        "594": {
          "source": "",
          "coverage": ""
        },
        "595": {
          "source": "    *",
          "coverage": ""
        },
        "596": {
          "source": "    * Caveats &lt;br&gt;",
          "coverage": ""
        },
        "597": {
          "source": "    *",
          "coverage": ""
        },
        "598": {
          "source": "    * callSuper can not be used as an instance method or inside of method",
          "coverage": ""
        },
        "599": {
          "source": "    * that is overwritten for a particular instance.",
          "coverage": ""
        },
        "600": {
          "source": "    *",
          "coverage": ""
        },
        "601": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "602": {
          "source": "    //this will throw an error with the message of method not found.",
          "coverage": ""
        },
        "603": {
          "source": "    c.callSuper()",
          "coverage": ""
        },
        "604": {
          "source": "    *",
          "coverage": ""
        },
        "605": {
          "source": "    * What callSuper makes up for in terseness it loses it in",
          "coverage": ""
        },
        "606": {
          "source": "    * efficiency.",
          "coverage": ""
        },
        "607": {
          "source": "    * ",
          "coverage": ""
        },
        "608": {
          "source": "    this.count += 2;",
          "coverage": ""
        },
        "609": {
          "source": "    C.$superclass.increaseCount",
          "coverage": ""
        },
        "610": {
          "source": "",
          "coverage": ""
        },
        "611": {
          "source": "    *",
          "coverage": ""
        },
        "612": {
          "source": "    * is much faster and more efficient that :",
          "coverage": ""
        },
        "613": {
          "source": "    * ",
          "coverage": ""
        },
        "614": {
          "source": "    this.count += 2;",
          "coverage": ""
        },
        "615": {
          "source": "    this.callSuper();",
          "coverage": ""
        },
        "616": {
          "source": "",
          "coverage": ""
        },
        "617": {
          "source": "",
          "coverage": ""
        },
        "618": {
          "source": " */",
          "coverage": ""
        },
        "619": {
          "source": "",
          "coverage": ""
        },
        "620": {
          "source": "",
          "coverage": ""
        },
        "621": {
          "source": "/**",
          "coverage": ""
        },
        "622": {
          "source": " * @property {Function} getStaticValue this method",
          "coverage": ""
        },
        "623": {
          "source": " * will be added to instances that use the {@link Luc.define#$statics $statics}",
          "coverage": ""
        },
        "624": {
          "source": " * config.",
          "coverage": ""
        },
        "625": {
          "source": " *",
          "coverage": ""
        },
        "626": {
          "source": " * ",
          "coverage": ""
        },
        "627": {
          "source": " * This should be used over this.$class.staticName to",
          "coverage": ""
        },
        "628": {
          "source": " * get the value of static.  If the class gets inherited",
          "coverage": ""
        },
        "629": {
          "source": " * from, this.$class will not be the same.  getStatic value",
          "coverage": ""
        },
        "630": {
          "source": " * deals with this issue.",
          "coverage": ""
        },
        "631": {
          "source": " * ",
          "coverage": ""
        },
        "632": {
          "source": "    var A = Luc.define({",
          "coverage": ""
        },
        "633": {
          "source": "        $statics: {",
          "coverage": ""
        },
        "634": {
          "source": "            a: 1",
          "coverage": ""
        },
        "635": {
          "source": "            },",
          "coverage": ""
        },
        "636": {
          "source": "        getABetter: function() {",
          "coverage": ""
        },
        "637": {
          "source": "            return this.getStaticValue('a');",
          "coverage": ""
        },
        "638": {
          "source": "        },",
          "coverage": ""
        },
        "639": {
          "source": "        getA: function() {",
          "coverage": ""
        },
        "640": {
          "source": "            return this.$class.a;",
          "coverage": ""
        },
        "641": {
          "source": "        }",
          "coverage": ""
        },
        "642": {
          "source": "    });",
          "coverage": ""
        },
        "643": {
          "source": "",
          "coverage": ""
        },
        "644": {
          "source": "    var B = Luc.define({",
          "coverage": ""
        },
        "645": {
          "source": "        $super: A,",
          "coverage": ""
        },
        "646": {
          "source": "        $statics: {",
          "coverage": ""
        },
        "647": {
          "source": "            b: 2,",
          "coverage": ""
        },
        "648": {
          "source": "            c: 3",
          "coverage": ""
        },
        "649": {
          "source": "        }",
          "coverage": ""
        },
        "650": {
          "source": "    });",
          "coverage": ""
        },
        "651": {
          "source": "",
          "coverage": ""
        },
        "652": {
          "source": "    ",
          "coverage": ""
        },
        "653": {
          "source": "    var b = new B();",
          "coverage": ""
        },
        "654": {
          "source": "    b.getA();",
          "coverage": ""
        },
        "655": {
          "source": "    &gt;undefined",
          "coverage": ""
        },
        "656": {
          "source": "    b.getABetter();",
          "coverage": ""
        },
        "657": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "658": {
          "source": "",
          "coverage": ""
        },
        "659": {
          "source": " * @return {Object} the static value of the key",
          "coverage": ""
        },
        "660": {
          "source": " */",
          "coverage": ""
        },
        "661": {
          "source": "",
          "coverage": ""
        },
        "662": {
          "source": "    ",
          "coverage": ""
        },
        "663": {
          "source": "/**",
          "coverage": ""
        },
        "664": {
          "source": " * @property {Function} getComposition this method will be added",
          "coverage": ""
        },
        "665": {
          "source": " * to instances that use the {@link Luc.define#$compositions $compositions}  config",
          "coverage": ""
        },
        "666": {
          "source": " *",
          "coverage": ""
        },
        "667": {
          "source": " *  This will return the composition instance based off the composition {@link Luc.Composition#name name}",
          "coverage": ""
        },
        "668": {
          "source": "    ",
          "coverage": ""
        },
        "669": {
          "source": "    this.getComposition(\"name\");",
          "coverage": ""
        },
        "670": {
          "source": "    ",
          "coverage": ""
        },
        "671": {
          "source": " *",
          "coverage": ""
        },
        "672": {
          "source": " */",
          "coverage": ""
        },
        "673": {
          "source": "",
          "coverage": ""
        },
        "674": {
          "source": "",
          "coverage": ""
        },
        "675": {
          "source": "/**",
          "coverage": ""
        },
        "676": {
          "source": " * @cfg {Object} $statics (optional) Add static properties or methods",
          "coverage": ""
        },
        "677": {
          "source": " * to the class.  These properties/methods will not be able to be",
          "coverage": ""
        },
        "678": {
          "source": " * directly modified by the instance so they are good for defining default",
          "coverage": ""
        },
        "679": {
          "source": " * configs.  Using this config adds the {@link Luc.define#getStaticValue getStaticValue}",
          "coverage": ""
        },
        "680": {
          "source": " * method to instances.",
          "coverage": ""
        },
        "681": {
          "source": " *",
          "coverage": ""
        },
        "682": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "683": {
          "source": "        $statics: {",
          "coverage": ""
        },
        "684": {
          "source": "            number: 1",
          "coverage": ""
        },
        "685": {
          "source": "        }",
          "coverage": ""
        },
        "686": {
          "source": "    });",
          "coverage": ""
        },
        "687": {
          "source": "",
          "coverage": ""
        },
        "688": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "689": {
          "source": "    c.number",
          "coverage": ""
        },
        "690": {
          "source": "    &gt;undefined",
          "coverage": ""
        },
        "691": {
          "source": "    C.number",
          "coverage": ""
        },
        "692": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "693": {
          "source": "    ",
          "coverage": ""
        },
        "694": {
          "source": " *",
          "coverage": ""
        },
        "695": {
          "source": " * Bad things can happen if non primitives are placed on the ",
          "coverage": ""
        },
        "696": {
          "source": " * prototype and instance sharing is not wanted.  Using statics",
          "coverage": ""
        },
        "697": {
          "source": " * prevent subclasses and instances from unknowingly modifying",
          "coverage": ""
        },
        "698": {
          "source": " * all instances.",
          "coverage": ""
        },
        "699": {
          "source": " * ",
          "coverage": ""
        },
        "700": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "701": {
          "source": "        cfg: {",
          "coverage": ""
        },
        "702": {
          "source": "            a: 1",
          "coverage": ""
        },
        "703": {
          "source": "        }",
          "coverage": ""
        },
        "704": {
          "source": "    });",
          "coverage": ""
        },
        "705": {
          "source": "",
          "coverage": ""
        },
        "706": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "707": {
          "source": "    c.cfg.a",
          "coverage": ""
        },
        "708": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "709": {
          "source": "    c.cfg.a = 5",
          "coverage": ""
        },
        "710": {
          "source": "    new C().cfg.a",
          "coverage": ""
        },
        "711": {
          "source": "    &gt;5",
          "coverage": ""
        },
        "712": {
          "source": " *",
          "coverage": ""
        },
        "713": {
          "source": " */",
          "coverage": ""
        },
        "714": {
          "source": "",
          "coverage": ""
        },
        "715": {
          "source": "/**",
          "coverage": ""
        },
        "716": {
          "source": " * @cfg {Object/Constructor/Object[]/Constructor[]} $mixins (optional)  Mixins are a way to add functionality",
          "coverage": ""
        },
        "717": {
          "source": " * to a class that should not add state to the instance unknowingly.  Mixins can be either objects or Constructors.",
          "coverage": ""
        },
        "718": {
          "source": " *",
          "coverage": ""
        },
        "719": {
          "source": "    function Logger() {}",
          "coverage": ""
        },
        "720": {
          "source": "    Logger.prototype.log = function() {",
          "coverage": ""
        },
        "721": {
          "source": "        console.log(arguments)",
          "coverage": ""
        },
        "722": {
          "source": "    }",
          "coverage": ""
        },
        "723": {
          "source": "",
          "coverage": ""
        },
        "724": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "725": {
          "source": "        $mixins: [Logger, {",
          "coverage": ""
        },
        "726": {
          "source": "            warn: function() {",
          "coverage": ""
        },
        "727": {
          "source": "                console.warn(arguments)",
          "coverage": ""
        },
        "728": {
          "source": "            }",
          "coverage": ""
        },
        "729": {
          "source": "        }]",
          "coverage": ""
        },
        "730": {
          "source": "    });",
          "coverage": ""
        },
        "731": {
          "source": "",
          "coverage": ""
        },
        "732": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "733": {
          "source": "",
          "coverage": ""
        },
        "734": {
          "source": "    c.log(1,2)",
          "coverage": ""
        },
        "735": {
          "source": "    &gt;[1,2]",
          "coverage": ""
        },
        "736": {
          "source": "",
          "coverage": ""
        },
        "737": {
          "source": "    c.warn(3,4)",
          "coverage": ""
        },
        "738": {
          "source": "    &gt;[3,4]",
          "coverage": ""
        },
        "739": {
          "source": " *",
          "coverage": ""
        },
        "740": {
          "source": " */",
          "coverage": ""
        },
        "741": {
          "source": "/**",
          "coverage": ""
        },
        "742": {
          "source": " * @cfg {Constructor} $super (optional)  super for the defining class.  By Luc.Base",
          "coverage": ""
        },
        "743": {
          "source": " * is the default if super is not passed in.  To define a class without a superclass",
          "coverage": ""
        },
        "744": {
          "source": " * you can pass in false or null.",
          "coverage": ""
        },
        "745": {
          "source": " *",
          "coverage": ""
        },
        "746": {
          "source": "     function Counter() {",
          "coverage": ""
        },
        "747": {
          "source": "        this.count = 0;",
          "coverage": ""
        },
        "748": {
          "source": "     };",
          "coverage": ""
        },
        "749": {
          "source": "",
          "coverage": ""
        },
        "750": {
          "source": "     Counter.prototype = {",
          "coverage": ""
        },
        "751": {
          "source": "        getCount: function() {",
          "coverage": ""
        },
        "752": {
          "source": "            return this.count;",
          "coverage": ""
        },
        "753": {
          "source": "        },",
          "coverage": ""
        },
        "754": {
          "source": "        increaseCount: function() {",
          "coverage": ""
        },
        "755": {
          "source": "            this.count++;",
          "coverage": ""
        },
        "756": {
          "source": "        }",
          "coverage": ""
        },
        "757": {
          "source": "     }",
          "coverage": ""
        },
        "758": {
          "source": "",
          "coverage": ""
        },
        "759": {
          "source": "     var C = Luc.define({",
          "coverage": ""
        },
        "760": {
          "source": "        $super:Counter",
          "coverage": ""
        },
        "761": {
          "source": "    });",
          "coverage": ""
        },
        "762": {
          "source": "",
          "coverage": ""
        },
        "763": {
          "source": "    var c = new C()",
          "coverage": ""
        },
        "764": {
          "source": "",
          "coverage": ""
        },
        "765": {
          "source": "    c instanceof Counter",
          "coverage": ""
        },
        "766": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "767": {
          "source": "    c.increaseCount();",
          "coverage": ""
        },
        "768": {
          "source": "    c.getCount();",
          "coverage": ""
        },
        "769": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "770": {
          "source": "    c.count",
          "coverage": ""
        },
        "771": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "772": {
          "source": "",
          "coverage": ""
        },
        "773": {
          "source": " * A reference to the superclass's methods can be obtained through",
          "coverage": ""
        },
        "774": {
          "source": " * the defined class's property $superclass.  Similar functionality ",
          "coverage": ""
        },
        "775": {
          "source": " * can be done with {@link Luc.define#callSuper callSuper} but callSuper",
          "coverage": ""
        },
        "776": {
          "source": " * is much less efficient.",
          "coverage": ""
        },
        "777": {
          "source": " *",
          "coverage": ""
        },
        "778": {
          "source": "     var C = Luc.define({",
          "coverage": ""
        },
        "779": {
          "source": "        $super:Counter,",
          "coverage": ""
        },
        "780": {
          "source": "        increaseCount: function () {",
          "coverage": ""
        },
        "781": {
          "source": "            this.count += 2;",
          "coverage": ""
        },
        "782": {
          "source": "            C.$superclass.increaseCount.call(this);",
          "coverage": ""
        },
        "783": {
          "source": "        }",
          "coverage": ""
        },
        "784": {
          "source": "    });",
          "coverage": ""
        },
        "785": {
          "source": "",
          "coverage": ""
        },
        "786": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "787": {
          "source": "    c.increaseCount();",
          "coverage": ""
        },
        "788": {
          "source": "    c.count",
          "coverage": ""
        },
        "789": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "790": {
          "source": " *",
          "coverage": ""
        },
        "791": {
          "source": " * Check out Luc.Base to see why we have it as the default.",
          "coverage": ""
        },
        "792": {
          "source": " * ",
          "coverage": ""
        },
        "793": {
          "source": "    var B = Luc.define({",
          "coverage": ""
        },
        "794": {
          "source": "        amIALucBase: function() {",
          "coverage": ""
        },
        "795": {
          "source": "            return this instanceof Luc.Base",
          "coverage": ""
        },
        "796": {
          "source": "        }",
          "coverage": ""
        },
        "797": {
          "source": "    })",
          "coverage": ""
        },
        "798": {
          "source": "    var b = new B();",
          "coverage": ""
        },
        "799": {
          "source": "    b.amIALucBase();",
          "coverage": ""
        },
        "800": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "801": {
          "source": " *",
          "coverage": ""
        },
        "802": {
          "source": " * ",
          "coverage": ""
        },
        "803": {
          "source": " */",
          "coverage": ""
        },
        "804": {
          "source": "",
          "coverage": ""
        },
        "805": {
          "source": "",
          "coverage": ""
        },
        "806": {
          "source": "",
          "coverage": ""
        },
        "807": {
          "source": "/**",
          "coverage": ""
        },
        "808": {
          "source": " * @cfg {Object/Object[]} $compositions (optional) config objects for ",
          "coverage": ""
        },
        "809": {
          "source": " * Luc.Composition.  Compositions are a great way to add behavior to a class",
          "coverage": ""
        },
        "810": {
          "source": " * without extending it.  A {@link Luc.define#$mixins mixin} can offer similar functionality but should",
          "coverage": ""
        },
        "811": {
          "source": " * not be adding an unneeded state.  A Constructor and a name are needed for the config object.",
          "coverage": ""
        },
        "812": {
          "source": " *  Using this config adds the {@link Luc.define#getComposition getComposition}",
          "coverage": ""
        },
        "813": {
          "source": " * method to instances.",
          "coverage": ""
        },
        "814": {
          "source": " * &lt;br&gt;",
          "coverage": ""
        },
        "815": {
          "source": " * The methods property is optional here but it is saying take all of ",
          "coverage": ""
        },
        "816": {
          "source": " * Luc.EventEmitter's instance methods and make them instance methods for C.",
          "coverage": ""
        },
        "817": {
          "source": " * You can check out all of the config options by looking at Luc.Composition.",
          "coverage": ""
        },
        "818": {
          "source": " * ",
          "coverage": ""
        },
        "819": {
          "source": "        var C = Luc.define({",
          "coverage": ""
        },
        "820": {
          "source": "            $compositions: {",
          "coverage": ""
        },
        "821": {
          "source": "                Constructor: Luc.EventEmitter,",
          "coverage": ""
        },
        "822": {
          "source": "                name: 'emitter',",
          "coverage": ""
        },
        "823": {
          "source": "                methods: 'allMethods'",
          "coverage": ""
        },
        "824": {
          "source": "            }",
          "coverage": ""
        },
        "825": {
          "source": "        });",
          "coverage": ""
        },
        "826": {
          "source": "",
          "coverage": ""
        },
        "827": {
          "source": "        var c = new C();",
          "coverage": ""
        },
        "828": {
          "source": "",
          "coverage": ""
        },
        "829": {
          "source": "        c.on('hey', function() {",
          "coverage": ""
        },
        "830": {
          "source": "            console.log(arguments);",
          "coverage": ""
        },
        "831": {
          "source": "        });",
          "coverage": ""
        },
        "832": {
          "source": "",
          "coverage": ""
        },
        "833": {
          "source": "        c.emit('hey', 1,2,3, 'a');",
          "coverage": ""
        },
        "834": {
          "source": "        &gt;[1, 2, 3, \"a\"]",
          "coverage": ""
        },
        "835": {
          "source": "        c instanceof Luc.EventEmitter",
          "coverage": ""
        },
        "836": {
          "source": "        &gt;false",
          "coverage": ""
        },
        "837": {
          "source": "        c._events",
          "coverage": ""
        },
        "838": {
          "source": "        &gt;undefined",
          "coverage": ""
        },
        "839": {
          "source": " *",
          "coverage": ""
        },
        "840": {
          "source": " * Luc.EventEmitter is preferred as a composition over a mixin because",
          "coverage": ""
        },
        "841": {
          "source": " * it adds a state \"_events\" to the this instance when on is called.  It",
          "coverage": ""
        },
        "842": {
          "source": " * also shouldn't have to know that it may be instantiated alone or mixed into classes",
          "coverage": ""
        },
        "843": {
          "source": " * so the initing of state is not done in the constructor like it probably should.",
          "coverage": ""
        },
        "844": {
          "source": " * It is not terrible practice by any means but it is not good to have a standalone class",
          "coverage": ""
        },
        "845": {
          "source": " * that knows that it may be mixing.  Even worse than that would be a mixin that needs",
          "coverage": ""
        },
        "846": {
          "source": " * to be inited by the defining class.  Encapsulating logic in a class",
          "coverage": ""
        },
        "847": {
          "source": " * and using it anywhere seamlessly is where compositions shine. Luc comes with two common ",
          "coverage": ""
        },
        "848": {
          "source": " * {@link Luc#compositionEnums enums} that we expect will be used often.",
          "coverage": ""
        },
        "849": {
          "source": " * ",
          "coverage": ""
        },
        "850": {
          "source": " * &lt;br&gt;",
          "coverage": ""
        },
        "851": {
          "source": " * Here is an example of a simple composition see how the functionality ",
          "coverage": ""
        },
        "852": {
          "source": " * is added but we are not inheriting and this.count is",
          "coverage": ""
        },
        "853": {
          "source": " * undefined.",
          "coverage": ""
        },
        "854": {
          "source": " *",
          "coverage": ""
        },
        "855": {
          "source": "         function Counter() {",
          "coverage": ""
        },
        "856": {
          "source": "            this.count = 0;",
          "coverage": ""
        },
        "857": {
          "source": "         };",
          "coverage": ""
        },
        "858": {
          "source": "",
          "coverage": ""
        },
        "859": {
          "source": "         Counter.prototype = {",
          "coverage": ""
        },
        "860": {
          "source": "            getCount: function() {",
          "coverage": ""
        },
        "861": {
          "source": "                return this.count;",
          "coverage": ""
        },
        "862": {
          "source": "            },",
          "coverage": ""
        },
        "863": {
          "source": "            increaseCount: function() {",
          "coverage": ""
        },
        "864": {
          "source": "                this.count++;",
          "coverage": ""
        },
        "865": {
          "source": "            }",
          "coverage": ""
        },
        "866": {
          "source": "         }",
          "coverage": ""
        },
        "867": {
          "source": "",
          "coverage": ""
        },
        "868": {
          "source": "         var C = Luc.define({",
          "coverage": ""
        },
        "869": {
          "source": "                $compositions: {",
          "coverage": ""
        },
        "870": {
          "source": "                    name: 'counter',",
          "coverage": ""
        },
        "871": {
          "source": "                    Constructor: Counter,",
          "coverage": ""
        },
        "872": {
          "source": "                    methods: 'allMethods'",
          "coverage": ""
        },
        "873": {
          "source": "                }",
          "coverage": ""
        },
        "874": {
          "source": "        });",
          "coverage": ""
        },
        "875": {
          "source": "",
          "coverage": ""
        },
        "876": {
          "source": "        var c = new C()",
          "coverage": ""
        },
        "877": {
          "source": "",
          "coverage": ""
        },
        "878": {
          "source": "        c.increaseCount();",
          "coverage": ""
        },
        "879": {
          "source": "        c.increaseCount();",
          "coverage": ""
        },
        "880": {
          "source": "        c.increaseCount();",
          "coverage": ""
        },
        "881": {
          "source": "        c.getCount();",
          "coverage": ""
        },
        "882": {
          "source": "        &gt;3",
          "coverage": ""
        },
        "883": {
          "source": "        c.count",
          "coverage": ""
        },
        "884": {
          "source": "        &gt;undefined",
          "coverage": ""
        },
        "885": {
          "source": " *",
          "coverage": ""
        },
        "886": {
          "source": " * Luc comes with two default composition objects Luc.compositionEnums.PluginManager",
          "coverage": ""
        },
        "887": {
          "source": " * and Luc.compositionEnums.EventEmitter.",
          "coverage": ""
        },
        "888": {
          "source": " * ",
          "coverage": ""
        },
        "889": {
          "source": " * Here is the plugin manager enum, keep in mind that this",
          "coverage": ""
        },
        "890": {
          "source": " * functionality can be added to any class, not just ones defined with ",
          "coverage": ""
        },
        "891": {
          "source": " * Luc.define.  Check out Luc.PluginManager to see all of the public ",
          "coverage": ""
        },
        "892": {
          "source": " * methods that gets added to the defined instance.",
          "coverage": ""
        },
        "893": {
          "source": " ",
          "coverage": ""
        },
        "894": {
          "source": " * A plugin follows the following life-cycle: &lt;br&gt;",
          "coverage": ""
        },
        "895": {
          "source": "    ",
          "coverage": ""
        },
        "896": {
          "source": " *plugin is added to the instance -&gt; plugin is created -&gt; plugin init is called with instance -&gt; if needed destroy called by instance -&gt; destroy called on plugin &lt;br&gt;",
          "coverage": ""
        },
        "897": {
          "source": " *Here is the most basic example using the {@link Luc.Plugin default} plugin.",
          "coverage": ""
        },
        "898": {
          "source": "   ",
          "coverage": ""
        },
        "899": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "900": {
          "source": "        $compositions: Luc.compositionEnums.PluginManager",
          "coverage": ""
        },
        "901": {
          "source": "    });",
          "coverage": ""
        },
        "902": {
          "source": "",
          "coverage": ""
        },
        "903": {
          "source": "    var c = new C({",
          "coverage": ""
        },
        "904": {
          "source": "        plugins: [{",
          "coverage": ""
        },
        "905": {
          "source": "                init: function() {",
          "coverage": ""
        },
        "906": {
          "source": "                    console.log('im getting initted')",
          "coverage": ""
        },
        "907": {
          "source": "                },",
          "coverage": ""
        },
        "908": {
          "source": "                myCoolName: 'cool'",
          "coverage": ""
        },
        "909": {
          "source": "            }",
          "coverage": ""
        },
        "910": {
          "source": "        ]",
          "coverage": ""
        },
        "911": {
          "source": "    });",
          "coverage": ""
        },
        "912": {
          "source": "",
          "coverage": ""
        },
        "913": {
          "source": "    &gt;im getting initted",
          "coverage": ""
        },
        "914": {
          "source": "",
          "coverage": ""
        },
        "915": {
          "source": "    c.getPlugin({myCoolName: 'coo'}) instanceof Luc.Plugin",
          "coverage": ""
        },
        "916": {
          "source": "    &gt; true",
          "coverage": ""
        },
        "917": {
          "source": "",
          "coverage": ""
        },
        "918": {
          "source": "*  Plugins can be of any class and can be added with {@link Luc.PluginManager#addPlugin addPlugin}",
          "coverage": ""
        },
        "919": {
          "source": "",
          "coverage": ""
        },
        "920": {
          "source": "    function MyPlugin(){}",
          "coverage": ""
        },
        "921": {
          "source": "",
          "coverage": ""
        },
        "922": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "923": {
          "source": "        $compositions: Luc.compositionEnums.PluginManager",
          "coverage": ""
        },
        "924": {
          "source": "    });",
          "coverage": ""
        },
        "925": {
          "source": "",
          "coverage": ""
        },
        "926": {
          "source": "    var c = new C();",
          "coverage": ""
        },
        "927": {
          "source": "",
          "coverage": ""
        },
        "928": {
          "source": "    c.addPlugin({Constructor: MyPlugin});",
          "coverage": ""
        },
        "929": {
          "source": "    //getPlugin takes a Constructor or match object",
          "coverage": ""
        },
        "930": {
          "source": "    c.getPlugin(MyPlugin) instanceof MyPlugin",
          "coverage": ""
        },
        "931": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "932": {
          "source": "    c.getPlugin(Luc.Plugin)",
          "coverage": ""
        },
        "933": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "934": {
          "source": "",
          "coverage": ""
        },
        "935": {
          "source": "* Plugins can also be destroyed individually or all of them at once",
          "coverage": ""
        },
        "936": {
          "source": "    ",
          "coverage": ""
        },
        "937": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "938": {
          "source": "        $compositions: Luc.compositionEnums.PluginManager",
          "coverage": ""
        },
        "939": {
          "source": "    });",
          "coverage": ""
        },
        "940": {
          "source": "",
          "coverage": ""
        },
        "941": {
          "source": "    var c = new C({",
          "coverage": ""
        },
        "942": {
          "source": "        plugins: [{",
          "coverage": ""
        },
        "943": {
          "source": "            init: function() {",
          "coverage": ""
        },
        "944": {
          "source": "                console.log('im getting initted ' + this.name)",
          "coverage": ""
        },
        "945": {
          "source": "            },",
          "coverage": ""
        },
        "946": {
          "source": "            destroy: function() {",
          "coverage": ""
        },
        "947": {
          "source": "                console.log('destroyed : ' + this.name)",
          "coverage": ""
        },
        "948": {
          "source": "            },",
          "coverage": ""
        },
        "949": {
          "source": "            name: '1'",
          "coverage": ""
        },
        "950": {
          "source": "        },{",
          "coverage": ""
        },
        "951": {
          "source": "            init: function() {",
          "coverage": ""
        },
        "952": {
          "source": "                console.log('im getting initted ' + this.name)",
          "coverage": ""
        },
        "953": {
          "source": "            },",
          "coverage": ""
        },
        "954": {
          "source": "            destroy: function() {",
          "coverage": ""
        },
        "955": {
          "source": "                console.log('destroyed : ' + this.name)",
          "coverage": ""
        },
        "956": {
          "source": "            },",
          "coverage": ""
        },
        "957": {
          "source": "            name: '2'",
          "coverage": ""
        },
        "958": {
          "source": "        }]",
          "coverage": ""
        },
        "959": {
          "source": "    });",
          "coverage": ""
        },
        "960": {
          "source": "",
          "coverage": ""
        },
        "961": {
          "source": "    &gt;im getting initted 1",
          "coverage": ""
        },
        "962": {
          "source": "    &gt;im getting initted 2",
          "coverage": ""
        },
        "963": {
          "source": "    ",
          "coverage": ""
        },
        "964": {
          "source": "",
          "coverage": ""
        },
        "965": {
          "source": "    c.destroyPlugin({name: '1'});",
          "coverage": ""
        },
        "966": {
          "source": "    &gt;destroyed : 1",
          "coverage": ""
        },
        "967": {
          "source": "    //a plugin is returned if it is found and destroyed",
          "coverage": ""
        },
        "968": {
          "source": "    &gt;Plugin {init: function, destroy: function, name: \"1\", owner: Object, init: function&#226;&#128;&#166;}",
          "coverage": ""
        },
        "969": {
          "source": "",
          "coverage": ""
        },
        "970": {
          "source": "    c.destroyPlugin({name: '1'});",
          "coverage": ""
        },
        "971": {
          "source": "    //false is returned if it is not found",
          "coverage": ""
        },
        "972": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "973": {
          "source": "",
          "coverage": ""
        },
        "974": {
          "source": "    c.destroyAllPlugins();",
          "coverage": ""
        },
        "975": {
          "source": "    &gt;destroyed : 2",
          "coverage": ""
        },
        "976": {
          "source": " *",
          "coverage": ""
        },
        "977": {
          "source": " * You can see that it can add plugin like behavior to any defining",
          "coverage": ""
        },
        "978": {
          "source": " * class with Luc.PluginManager which is less than 75 SLOC.",
          "coverage": ""
        },
        "979": {
          "source": " */",
          "coverage": ""
        }
      }
    },
    {
      "filename": "class/plugin.js",
      "coverage": 100,
      "hits": 5,
      "misses": 0,
      "sloc": 5,
      "source": {
        "1": {
          "source": "var aEach = require('../array').each,",
          "coverage": 1
        },
        "2": {
          "source": "    obj = require('../object'),",
          "coverage": ""
        },
        "3": {
          "source": "    emptyFn = require('../function').emptyFn,",
          "coverage": ""
        },
        "4": {
          "source": "    apply = obj.apply;",
          "coverage": ""
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "/**",
          "coverage": ""
        },
        "7": {
          "source": " * @class Luc.Plugin",
          "coverage": ""
        },
        "8": {
          "source": " * Simple class that is the default plugin type for Luc.PluginManager",
          "coverage": ""
        },
        "9": {
          "source": " */",
          "coverage": ""
        },
        "10": {
          "source": "function Plugin(config) {",
          "coverage": 1
        },
        "11": {
          "source": "    apply(this, config);",
          "coverage": 5
        },
        "12": {
          "source": "}",
          "coverage": ""
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "Plugin.prototype = {",
          "coverage": 1
        },
        "15": {
          "source": "    /**",
          "coverage": ""
        },
        "16": {
          "source": "     * @method",
          "coverage": ""
        },
        "17": {
          "source": "     * @param {Object} owner the owner instance",
          "coverage": ""
        },
        "18": {
          "source": "     * Simple hook to initialize the plugin",
          "coverage": ""
        },
        "19": {
          "source": "     * Defaults to Luc.emptyFn.",
          "coverage": ""
        },
        "20": {
          "source": "     */",
          "coverage": ""
        },
        "21": {
          "source": "    init: emptyFn,",
          "coverage": ""
        },
        "22": {
          "source": "    /**",
          "coverage": ""
        },
        "23": {
          "source": "     * @method ",
          "coverage": ""
        },
        "24": {
          "source": "     * Defaults to Luc.emptyFn.",
          "coverage": ""
        },
        "25": {
          "source": "     * Called when the plugin is being {@link Luc.PluginManager#destroyPlugin destroyed}.",
          "coverage": ""
        },
        "26": {
          "source": "     */",
          "coverage": ""
        },
        "27": {
          "source": "    destroy: emptyFn",
          "coverage": ""
        },
        "28": {
          "source": "};",
          "coverage": ""
        },
        "29": {
          "source": "",
          "coverage": ""
        },
        "30": {
          "source": "module.exports = Plugin;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "class/pluginManager.js",
      "coverage": 100,
      "hits": 35,
      "misses": 0,
      "sloc": 35,
      "source": {
        "1": {
          "source": "var Plugin = require('./plugin'),",
          "coverage": 1
        },
        "2": {
          "source": "    is = require('../is'),",
          "coverage": ""
        },
        "3": {
          "source": "    obj = require('../object'),",
          "coverage": ""
        },
        "4": {
          "source": "    arr = require('../array'),",
          "coverage": ""
        },
        "5": {
          "source": "    aEach = arr.each,",
          "coverage": ""
        },
        "6": {
          "source": "    mix = obj.mix,",
          "coverage": ""
        },
        "7": {
          "source": "    apply = obj.apply;",
          "coverage": ""
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function PluginManager(config) {",
          "coverage": 1
        },
        "10": {
          "source": "    this._init(config);",
          "coverage": 3
        },
        "11": {
          "source": "}",
          "coverage": ""
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "/**",
          "coverage": ""
        },
        "14": {
          "source": " * @protected",
          "coverage": ""
        },
        "15": {
          "source": " * @class Luc.PluginManager",
          "coverage": ""
        },
        "16": {
          "source": " * This class is used by Luc.compositionEnums#PluginManager to add its functionality ",
          "coverage": ""
        },
        "17": {
          "source": " * to any class.   By {@link Luc.compositionEnums#PluginManager default} it adds",
          "coverage": ""
        },
        "18": {
          "source": " * all of these public methods to the instance.This class is designed to work as a composition, ",
          "coverage": ""
        },
        "19": {
          "source": " * it is exposed as not private so it can be extended if needed.   Check \"protected\" which",
          "coverage": ""
        },
        "20": {
          "source": " * is a part of the Show v dropdown on the right to see the protected methods.",
          "coverage": ""
        },
        "21": {
          "source": " *",
          "coverage": ""
        },
        "22": {
          "source": "    function MyPlugin() {",
          "coverage": ""
        },
        "23": {
          "source": "        this.myCoolName = 'coo';",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "        this.init = function() {",
          "coverage": ""
        },
        "26": {
          "source": "            console.log('im getting initted');",
          "coverage": ""
        },
        "27": {
          "source": "        }",
          "coverage": ""
        },
        "28": {
          "source": "        this.destroy = function() {",
          "coverage": ""
        },
        "29": {
          "source": "            console.log('MyPlugin instance being destroyed')",
          "coverage": ""
        },
        "30": {
          "source": "        }",
          "coverage": ""
        },
        "31": {
          "source": "    }",
          "coverage": ""
        },
        "32": {
          "source": "",
          "coverage": ""
        },
        "33": {
          "source": "    var C = Luc.define({",
          "coverage": ""
        },
        "34": {
          "source": "        $compositions: Luc.compositionEnums.PluginManager",
          "coverage": ""
        },
        "35": {
          "source": "    });",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "    var c = new C({",
          "coverage": ""
        },
        "38": {
          "source": "        plugins: [{",
          "coverage": ""
        },
        "39": {
          "source": "                Constructor: MyPlugin,",
          "coverage": ""
        },
        "40": {
          "source": "                myCoolName: 'coo'",
          "coverage": ""
        },
        "41": {
          "source": "            }",
          "coverage": ""
        },
        "42": {
          "source": "        ]",
          "coverage": ""
        },
        "43": {
          "source": "    });",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "    &gt;im getting initted",
          "coverage": ""
        },
        "46": {
          "source": "",
          "coverage": ""
        },
        "47": {
          "source": "    var plugInstance = c.addPlugin({",
          "coverage": ""
        },
        "48": {
          "source": "        destroy: function() {",
          "coverage": ""
        },
        "49": {
          "source": "            console.log('Im getting destroyed')",
          "coverage": ""
        },
        "50": {
          "source": "        }",
          "coverage": ""
        },
        "51": {
          "source": "    });",
          "coverage": ""
        },
        "52": {
          "source": "",
          "coverage": ""
        },
        "53": {
          "source": "    c.getPlugin(Luc.Plugin)",
          "coverage": ""
        },
        "54": {
          "source": "    &gt; Plugin {destroy: function, owner: MyClass, init: function, destroy: function}",
          "coverage": ""
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "    c.getPlugin(MyPlugin)",
          "coverage": ""
        },
        "57": {
          "source": "    &gt; MyPlugin {myCoolName: \"coo\", init: function, destroy: function}",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "    c.destroyAllPlugins()",
          "coverage": ""
        },
        "60": {
          "source": "",
          "coverage": ""
        },
        "61": {
          "source": "    &gt;MyPlugin instance being destroyed",
          "coverage": ""
        },
        "62": {
          "source": "    &gt;Im getting destroyed",
          "coverage": ""
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "    c.getPlugin(MyPlugin)",
          "coverage": ""
        },
        "65": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": " */",
          "coverage": ""
        },
        "68": {
          "source": "PluginManager.prototype = {",
          "coverage": 1
        },
        "69": {
          "source": "   /**",
          "coverage": ""
        },
        "70": {
          "source": "    * @cfg {Constructor} defaultPlugin",
          "coverage": ""
        },
        "71": {
          "source": "    */",
          "coverage": ""
        },
        "72": {
          "source": "    defaultPlugin: Plugin,",
          "coverage": ""
        },
        "73": {
          "source": "",
          "coverage": ""
        },
        "74": {
          "source": "    /**",
          "coverage": ""
        },
        "75": {
          "source": "     * @protected",
          "coverage": ""
        },
        "76": {
          "source": "     */",
          "coverage": ""
        },
        "77": {
          "source": "    _init: function(instanceValues) {",
          "coverage": ""
        },
        "78": {
          "source": "        apply(this, instanceValues);",
          "coverage": 3
        },
        "79": {
          "source": "        this.plugins = [];",
          "coverage": 3
        },
        "80": {
          "source": "        this._createPlugins();",
          "coverage": 3
        },
        "81": {
          "source": "    },",
          "coverage": ""
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "    /**",
          "coverage": ""
        },
        "84": {
          "source": "     * @protected",
          "coverage": ""
        },
        "85": {
          "source": "     */",
          "coverage": ""
        },
        "86": {
          "source": "    _createPlugins: function() {",
          "coverage": ""
        },
        "87": {
          "source": "        aEach(this._getPluginConfigFromInstance(), function(pluginConfig) {",
          "coverage": 3
        },
        "88": {
          "source": "            this.addPlugin(pluginConfig);",
          "coverage": 5
        },
        "89": {
          "source": "        }, this);",
          "coverage": ""
        },
        "90": {
          "source": "    },",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "    /**",
          "coverage": ""
        },
        "93": {
          "source": "     * @protected",
          "coverage": ""
        },
        "94": {
          "source": "     */",
          "coverage": ""
        },
        "95": {
          "source": "    _getPluginConfigFromInstance: function() {",
          "coverage": ""
        },
        "96": {
          "source": "        var config = this.instanceArgs[0] || {};",
          "coverage": 3
        },
        "97": {
          "source": "        return config.plugins;",
          "coverage": 3
        },
        "98": {
          "source": "    },",
          "coverage": ""
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "    /**",
          "coverage": ""
        },
        "101": {
          "source": "     * Add a plugin to the instance and init the ",
          "coverage": ""
        },
        "102": {
          "source": "     * plugin.",
          "coverage": ""
        },
        "103": {
          "source": "     * @param  {Object} pluginConfig",
          "coverage": ""
        },
        "104": {
          "source": "     * @return {Object} the created plugin instance",
          "coverage": ""
        },
        "105": {
          "source": "     */",
          "coverage": ""
        },
        "106": {
          "source": "    addPlugin: function(pluginConfig) {",
          "coverage": ""
        },
        "107": {
          "source": "        var pluginInstance = this._createPlugin(pluginConfig);",
          "coverage": 7
        },
        "108": {
          "source": "",
          "coverage": ""
        },
        "109": {
          "source": "        this._initPlugin(pluginInstance);",
          "coverage": 7
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "        this.plugins.push(pluginInstance);",
          "coverage": 7
        },
        "112": {
          "source": "",
          "coverage": ""
        },
        "113": {
          "source": "        return pluginInstance;",
          "coverage": 7
        },
        "114": {
          "source": "    },",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "    /**",
          "coverage": ""
        },
        "117": {
          "source": "     * @protected",
          "coverage": ""
        },
        "118": {
          "source": "     */",
          "coverage": ""
        },
        "119": {
          "source": "    _createPlugin: function(config) {",
          "coverage": ""
        },
        "120": {
          "source": "        config.owner = this.instance;",
          "coverage": 7
        },
        "121": {
          "source": "",
          "coverage": ""
        },
        "122": {
          "source": "        if (config.Constructor) {",
          "coverage": 7
        },
        "123": {
          "source": "            //call the configed Constructor with the ",
          "coverage": ""
        },
        "124": {
          "source": "            //passed in config but take off the Constructor",
          "coverage": ""
        },
        "125": {
          "source": "            //config.",
          "coverage": ""
        },
        "126": {
          "source": "             ",
          "coverage": ""
        },
        "127": {
          "source": "            //The plugin Constructor ",
          "coverage": ""
        },
        "128": {
          "source": "            //should not need to know about itself",
          "coverage": ""
        },
        "129": {
          "source": "            return new config.Constructor(apply(config, {",
          "coverage": 2
        },
        "130": {
          "source": "                Constructor: undefined",
          "coverage": ""
        },
        "131": {
          "source": "            }));",
          "coverage": ""
        },
        "132": {
          "source": "        }",
          "coverage": ""
        },
        "133": {
          "source": "",
          "coverage": ""
        },
        "134": {
          "source": "        return new this.defaultPlugin(config);",
          "coverage": 5
        },
        "135": {
          "source": "    },",
          "coverage": ""
        },
        "136": {
          "source": "",
          "coverage": ""
        },
        "137": {
          "source": "    /**",
          "coverage": ""
        },
        "138": {
          "source": "     * @protected",
          "coverage": ""
        },
        "139": {
          "source": "     */",
          "coverage": ""
        },
        "140": {
          "source": "    _initPlugin: function(plugin) {",
          "coverage": ""
        },
        "141": {
          "source": "        if (is.isFunction(plugin.init)) {",
          "coverage": 7
        },
        "142": {
          "source": "            plugin.init(this.instance);",
          "coverage": 5
        },
        "143": {
          "source": "        }",
          "coverage": ""
        },
        "144": {
          "source": "    },",
          "coverage": ""
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "    /**",
          "coverage": ""
        },
        "147": {
          "source": "     * Call destroy on all of the plugins",
          "coverage": ""
        },
        "148": {
          "source": "     * and remove them.",
          "coverage": ""
        },
        "149": {
          "source": "     */",
          "coverage": ""
        },
        "150": {
          "source": "    destroyAllPlugins: function() {",
          "coverage": ""
        },
        "151": {
          "source": "        this.plugins.forEach(function(plugin) {",
          "coverage": 1
        },
        "152": {
          "source": "            this._destroyPlugin(plugin);",
          "coverage": 2
        },
        "153": {
          "source": "        }, this);",
          "coverage": ""
        },
        "154": {
          "source": "",
          "coverage": ""
        },
        "155": {
          "source": "        this.plugins = [];",
          "coverage": 1
        },
        "156": {
          "source": "    },",
          "coverage": ""
        },
        "157": {
          "source": "",
          "coverage": ""
        },
        "158": {
          "source": "    _destroyPlugin: function(plugin) {",
          "coverage": ""
        },
        "159": {
          "source": "        if (is.isFunction(plugin.destroy)) {",
          "coverage": 3
        },
        "160": {
          "source": "            plugin.destroy(this.instance);",
          "coverage": 3
        },
        "161": {
          "source": "        }",
          "coverage": ""
        },
        "162": {
          "source": "    },",
          "coverage": ""
        },
        "163": {
          "source": "",
          "coverage": ""
        },
        "164": {
          "source": "    /**",
          "coverage": ""
        },
        "165": {
          "source": "     * Remove the plugin and if found destroy it.",
          "coverage": ""
        },
        "166": {
          "source": "     * @param  {Object/Constructor} object to use to match ",
          "coverage": ""
        },
        "167": {
          "source": "     * the plugin to remove.",
          "coverage": ""
        },
        "168": {
          "source": "     * @return {Object} the destroyed plugin.",
          "coverage": ""
        },
        "169": {
          "source": "     */",
          "coverage": ""
        },
        "170": {
          "source": "    destroyPlugin: function(obj) {",
          "coverage": ""
        },
        "171": {
          "source": "        var plugin = this.getPlugin(obj);",
          "coverage": 1
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "        if(plugin) {",
          "coverage": 1
        },
        "174": {
          "source": "            this._destroyPlugin(plugin);",
          "coverage": 1
        },
        "175": {
          "source": "            arr.removeFirst(this.plugins, plugin, {type: 'strict'});",
          "coverage": 1
        },
        "176": {
          "source": "        }",
          "coverage": ""
        },
        "177": {
          "source": "",
          "coverage": ""
        },
        "178": {
          "source": "        return plugin;",
          "coverage": 1
        },
        "179": {
          "source": "    },",
          "coverage": ""
        },
        "180": {
          "source": "",
          "coverage": ""
        },
        "181": {
          "source": "    /**",
          "coverage": ""
        },
        "182": {
          "source": "     * Get a plugin instance.  A Constructor or an object can be used",
          "coverage": ""
        },
        "183": {
          "source": "     * to find a plugin.",
          "coverage": ""
        },
        "184": {
          "source": "     *",
          "coverage": ""
        },
        "185": {
          "source": "          c.addPlugin({a:1})",
          "coverage": ""
        },
        "186": {
          "source": "          c.getPlugin({a:1})",
          "coverage": ""
        },
        "187": {
          "source": "          &gt;Luc.Plugin({a:1})",
          "coverage": ""
        },
        "188": {
          "source": "",
          "coverage": ""
        },
        "189": {
          "source": "     * @param  {Object} obj ",
          "coverage": ""
        },
        "190": {
          "source": "     * @return {Object} the plugin instance if found.",
          "coverage": ""
        },
        "191": {
          "source": "     */",
          "coverage": ""
        },
        "192": {
          "source": "    getPlugin: function(obj) {",
          "coverage": ""
        },
        "193": {
          "source": "        if (is.isFunction(obj)) {",
          "coverage": 4
        },
        "194": {
          "source": "            return arr.findFirstInstanceOf(this.plugins, obj);",
          "coverage": 2
        },
        "195": {
          "source": "        }",
          "coverage": ""
        },
        "196": {
          "source": "        return arr.findFirst(this.plugins, obj, {type: 'loose'});",
          "coverage": 2
        },
        "197": {
          "source": "    }",
          "coverage": ""
        },
        "198": {
          "source": "};",
          "coverage": ""
        },
        "199": {
          "source": "",
          "coverage": ""
        },
        "200": {
          "source": "module.exports = PluginManager;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "compare.js",
      "coverage": 93.18181818181817,
      "hits": 82,
      "misses": 6,
      "sloc": 88,
      "source": {
        "1": {
          "source": "var is = require('./is');",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "function _strict(val1, val2){",
          "coverage": 1
        },
        "4": {
          "source": "    return val1 === val2;",
          "coverage": 237
        },
        "5": {
          "source": "}",
          "coverage": ""
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "function _compareArrayLength(val1, val2) {",
          "coverage": 1
        },
        "8": {
          "source": "    return(is.isArray(val1) &amp;&amp; is.isArray(val2)  &amp;&amp; val1.length === val2.length);",
          "coverage": 26
        },
        "9": {
          "source": "}",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "function _shallowArray(val1, val2) {",
          "coverage": 1
        },
        "12": {
          "source": "    var i = 0,",
          "coverage": 1
        },
        "13": {
          "source": "        len;",
          "coverage": ""
        },
        "14": {
          "source": "    ",
          "coverage": ""
        },
        "15": {
          "source": "    if(!_compareArrayLength(val1, val2)) {",
          "coverage": 1
        },
        "16": {
          "source": "        return false;",
          "coverage": 0
        },
        "17": {
          "source": "    }",
          "coverage": ""
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "    for(len = val1.length; i &lt; len; ++i) {",
          "coverage": 1
        },
        "20": {
          "source": "        if(val1[i] !== val2[i]) {",
          "coverage": 0
        },
        "21": {
          "source": "            return false;",
          "coverage": 0
        },
        "22": {
          "source": "        }",
          "coverage": ""
        },
        "23": {
          "source": "    }",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "    return true;",
          "coverage": 1
        },
        "26": {
          "source": "}",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "function _deepArray(val1, val2, config) {",
          "coverage": 1
        },
        "29": {
          "source": "    var i = 0,",
          "coverage": 25
        },
        "30": {
          "source": "        len;",
          "coverage": ""
        },
        "31": {
          "source": "    ",
          "coverage": ""
        },
        "32": {
          "source": "    if(!_compareArrayLength(val1, val2)) {",
          "coverage": 25
        },
        "33": {
          "source": "        return false;",
          "coverage": 11
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "    for(len = val1.length; i &lt; len; ++i) {",
          "coverage": 14
        },
        "37": {
          "source": "        if(!compare(val1[i],val2[i], config)) {",
          "coverage": 25
        },
        "38": {
          "source": "            return false;",
          "coverage": 4
        },
        "39": {
          "source": "        }",
          "coverage": ""
        },
        "40": {
          "source": "    }",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "    return true;",
          "coverage": 10
        },
        "43": {
          "source": "}",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "function _compareObjectKeysLength(val1, val2) {",
          "coverage": 1
        },
        "46": {
          "source": "    return (is.isObject(val1) &amp;&amp; is.isObject(val2) &amp;&amp; Object.keys(val1).length === Object.keys(val2).length);",
          "coverage": 27
        },
        "47": {
          "source": "}",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "function _shallowObject(val1, val2) {",
          "coverage": 1
        },
        "50": {
          "source": "    var key, val;",
          "coverage": 2
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "    if (!_compareObjectKeysLength(val1, val2)) {",
          "coverage": 2
        },
        "53": {
          "source": "        return false;",
          "coverage": 0
        },
        "54": {
          "source": "    }",
          "coverage": ""
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "    for (key in val1) {",
          "coverage": 2
        },
        "57": {
          "source": "        if (val1.hasOwnProperty(key)) {",
          "coverage": 3
        },
        "58": {
          "source": "            value = val1[key];",
          "coverage": 3
        },
        "59": {
          "source": "            if (!val2.hasOwnProperty(key) || val2[key] !== value) {",
          "coverage": 3
        },
        "60": {
          "source": "                return false;",
          "coverage": 1
        },
        "61": {
          "source": "            }",
          "coverage": ""
        },
        "62": {
          "source": "        }",
          "coverage": ""
        },
        "63": {
          "source": "    }",
          "coverage": ""
        },
        "64": {
          "source": "",
          "coverage": ""
        },
        "65": {
          "source": "    return true;",
          "coverage": 1
        },
        "66": {
          "source": "}",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "function _deepObject(val1, val2, config) {",
          "coverage": 1
        },
        "69": {
          "source": "    var key, val;",
          "coverage": 25
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "    if (!_compareObjectKeysLength(val1, val2)) {",
          "coverage": 25
        },
        "72": {
          "source": "        return false;",
          "coverage": 9
        },
        "73": {
          "source": "    }",
          "coverage": ""
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "    for (key in val1) {",
          "coverage": 16
        },
        "76": {
          "source": "        if (val1.hasOwnProperty(key)) {",
          "coverage": 18
        },
        "77": {
          "source": "            value = val1[key];",
          "coverage": 18
        },
        "78": {
          "source": "            if (!val2.hasOwnProperty(key) || compare(value, val2[key], config) !== true) {",
          "coverage": 18
        },
        "79": {
          "source": "                return false;",
          "coverage": 4
        },
        "80": {
          "source": "            }",
          "coverage": ""
        },
        "81": {
          "source": "        }",
          "coverage": ""
        },
        "82": {
          "source": "    }",
          "coverage": ""
        },
        "83": {
          "source": "",
          "coverage": ""
        },
        "84": {
          "source": "    return true;",
          "coverage": 12
        },
        "85": {
          "source": "",
          "coverage": ""
        },
        "86": {
          "source": "}",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "function _looseObject(val1, val2, config) {",
          "coverage": 1
        },
        "89": {
          "source": "    var key, val;",
          "coverage": 54
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "    if(!(is.isObject(val1) &amp;&amp; is.isObject(val2))) {",
          "coverage": 54
        },
        "92": {
          "source": "        return false;",
          "coverage": 6
        },
        "93": {
          "source": "    }",
          "coverage": ""
        },
        "94": {
          "source": "",
          "coverage": ""
        },
        "95": {
          "source": "    if(config.type === 'looseRight') {",
          "coverage": 48
        },
        "96": {
          "source": "        for (key in val2) {",
          "coverage": 4
        },
        "97": {
          "source": "            if (val2.hasOwnProperty(key)) {",
          "coverage": 4
        },
        "98": {
          "source": "                value = val2[key];",
          "coverage": 4
        },
        "99": {
          "source": "                if (compare(value, val1[key], config) !== true) {",
          "coverage": 4
        },
        "100": {
          "source": "                    return false;",
          "coverage": 2
        },
        "101": {
          "source": "                }",
          "coverage": ""
        },
        "102": {
          "source": "            }",
          "coverage": ""
        },
        "103": {
          "source": "        }",
          "coverage": ""
        },
        "104": {
          "source": "    }",
          "coverage": ""
        },
        "105": {
          "source": "    else {",
          "coverage": ""
        },
        "106": {
          "source": "        for (key in val1) {",
          "coverage": 44
        },
        "107": {
          "source": "            if (val1.hasOwnProperty(key)) {",
          "coverage": 67
        },
        "108": {
          "source": "                value = val1[key];",
          "coverage": 67
        },
        "109": {
          "source": "                if (compare(value, val2[key], config) !== true) {",
          "coverage": 67
        },
        "110": {
          "source": "                    return false;",
          "coverage": 24
        },
        "111": {
          "source": "                }",
          "coverage": ""
        },
        "112": {
          "source": "            }",
          "coverage": ""
        },
        "113": {
          "source": "        }",
          "coverage": ""
        },
        "114": {
          "source": "    }",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "",
          "coverage": ""
        },
        "117": {
          "source": "    return true;",
          "coverage": 22
        },
        "118": {
          "source": "",
          "coverage": ""
        },
        "119": {
          "source": "}",
          "coverage": ""
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "function _date(val1, val2) {",
          "coverage": 1
        },
        "122": {
          "source": "    if(is.isDate(val1) &amp;&amp; is.isDate(val2)) {",
          "coverage": 21
        },
        "123": {
          "source": "        return val1.getTime() === val2.getTime();",
          "coverage": 16
        },
        "124": {
          "source": "    }",
          "coverage": ""
        },
        "125": {
          "source": "",
          "coverage": ""
        },
        "126": {
          "source": "    return false;",
          "coverage": 5
        },
        "127": {
          "source": "}",
          "coverage": ""
        },
        "128": {
          "source": "",
          "coverage": ""
        },
        "129": {
          "source": "function _createBoundCompare(object, fn) {",
          "coverage": 1
        },
        "130": {
          "source": "    return function(value) {",
          "coverage": 0
        },
        "131": {
          "source": "        return fn(object, value);",
          "coverage": 0
        },
        "132": {
          "source": "    };",
          "coverage": ""
        },
        "133": {
          "source": "}",
          "coverage": ""
        },
        "134": {
          "source": "",
          "coverage": ""
        },
        "135": {
          "source": "function getCompareFn(object, c) {",
          "coverage": 1
        },
        "136": {
          "source": "    var compareFn = _strict,",
          "coverage": 366
        },
        "137": {
          "source": "        config = c || {},",
          "coverage": ""
        },
        "138": {
          "source": "        type = config.type;",
          "coverage": ""
        },
        "139": {
          "source": "",
          "coverage": ""
        },
        "140": {
          "source": "    if (type === 'deep' || type === 'loose' || type === 'looseRight' || type === undefined) {",
          "coverage": 366
        },
        "141": {
          "source": "        if (is.isObject(object)) {",
          "coverage": 326
        },
        "142": {
          "source": "            compareFn = type === 'loose' || type === 'looseRight' ? _looseObject : _deepObject;",
          "coverage": 79
        },
        "143": {
          "source": "        } else if (is.isArray(object)) {",
          "coverage": 247
        },
        "144": {
          "source": "            compareFn = _deepArray;",
          "coverage": 25
        },
        "145": {
          "source": "        } else if (is.isDate(object)) {",
          "coverage": 222
        },
        "146": {
          "source": "            compareFn = _date;",
          "coverage": 18
        },
        "147": {
          "source": "        }",
          "coverage": ""
        },
        "148": {
          "source": "    } else if (type === 'shallow') {",
          "coverage": 40
        },
        "149": {
          "source": "        if (is.isObject(object)) {",
          "coverage": 6
        },
        "150": {
          "source": "            compareFn = _shallowObject;",
          "coverage": 2
        },
        "151": {
          "source": "        } else if (is.isArray(object)) {",
          "coverage": 4
        },
        "152": {
          "source": "            compareFn = _shallowArray;",
          "coverage": 1
        },
        "153": {
          "source": "        } else if (is.isDate(object)) {",
          "coverage": 3
        },
        "154": {
          "source": "            compareFn = _date;",
          "coverage": 3
        },
        "155": {
          "source": "        }",
          "coverage": ""
        },
        "156": {
          "source": "    } else if (type !== 'strict') {",
          "coverage": 34
        },
        "157": {
          "source": "        //we would be doing a strict comparison on a type-o",
          "coverage": ""
        },
        "158": {
          "source": "        //I think an error is good here.",
          "coverage": ""
        },
        "159": {
          "source": "        throw new Error('You passed in an invalid comparison type');",
          "coverage": 1
        },
        "160": {
          "source": "    }",
          "coverage": ""
        },
        "161": {
          "source": "",
          "coverage": ""
        },
        "162": {
          "source": "    return compareFn;",
          "coverage": 365
        },
        "163": {
          "source": "}",
          "coverage": ""
        },
        "164": {
          "source": "",
          "coverage": ""
        },
        "165": {
          "source": "/**",
          "coverage": ""
        },
        "166": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "167": {
          "source": " * @method compare",
          "coverage": ""
        },
        "168": {
          "source": " * ",
          "coverage": ""
        },
        "169": {
          "source": " * Return true if the values are equal to each",
          "coverage": ""
        },
        "170": {
          "source": " * other.  By default a deep comparison is ",
          "coverage": ""
        },
        "171": {
          "source": " * done on arrays, dates and objects and a strict comparison",
          "coverage": ""
        },
        "172": {
          "source": " * is done on other types.",
          "coverage": ""
        },
        "173": {
          "source": " * ",
          "coverage": ""
        },
        "174": {
          "source": " * @param  {Any} val1  ",
          "coverage": ""
        },
        "175": {
          "source": " * @param  {Any} val2   ",
          "coverage": ""
        },
        "176": {
          "source": " * @param  {Object} [config]",
          "coverage": ""
        },
        "177": {
          "source": " * @param {String} config.type pass in 'shallow' for a shallow",
          "coverage": ""
        },
        "178": {
          "source": " * comparison, 'deep' (default) for a deep comparison",
          "coverage": ""
        },
        "179": {
          "source": " * 'strict' for a strict === comparison for all objects or ",
          "coverage": ""
        },
        "180": {
          "source": " * 'loose' for a loose comparison on objects.  A loose comparison",
          "coverage": ""
        },
        "181": {
          "source": " *  will compare the keys and values of val1 to val2 and does not",
          "coverage": ""
        },
        "182": {
          "source": " *  check if keys from val2 are equal to the keys in val1.",
          "coverage": ""
        },
        "183": {
          "source": " *",
          "coverage": ""
        },
        "184": {
          "source": " *",
          "coverage": ""
        },
        "185": {
          "source": "    Luc.compare('1', 1)",
          "coverage": ""
        },
        "186": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "187": {
          "source": "    Luc.compare({a: 1}, {a: 1})",
          "coverage": ""
        },
        "188": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "189": {
          "source": "    Luc.compare({a: 1, b: {}}, {a: 1, b: {} }, {type:'shallow'})",
          "coverage": ""
        },
        "190": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "191": {
          "source": "    Luc.compare({a: 1, b: {}}, {a: 1, b: {} }, {type: 'deep'})",
          "coverage": ""
        },
        "192": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "193": {
          "source": "    Luc.compare({a: 1, b: {}}, {a: 1, b: {} }, {type: 'strict'})",
          "coverage": ""
        },
        "194": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "195": {
          "source": "    Luc.compare({a: 1}, {a:1,b:1})",
          "coverage": ""
        },
        "196": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "197": {
          "source": "    Luc.compare({a: 1}, {a:1,b:1}, {type: 'loose'})",
          "coverage": ""
        },
        "198": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "199": {
          "source": "    Luc.compare({a: 1}, {a:1,b:1}, {type: 'loose'})",
          "coverage": ""
        },
        "200": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "201": {
          "source": "    Luc.compare([{a: 1}], [{a:1,b:1}], {type: 'loose'})",
          "coverage": ""
        },
        "202": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "203": {
          "source": "    Luc.compare([{a: 1}, {}], [{a:1,b:1}], {type: 'loose'})",
          "coverage": ""
        },
        "204": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "205": {
          "source": "    Luc.compare([{a: 1}, {}], [{a:1,b:1}, {}], {type: 'loose'})",
          "coverage": ""
        },
        "206": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "207": {
          "source": "    Luc.compare([{a:1,b:1}], [{a: 1}], {type: 'loose'})",
          "coverage": ""
        },
        "208": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "209": {
          "source": "",
          "coverage": ""
        },
        "210": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "211": {
          "source": " */",
          "coverage": ""
        },
        "212": {
          "source": "function compare(val1, val2, config) {",
          "coverage": 1
        },
        "213": {
          "source": "    return getCompareFn(val1, config)(val1, val2, config);",
          "coverage": 366
        },
        "214": {
          "source": "}",
          "coverage": ""
        },
        "215": {
          "source": "",
          "coverage": ""
        },
        "216": {
          "source": "exports.compare = compare;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "events/eventEmitter.js",
      "coverage": 100,
      "hits": 8,
      "misses": 0,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var EventEmitter = require('events').EventEmitter;",
          "coverage": 1
        },
        "2": {
          "source": "/**",
          "coverage": ""
        },
        "3": {
          "source": " * @license https://raw.github.com/joyent/node/v0.10.11/LICENSE",
          "coverage": ""
        },
        "4": {
          "source": " * Node js license. EventEmitter will be in the client",
          "coverage": ""
        },
        "5": {
          "source": " * only code.",
          "coverage": ""
        },
        "6": {
          "source": " */",
          "coverage": ""
        },
        "7": {
          "source": "/**",
          "coverage": ""
        },
        "8": {
          "source": " * @class Luc.EventEmitter",
          "coverage": ""
        },
        "9": {
          "source": " * The wonderful event emmiter that comes with node,",
          "coverage": ""
        },
        "10": {
          "source": " * that works in the supported browsers.",
          "coverage": ""
        },
        "11": {
          "source": " * [http://nodejs.org/api/events.html](http://nodejs.org/api/events.html)",
          "coverage": ""
        },
        "12": {
          "source": " */",
          "coverage": ""
        },
        "13": {
          "source": "EventEmitter.prototype.once = function(type, listener) {",
          "coverage": 1
        },
        "14": {
          "source": "    //put in fix for IE 9 and below",
          "coverage": ""
        },
        "15": {
          "source": "    var self = this,",
          "coverage": 5
        },
        "16": {
          "source": "        g = function() {",
          "coverage": ""
        },
        "17": {
          "source": "            self.removeListener(type, g);",
          "coverage": 5
        },
        "18": {
          "source": "            listener.apply(this, arguments);",
          "coverage": 5
        },
        "19": {
          "source": "        };",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    self.on(type, g);",
          "coverage": 5
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "    return this;",
          "coverage": 5
        },
        "24": {
          "source": "};",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "module.exports = EventEmitter;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "function.js",
      "coverage": 98.52941176470588,
      "hits": 67,
      "misses": 1,
      "sloc": 68,
      "source": {
        "1": {
          "source": "var is = require('./is'),",
          "coverage": 1
        },
        "2": {
          "source": "    aInsert = require('./array').insert,",
          "coverage": ""
        },
        "3": {
          "source": "    aEach = require('./array').each;",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "/**",
          "coverage": ""
        },
        "6": {
          "source": " * @class Luc.Function",
          "coverage": ""
        },
        "7": {
          "source": " * Package for function methods.  Most of them follow the same api:",
          "coverage": ""
        },
        "8": {
          "source": " * function or function[], relevant args ... with an optional config",
          "coverage": ""
        },
        "9": {
          "source": " * to Luc.Function.createAugmenter as the last argument.",
          "coverage": ""
        },
        "10": {
          "source": " */",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "function _augmentArgs(config, callArgs) {",
          "coverage": 1
        },
        "13": {
          "source": "    var configArgs = config.args,",
          "coverage": 16
        },
        "14": {
          "source": "        index = config.index,",
          "coverage": ""
        },
        "15": {
          "source": "        argsArray;",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "    if (!configArgs) {",
          "coverage": 16
        },
        "18": {
          "source": "        return callArgs;",
          "coverage": 5
        },
        "19": {
          "source": "    }",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    if(index === true || is.isNumber(index)) {",
          "coverage": 11
        },
        "22": {
          "source": "        if(config.argumentsFirst === false) {",
          "coverage": 10
        },
        "23": {
          "source": "            return aInsert(configArgs, callArgs, index);",
          "coverage": 2
        },
        "24": {
          "source": "        }",
          "coverage": ""
        },
        "25": {
          "source": "        return aInsert(callArgs, configArgs, index);",
          "coverage": 8
        },
        "26": {
          "source": "    }",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "    return configArgs;",
          "coverage": 1
        },
        "29": {
          "source": "}",
          "coverage": ""
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "/**",
          "coverage": ""
        },
        "32": {
          "source": " * A reusable empty function",
          "coverage": ""
        },
        "33": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "34": {
          "source": " */",
          "coverage": ""
        },
        "35": {
          "source": "exports.emptyFn = function() {};",
          "coverage": 1
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "/**",
          "coverage": ""
        },
        "38": {
          "source": " * A function that throws an error when called.",
          "coverage": ""
        },
        "39": {
          "source": " * Useful when defining abstract like classes",
          "coverage": ""
        },
        "40": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "41": {
          "source": " */",
          "coverage": ""
        },
        "42": {
          "source": "exports.abstractFn = function() {",
          "coverage": 1
        },
        "43": {
          "source": "    throw new Error('abstractFn must be implemented');",
          "coverage": 0
        },
        "44": {
          "source": "};",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "/**",
          "coverage": ""
        },
        "47": {
          "source": " * Augment the passed in function's thisArg and or arguments object ",
          "coverage": ""
        },
        "48": {
          "source": " * based on the passed in config.",
          "coverage": ""
        },
        "49": {
          "source": " * ",
          "coverage": ""
        },
        "50": {
          "source": " * @param  {Function} fn the function to call",
          "coverage": ""
        },
        "51": {
          "source": " * @param  {Object} config",
          "coverage": ""
        },
        "52": {
          "source": " * ",
          "coverage": ""
        },
        "53": {
          "source": " * @param {Object} [config.thisArg] the thisArg for the function being executed.",
          "coverage": ""
        },
        "54": {
          "source": " * If this is the only property on your config object the preferred way would",
          "coverage": ""
        },
        "55": {
          "source": " * be just to use Function.bind",
          "coverage": ""
        },
        "56": {
          "source": " * ",
          "coverage": ""
        },
        "57": {
          "source": " * @param {Array} [config.args] the arguments used for the function being executed.",
          "coverage": ""
        },
        "58": {
          "source": " * This will replace the functions call args if index is not a number or ",
          "coverage": ""
        },
        "59": {
          "source": " * true.",
          "coverage": ""
        },
        "60": {
          "source": " * ",
          "coverage": ""
        },
        "61": {
          "source": " * @param {Number/True} [config.index] By default the the configured arguments",
          "coverage": ""
        },
        "62": {
          "source": " * will be inserted into the functions passed in call arguments.  If index is true",
          "coverage": ""
        },
        "63": {
          "source": " * append the args together if it is a number insert it at the passed in index.",
          "coverage": ""
        },
        "64": {
          "source": " * ",
          "coverage": ""
        },
        "65": {
          "source": " * @param {Array} [config.argumentsFirst] pass in false to ",
          "coverage": ""
        },
        "66": {
          "source": " * augment the configured args first with Luc.Array.insert.  Defaults",
          "coverage": ""
        },
        "67": {
          "source": " * to true",
          "coverage": ""
        },
        "68": {
          "source": "     ",
          "coverage": ""
        },
        "69": {
          "source": "     function fn() {",
          "coverage": ""
        },
        "70": {
          "source": "        console.log(this)",
          "coverage": ""
        },
        "71": {
          "source": "        console.log(arguments)",
          "coverage": ""
        },
        "72": {
          "source": "    }",
          "coverage": ""
        },
        "73": {
          "source": "    ",
          "coverage": ""
        },
        "74": {
          "source": "    //Luc.Array.insert([4], [1,2,3], 0)",
          "coverage": ""
        },
        "75": {
          "source": "    Luc.Function.createAugmenter(fn, {",
          "coverage": ""
        },
        "76": {
          "source": "        thisArg: {configedThisArg: true},",
          "coverage": ""
        },
        "77": {
          "source": "        args: [1,2,3],",
          "coverage": ""
        },
        "78": {
          "source": "        index:0",
          "coverage": ""
        },
        "79": {
          "source": "    })(4)",
          "coverage": ""
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "    &gt;Object {configedThisArg: true}",
          "coverage": ""
        },
        "82": {
          "source": "    &gt;[1, 2, 3, 4]",
          "coverage": ""
        },
        "83": {
          "source": "",
          "coverage": ""
        },
        "84": {
          "source": "    //Luc.Array.insert([1,2,3], [4], 0)",
          "coverage": ""
        },
        "85": {
          "source": "    Luc.Function.createAugmenter(fn, {",
          "coverage": ""
        },
        "86": {
          "source": "        thisArg: {configedThisArg: true},",
          "coverage": ""
        },
        "87": {
          "source": "        args: [1,2,3],",
          "coverage": ""
        },
        "88": {
          "source": "        index:0,",
          "coverage": ""
        },
        "89": {
          "source": "        argumentsFirst:false",
          "coverage": ""
        },
        "90": {
          "source": "    })(4)",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "    &gt;Object {configedThisArg: true}",
          "coverage": ""
        },
        "93": {
          "source": "    &gt;[4, 1, 2, 3]",
          "coverage": ""
        },
        "94": {
          "source": "",
          "coverage": ""
        },
        "95": {
          "source": "    Luc.Array.insert([4], [1,2,3],  true)",
          "coverage": ""
        },
        "96": {
          "source": "    var f = Luc.Function.createAugmenter(fn, {",
          "coverage": ""
        },
        "97": {
          "source": "        args: [1,2,3],",
          "coverage": ""
        },
        "98": {
          "source": "        index: true",
          "coverage": ""
        },
        "99": {
          "source": "    });",
          "coverage": ""
        },
        "100": {
          "source": "",
          "coverage": ""
        },
        "101": {
          "source": "    f.apply({config: false}, [4])",
          "coverage": ""
        },
        "102": {
          "source": "",
          "coverage": ""
        },
        "103": {
          "source": "    &gt;Object {config: false}",
          "coverage": ""
        },
        "104": {
          "source": "    &gt;[4, 1, 2, 3]",
          "coverage": ""
        },
        "105": {
          "source": "",
          "coverage": ""
        },
        "106": {
          "source": " * @return {Function} the augmented function.",
          "coverage": ""
        },
        "107": {
          "source": " */",
          "coverage": ""
        },
        "108": {
          "source": "exports.createAugmenter = function(fn, config) {",
          "coverage": 1
        },
        "109": {
          "source": "    var thisArg = config.thisArg;",
          "coverage": 17
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "    return function() {",
          "coverage": 17
        },
        "112": {
          "source": "        return fn.apply(thisArg || this, _augmentArgs(config, arguments));",
          "coverage": 16
        },
        "113": {
          "source": "    };",
          "coverage": ""
        },
        "114": {
          "source": "};",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "function _initSequenceFunctions(fns, config) {",
          "coverage": 1
        },
        "117": {
          "source": "    var toRun = [];",
          "coverage": 4
        },
        "118": {
          "source": "    aEach(fns, function(f) {",
          "coverage": 4
        },
        "119": {
          "source": "        var fn = f;",
          "coverage": 12
        },
        "120": {
          "source": "",
          "coverage": ""
        },
        "121": {
          "source": "        if (config) {",
          "coverage": 12
        },
        "122": {
          "source": "            fn = exports.createAugmenter(f, config);",
          "coverage": 9
        },
        "123": {
          "source": "        }",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "        toRun.push(fn);",
          "coverage": 12
        },
        "126": {
          "source": "    });",
          "coverage": ""
        },
        "127": {
          "source": "",
          "coverage": ""
        },
        "128": {
          "source": "    return toRun;",
          "coverage": 4
        },
        "129": {
          "source": "}",
          "coverage": ""
        },
        "130": {
          "source": "",
          "coverage": ""
        },
        "131": {
          "source": "/**",
          "coverage": ""
        },
        "132": {
          "source": " * Return a function that runs the passed in functions",
          "coverage": ""
        },
        "133": {
          "source": " * and returns the result of the last function called.",
          "coverage": ""
        },
        "134": {
          "source": " * ",
          "coverage": ""
        },
        "135": {
          "source": " * @param  {Function[]} fns ",
          "coverage": ""
        },
        "136": {
          "source": " * @param  {Object} [config] Config object",
          "coverage": ""
        },
        "137": {
          "source": " * for Luc.Function.createAugmenter.  If defined all of the functions",
          "coverage": ""
        },
        "138": {
          "source": " * will get created with the passed in config;",
          "coverage": ""
        },
        "139": {
          "source": " *",
          "coverage": ""
        },
        "140": {
          "source": "    Luc.Function.createSequence([",
          "coverage": ""
        },
        "141": {
          "source": "        function() {",
          "coverage": ""
        },
        "142": {
          "source": "            console.log(1)",
          "coverage": ""
        },
        "143": {
          "source": "        },",
          "coverage": ""
        },
        "144": {
          "source": "        function() {",
          "coverage": ""
        },
        "145": {
          "source": "            console.log(2)",
          "coverage": ""
        },
        "146": {
          "source": "        },",
          "coverage": ""
        },
        "147": {
          "source": "        function() {",
          "coverage": ""
        },
        "148": {
          "source": "            console.log(3)",
          "coverage": ""
        },
        "149": {
          "source": "            console.log('finished logging')",
          "coverage": ""
        },
        "150": {
          "source": "            return 4;",
          "coverage": ""
        },
        "151": {
          "source": "        }",
          "coverage": ""
        },
        "152": {
          "source": "    ])()",
          "coverage": ""
        },
        "153": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "154": {
          "source": "    &gt;2",
          "coverage": ""
        },
        "155": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "156": {
          "source": "    &gt;finished logging",
          "coverage": ""
        },
        "157": {
          "source": "    &gt;4",
          "coverage": ""
        },
        "158": {
          "source": " * ",
          "coverage": ""
        },
        "159": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "160": {
          "source": " */",
          "coverage": ""
        },
        "161": {
          "source": "exports.createSequence = function(fns, config) {",
          "coverage": 1
        },
        "162": {
          "source": "    var functions = _initSequenceFunctions(fns, config);",
          "coverage": 2
        },
        "163": {
          "source": "",
          "coverage": ""
        },
        "164": {
          "source": "    return function() {",
          "coverage": 2
        },
        "165": {
          "source": "        var i = 0,",
          "coverage": 2
        },
        "166": {
          "source": "            lastFnIndex = functions.length -1;",
          "coverage": ""
        },
        "167": {
          "source": "",
          "coverage": ""
        },
        "168": {
          "source": "        for(;i &lt; lastFnIndex; ++i) {",
          "coverage": 2
        },
        "169": {
          "source": "            functions[i].apply(this, arguments);",
          "coverage": 4
        },
        "170": {
          "source": "        }",
          "coverage": ""
        },
        "171": {
          "source": "",
          "coverage": ""
        },
        "172": {
          "source": "        return functions[lastFnIndex].apply(this, arguments);",
          "coverage": 2
        },
        "173": {
          "source": "    };",
          "coverage": ""
        },
        "174": {
          "source": "};",
          "coverage": ""
        },
        "175": {
          "source": "",
          "coverage": ""
        },
        "176": {
          "source": "/**",
          "coverage": ""
        },
        "177": {
          "source": " * Return a function that runs the passed in functions",
          "coverage": ""
        },
        "178": {
          "source": " * if one of the functions returns false the rest of the ",
          "coverage": ""
        },
        "179": {
          "source": " * functions won't run and false will be returned.",
          "coverage": ""
        },
        "180": {
          "source": " *",
          "coverage": ""
        },
        "181": {
          "source": " * If no false is returned the value of the last function return will be returned",
          "coverage": ""
        },
        "182": {
          "source": " * ",
          "coverage": ""
        },
        "183": {
          "source": "    Luc.Function.createSequenceIf([",
          "coverage": ""
        },
        "184": {
          "source": "        function() {",
          "coverage": ""
        },
        "185": {
          "source": "            console.log(1)",
          "coverage": ""
        },
        "186": {
          "source": "        },",
          "coverage": ""
        },
        "187": {
          "source": "        function() {",
          "coverage": ""
        },
        "188": {
          "source": "            console.log(2)",
          "coverage": ""
        },
        "189": {
          "source": "        },",
          "coverage": ""
        },
        "190": {
          "source": "        function() {",
          "coverage": ""
        },
        "191": {
          "source": "            console.log(3)",
          "coverage": ""
        },
        "192": {
          "source": "            console.log('finished logging')",
          "coverage": ""
        },
        "193": {
          "source": "            return 4;",
          "coverage": ""
        },
        "194": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "195": {
          "source": "            return false;",
          "coverage": ""
        },
        "196": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "197": {
          "source": "            console.log('i cant log')",
          "coverage": ""
        },
        "198": {
          "source": "        }",
          "coverage": ""
        },
        "199": {
          "source": "    ])()",
          "coverage": ""
        },
        "200": {
          "source": "",
          "coverage": ""
        },
        "201": {
          "source": "    &gt;1",
          "coverage": ""
        },
        "202": {
          "source": "    &gt;2",
          "coverage": ""
        },
        "203": {
          "source": "    &gt;3",
          "coverage": ""
        },
        "204": {
          "source": "    &gt;finished logging",
          "coverage": ""
        },
        "205": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "206": {
          "source": " *",
          "coverage": ""
        },
        "207": {
          "source": " * ",
          "coverage": ""
        },
        "208": {
          "source": " * @param  {Function[]} fns ",
          "coverage": ""
        },
        "209": {
          "source": " * @param  {Object} [config] Config object",
          "coverage": ""
        },
        "210": {
          "source": " * for Luc.Function.createAugmenter.  If defined all of the functions",
          "coverage": ""
        },
        "211": {
          "source": " * will get created with the passed in config;",
          "coverage": ""
        },
        "212": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "213": {
          "source": " */",
          "coverage": ""
        },
        "214": {
          "source": "exports.createSequenceIf = function(fns, config) {",
          "coverage": 1
        },
        "215": {
          "source": "    var functions = _initSequenceFunctions(fns, config);",
          "coverage": 1
        },
        "216": {
          "source": "",
          "coverage": ""
        },
        "217": {
          "source": "    return function() {",
          "coverage": 1
        },
        "218": {
          "source": "        var value,",
          "coverage": 1
        },
        "219": {
          "source": "            args = arguments;",
          "coverage": ""
        },
        "220": {
          "source": "",
          "coverage": ""
        },
        "221": {
          "source": "        functions.some(function(fn){",
          "coverage": 1
        },
        "222": {
          "source": "            value = fn.apply(this, args);",
          "coverage": 2
        },
        "223": {
          "source": "",
          "coverage": ""
        },
        "224": {
          "source": "            return value === false;",
          "coverage": 2
        },
        "225": {
          "source": "        }, this);",
          "coverage": ""
        },
        "226": {
          "source": "",
          "coverage": ""
        },
        "227": {
          "source": "        return value;",
          "coverage": 1
        },
        "228": {
          "source": "    };",
          "coverage": ""
        },
        "229": {
          "source": "};",
          "coverage": ""
        },
        "230": {
          "source": "",
          "coverage": ""
        },
        "231": {
          "source": "/**",
          "coverage": ""
        },
        "232": {
          "source": " * Return a functions that runs the passed in functions",
          "coverage": ""
        },
        "233": {
          "source": " * the result of each function will be the the call args ",
          "coverage": ""
        },
        "234": {
          "source": " * for the next function.  The value of the last function ",
          "coverage": ""
        },
        "235": {
          "source": " * return will be returned.",
          "coverage": ""
        },
        "236": {
          "source": " * ",
          "coverage": ""
        },
        "237": {
          "source": "     ",
          "coverage": ""
        },
        "238": {
          "source": "     Luc.Function.createRelayer([",
          "coverage": ""
        },
        "239": {
          "source": "        function(str) {",
          "coverage": ""
        },
        "240": {
          "source": "            return str + 'b'",
          "coverage": ""
        },
        "241": {
          "source": "        },",
          "coverage": ""
        },
        "242": {
          "source": "        function(str) {",
          "coverage": ""
        },
        "243": {
          "source": "            return str + 'c'",
          "coverage": ""
        },
        "244": {
          "source": "        },",
          "coverage": ""
        },
        "245": {
          "source": "        function(str) {",
          "coverage": ""
        },
        "246": {
          "source": "            return str + 'd'",
          "coverage": ""
        },
        "247": {
          "source": "        }",
          "coverage": ""
        },
        "248": {
          "source": "    ])('a')",
          "coverage": ""
        },
        "249": {
          "source": "",
          "coverage": ""
        },
        "250": {
          "source": "    &gt;\"abcd\"",
          "coverage": ""
        },
        "251": {
          "source": "",
          "coverage": ""
        },
        "252": {
          "source": " * @param  {Function[]} fns ",
          "coverage": ""
        },
        "253": {
          "source": " * @param  {Object} [config] Config object",
          "coverage": ""
        },
        "254": {
          "source": " * for Luc.Function.createAugmenter.  If defined all of the functions",
          "coverage": ""
        },
        "255": {
          "source": " * will get created with the passed in config;",
          "coverage": ""
        },
        "256": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "257": {
          "source": " */",
          "coverage": ""
        },
        "258": {
          "source": "exports.createRelayer = function(fns, config) {",
          "coverage": 1
        },
        "259": {
          "source": "    var functions = _initSequenceFunctions(fns, config);",
          "coverage": 1
        },
        "260": {
          "source": "",
          "coverage": ""
        },
        "261": {
          "source": "    return function() {",
          "coverage": 1
        },
        "262": {
          "source": "        var value,",
          "coverage": 1
        },
        "263": {
          "source": "            args = arguments;",
          "coverage": ""
        },
        "264": {
          "source": "",
          "coverage": ""
        },
        "265": {
          "source": "        functions.forEach(function(fn, index) {",
          "coverage": 1
        },
        "266": {
          "source": "            if (index === 0) {",
          "coverage": 3
        },
        "267": {
          "source": "                value = fn.apply(this, args);",
          "coverage": 1
        },
        "268": {
          "source": "            } else {",
          "coverage": ""
        },
        "269": {
          "source": "                value = fn.apply(this, [value]);",
          "coverage": 2
        },
        "270": {
          "source": "            }",
          "coverage": ""
        },
        "271": {
          "source": "        }, this);",
          "coverage": ""
        },
        "272": {
          "source": "",
          "coverage": ""
        },
        "273": {
          "source": "        return value;",
          "coverage": 1
        },
        "274": {
          "source": "    };",
          "coverage": ""
        },
        "275": {
          "source": "};",
          "coverage": ""
        },
        "276": {
          "source": "",
          "coverage": ""
        },
        "277": {
          "source": "/**",
          "coverage": ""
        },
        "278": {
          "source": " * Create a throttled function from the passed in function",
          "coverage": ""
        },
        "279": {
          "source": " * that will only get called once the number of milliseconds",
          "coverage": ""
        },
        "280": {
          "source": " * have been exceeded.",
          "coverage": ""
        },
        "281": {
          "source": " * ",
          "coverage": ""
        },
        "282": {
          "source": "    var logArgs  = function() {",
          "coverage": ""
        },
        "283": {
          "source": "        console.log(arguments)",
          "coverage": ""
        },
        "284": {
          "source": "    };",
          "coverage": ""
        },
        "285": {
          "source": "",
          "coverage": ""
        },
        "286": {
          "source": "    var a = Luc.Function.createThrottled(logArgs, 1);",
          "coverage": ""
        },
        "287": {
          "source": "",
          "coverage": ""
        },
        "288": {
          "source": "    for(var i = 0; i &lt; 100; ++i) {",
          "coverage": ""
        },
        "289": {
          "source": "        a(1,2,3);",
          "coverage": ""
        },
        "290": {
          "source": "    }",
          "coverage": ""
        },
        "291": {
          "source": "",
          "coverage": ""
        },
        "292": {
          "source": "    setTimeout(function() {",
          "coverage": ""
        },
        "293": {
          "source": "        a(1)",
          "coverage": ""
        },
        "294": {
          "source": "    }, 100)",
          "coverage": ""
        },
        "295": {
          "source": "    setTimeout(function() {",
          "coverage": ""
        },
        "296": {
          "source": "        a(2)",
          "coverage": ""
        },
        "297": {
          "source": "    }, 400)",
          "coverage": ""
        },
        "298": {
          "source": "",
          "coverage": ""
        },
        "299": {
          "source": "    &gt;[1, 2, 3]",
          "coverage": ""
        },
        "300": {
          "source": "    &gt;[1]",
          "coverage": ""
        },
        "301": {
          "source": "    &gt;[2]",
          "coverage": ""
        },
        "302": {
          "source": " * ",
          "coverage": ""
        },
        "303": {
          "source": " * @param  {Function} fn",
          "coverage": ""
        },
        "304": {
          "source": " * @param  {Number} millis Number of milliseconds to",
          "coverage": ""
        },
        "305": {
          "source": " * throttle the function.",
          "coverage": ""
        },
        "306": {
          "source": " * @param  {Object} [config] Config object",
          "coverage": ""
        },
        "307": {
          "source": " * for Luc.Function.createAugmenter.  If defined all of the functions",
          "coverage": ""
        },
        "308": {
          "source": " * will get created with the passed in config;",
          "coverage": ""
        },
        "309": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "310": {
          "source": " */",
          "coverage": ""
        },
        "311": {
          "source": "exports.createThrottled = function(f, millis, config) {",
          "coverage": 1
        },
        "312": {
          "source": "    var fn = config ? exports.createAugmenter(f, config) : f,",
          "coverage": 2
        },
        "313": {
          "source": "        timeOutId = false;",
          "coverage": ""
        },
        "314": {
          "source": "",
          "coverage": ""
        },
        "315": {
          "source": "    if(!millis) {",
          "coverage": 2
        },
        "316": {
          "source": "        return fn;",
          "coverage": 1
        },
        "317": {
          "source": "    }",
          "coverage": ""
        },
        "318": {
          "source": "",
          "coverage": ""
        },
        "319": {
          "source": "    return function() {",
          "coverage": 1
        },
        "320": {
          "source": "        var args = arguments;",
          "coverage": 201
        },
        "321": {
          "source": "",
          "coverage": ""
        },
        "322": {
          "source": "        if(timeOutId) {",
          "coverage": 201
        },
        "323": {
          "source": "            clearTimeout(timeOutId);",
          "coverage": 200
        },
        "324": {
          "source": "        }",
          "coverage": ""
        },
        "325": {
          "source": "",
          "coverage": ""
        },
        "326": {
          "source": "        timeOutId = setTimeout(function() {",
          "coverage": 201
        },
        "327": {
          "source": "            timeOutId = false;",
          "coverage": 1
        },
        "328": {
          "source": "            fn.apply(this, args);",
          "coverage": 1
        },
        "329": {
          "source": "        }, millis);",
          "coverage": ""
        },
        "330": {
          "source": "    };",
          "coverage": ""
        },
        "331": {
          "source": "};",
          "coverage": ""
        },
        "332": {
          "source": "",
          "coverage": ""
        },
        "333": {
          "source": "/**",
          "coverage": ""
        },
        "334": {
          "source": " * Defer a function's execution for the passed in",
          "coverage": ""
        },
        "335": {
          "source": " * milliseconds.",
          "coverage": ""
        },
        "336": {
          "source": " * ",
          "coverage": ""
        },
        "337": {
          "source": " * @param  {Function} fn",
          "coverage": ""
        },
        "338": {
          "source": " * @param  {Number} millis Number of milliseconds to",
          "coverage": ""
        },
        "339": {
          "source": " * defer",
          "coverage": ""
        },
        "340": {
          "source": " * @param  {Object} [config] Config object",
          "coverage": ""
        },
        "341": {
          "source": " * for Luc.Function.createAugmenter.  If defined all of the functions",
          "coverage": ""
        },
        "342": {
          "source": " * will get created with the passed in config;",
          "coverage": ""
        },
        "343": {
          "source": " * ",
          "coverage": ""
        },
        "344": {
          "source": " * @return {Function}",
          "coverage": ""
        },
        "345": {
          "source": " */",
          "coverage": ""
        },
        "346": {
          "source": "exports.createDeferred = function(f, millis, config) {",
          "coverage": 1
        },
        "347": {
          "source": "    var fn = config ? exports.createAugmenter(f, config) : f;",
          "coverage": 2
        },
        "348": {
          "source": "",
          "coverage": ""
        },
        "349": {
          "source": "    if(!millis) {",
          "coverage": 2
        },
        "350": {
          "source": "        return fn;",
          "coverage": 1
        },
        "351": {
          "source": "    }",
          "coverage": ""
        },
        "352": {
          "source": "",
          "coverage": ""
        },
        "353": {
          "source": "    return function() {",
          "coverage": 1
        },
        "354": {
          "source": "        var args = arguments;",
          "coverage": 1
        },
        "355": {
          "source": "",
          "coverage": ""
        },
        "356": {
          "source": "        setTimeout(function() {",
          "coverage": 1
        },
        "357": {
          "source": "            fn.apply(this, args);",
          "coverage": 1
        },
        "358": {
          "source": "        }, millis);",
          "coverage": ""
        },
        "359": {
          "source": "    };",
          "coverage": ""
        },
        "360": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "id.js",
      "coverage": 33.33333333333333,
      "hits": 2,
      "misses": 4,
      "sloc": 6,
      "source": {
        "1": {
          "source": "var ids = {};",
          "coverage": 1
        },
        "2": {
          "source": "/**",
          "coverage": ""
        },
        "3": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "4": {
          "source": " * @method id",
          "coverage": ""
        },
        "5": {
          "source": " * ",
          "coverage": ""
        },
        "6": {
          "source": " * Return a unique id.",
          "coverage": ""
        },
        "7": {
          "source": " * @param {String} [prefix] Optional prefix to use",
          "coverage": ""
        },
        "8": {
          "source": " *",
          "coverage": ""
        },
        "9": {
          "source": " *",
          "coverage": ""
        },
        "10": {
          "source": "        Luc.id()",
          "coverage": ""
        },
        "11": {
          "source": "        &gt;\"luc-0\"",
          "coverage": ""
        },
        "12": {
          "source": "        Luc.id()",
          "coverage": ""
        },
        "13": {
          "source": "        &gt;\"luc-1\"",
          "coverage": ""
        },
        "14": {
          "source": "        Luc.id('my-prefix')",
          "coverage": ""
        },
        "15": {
          "source": "        &gt;\"my-prefix0\"",
          "coverage": ""
        },
        "16": {
          "source": "        Luc.id('')",
          "coverage": ""
        },
        "17": {
          "source": "        &gt;\"0\"",
          "coverage": ""
        },
        "18": {
          "source": " *",
          "coverage": ""
        },
        "19": {
          "source": " * @return {String}",
          "coverage": ""
        },
        "20": {
          "source": " *",
          "coverage": ""
        },
        "21": {
          "source": " */",
          "coverage": ""
        },
        "22": {
          "source": "module.exports = function(p) {",
          "coverage": 1
        },
        "23": {
          "source": "    var prefix = p === undefined ? 'luc-' : p;",
          "coverage": 0
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "    if(ids[prefix] === undefined) {",
          "coverage": 0
        },
        "26": {
          "source": "        ids[prefix] = 0;",
          "coverage": 0
        },
        "27": {
          "source": "    }",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "    return prefix + ids[prefix]++;",
          "coverage": 0
        },
        "30": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "is.js",
      "coverage": 100,
      "hits": 29,
      "misses": 0,
      "sloc": 29,
      "source": {
        "1": {
          "source": "var oToString = Object.prototype.toString;",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "/**",
          "coverage": ""
        },
        "5": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "6": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "7": {
          "source": " * the type {@link Array Array}",
          "coverage": ""
        },
        "8": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "9": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "10": {
          "source": " */",
          "coverage": ""
        },
        "11": {
          "source": "function isArray(obj) {",
          "coverage": 1
        },
        "12": {
          "source": "    return Array.isArray(obj);",
          "coverage": 323
        },
        "13": {
          "source": "}",
          "coverage": ""
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "/**",
          "coverage": ""
        },
        "16": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "17": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "18": {
          "source": " * the type {@link Object Object}",
          "coverage": ""
        },
        "19": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "20": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "21": {
          "source": " */",
          "coverage": ""
        },
        "22": {
          "source": "function isObject(obj) {",
          "coverage": 1
        },
        "23": {
          "source": "    return obj &amp;&amp; oToString.call(obj) === '[object Object]';",
          "coverage": 511
        },
        "24": {
          "source": "}",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "/**",
          "coverage": ""
        },
        "27": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "28": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "29": {
          "source": " * the type {@link Function Function}",
          "coverage": ""
        },
        "30": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "31": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "32": {
          "source": " */",
          "coverage": ""
        },
        "33": {
          "source": "function isFunction(obj) {",
          "coverage": 1
        },
        "34": {
          "source": "    return oToString.call(obj) === '[object Function]';",
          "coverage": 295
        },
        "35": {
          "source": "}",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "/**",
          "coverage": ""
        },
        "38": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "39": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "40": {
          "source": " * the type {@link Date Date}",
          "coverage": ""
        },
        "41": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "42": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "43": {
          "source": " */",
          "coverage": ""
        },
        "44": {
          "source": "function isDate(obj) {",
          "coverage": 1
        },
        "45": {
          "source": "    return oToString.call(obj) === '[object Date]';",
          "coverage": 269
        },
        "46": {
          "source": "}",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "/**",
          "coverage": ""
        },
        "49": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "50": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "51": {
          "source": " * the type {@link RegExp RegExp}",
          "coverage": ""
        },
        "52": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "53": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "54": {
          "source": " */",
          "coverage": ""
        },
        "55": {
          "source": "function isRegExp(obj) {",
          "coverage": 1
        },
        "56": {
          "source": "    return oToString.call(obj) === '[object RegExp]';",
          "coverage": 2
        },
        "57": {
          "source": "}",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "/**",
          "coverage": ""
        },
        "60": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "61": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "62": {
          "source": " * the type {@link Number Number}",
          "coverage": ""
        },
        "63": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "64": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "65": {
          "source": " */",
          "coverage": ""
        },
        "66": {
          "source": "function isNumber(obj) {",
          "coverage": 1
        },
        "67": {
          "source": "    return oToString.call(obj) === '[object Number]';",
          "coverage": 7
        },
        "68": {
          "source": "}",
          "coverage": ""
        },
        "69": {
          "source": "",
          "coverage": ""
        },
        "70": {
          "source": "/**",
          "coverage": ""
        },
        "71": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "72": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "73": {
          "source": " * the type {@link String String}",
          "coverage": ""
        },
        "74": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "75": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "76": {
          "source": " */",
          "coverage": ""
        },
        "77": {
          "source": "function isString(obj) {",
          "coverage": 1
        },
        "78": {
          "source": "    return oToString.call(obj) === '[object String]';",
          "coverage": 16
        },
        "79": {
          "source": "}",
          "coverage": ""
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "/**",
          "coverage": ""
        },
        "82": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "83": {
          "source": " * Return true if the passed in object is of",
          "coverage": ""
        },
        "84": {
          "source": " * the type arguments.",
          "coverage": ""
        },
        "85": {
          "source": " * ",
          "coverage": ""
        },
        "86": {
          "source": " * @param  {Object}  obj ",
          "coverage": ""
        },
        "87": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "88": {
          "source": " */",
          "coverage": ""
        },
        "89": {
          "source": "function isArguments(obj) {",
          "coverage": 1
        },
        "90": {
          "source": "    return oToString.call(obj) === '[object Arguments]' || obj &amp;&amp; !!obj.callee;",
          "coverage": 18
        },
        "91": {
          "source": "}",
          "coverage": ""
        },
        "92": {
          "source": "",
          "coverage": ""
        },
        "93": {
          "source": "/**",
          "coverage": ""
        },
        "94": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "95": {
          "source": " * Return true if the object is falsy but not zero.",
          "coverage": ""
        },
        "96": {
          "source": "    Luc.isFalsy(false)",
          "coverage": ""
        },
        "97": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "98": {
          "source": "    Luc.isFalsy(0)",
          "coverage": ""
        },
        "99": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "100": {
          "source": " * @param  {Object}  obj",
          "coverage": ""
        },
        "101": {
          "source": " * @return {Boolean}     ",
          "coverage": ""
        },
        "102": {
          "source": " */",
          "coverage": ""
        },
        "103": {
          "source": "function isFalsy(obj) {",
          "coverage": 1
        },
        "104": {
          "source": "    return (!obj &amp;&amp; obj !== 0);",
          "coverage": 16
        },
        "105": {
          "source": "}",
          "coverage": ""
        },
        "106": {
          "source": "",
          "coverage": ""
        },
        "107": {
          "source": "/**",
          "coverage": ""
        },
        "108": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "109": {
          "source": " * Return true if the object is empty.",
          "coverage": ""
        },
        "110": {
          "source": " * {}, [], '',false, null, undefined, NaN ",
          "coverage": ""
        },
        "111": {
          "source": " * are all treated as empty.",
          "coverage": ""
        },
        "112": {
          "source": " * ",
          "coverage": ""
        },
        "113": {
          "source": "    Luc.isEmpty(true)",
          "coverage": ""
        },
        "114": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "115": {
          "source": "    Luc.isEmpty([])",
          "coverage": ""
        },
        "116": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "117": {
          "source": "    ",
          "coverage": ""
        },
        "118": {
          "source": " * @param  {Object}  obj",
          "coverage": ""
        },
        "119": {
          "source": " * @return {Boolean}",
          "coverage": ""
        },
        "120": {
          "source": " */",
          "coverage": ""
        },
        "121": {
          "source": "function isEmpty(obj) {",
          "coverage": 1
        },
        "122": {
          "source": "    var empty = false;",
          "coverage": 9
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "    if (isFalsy(obj)) {",
          "coverage": 9
        },
        "125": {
          "source": "        empty = true;",
          "coverage": 4
        },
        "126": {
          "source": "    } else if (isArray(obj)) {",
          "coverage": 5
        },
        "127": {
          "source": "        empty = obj.length === 0;",
          "coverage": 2
        },
        "128": {
          "source": "    } else if (isObject(obj)) {",
          "coverage": 3
        },
        "129": {
          "source": "        empty = Object.keys(obj).length === 0;",
          "coverage": 2
        },
        "130": {
          "source": "    }",
          "coverage": ""
        },
        "131": {
          "source": "",
          "coverage": ""
        },
        "132": {
          "source": "    return empty;",
          "coverage": 9
        },
        "133": {
          "source": "}",
          "coverage": ""
        },
        "134": {
          "source": "",
          "coverage": ""
        },
        "135": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "136": {
          "source": "    isArray: isArray,",
          "coverage": ""
        },
        "137": {
          "source": "    isObject: isObject,",
          "coverage": ""
        },
        "138": {
          "source": "    isFunction: isFunction,",
          "coverage": ""
        },
        "139": {
          "source": "    isDate: isDate,",
          "coverage": ""
        },
        "140": {
          "source": "    isString: isString,",
          "coverage": ""
        },
        "141": {
          "source": "    isNumber: isNumber,",
          "coverage": ""
        },
        "142": {
          "source": "    isRegExp: isRegExp,",
          "coverage": ""
        },
        "143": {
          "source": "    isArguments: isArguments,",
          "coverage": ""
        },
        "144": {
          "source": "    isFalsy: isFalsy,",
          "coverage": ""
        },
        "145": {
          "source": "    isEmpty: isEmpty",
          "coverage": ""
        },
        "146": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "luc.js",
      "coverage": 94.87179487179486,
      "hits": 37,
      "misses": 2,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var Luc = {},",
          "coverage": 1
        },
        "2": {
          "source": "    isBrowser = false;",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "if(typeof window !== 'undefined') {",
          "coverage": 1
        },
        "5": {
          "source": "    isBrowser = true;",
          "coverage": 0
        },
        "6": {
          "source": "}",
          "coverage": ""
        },
        "7": {
          "source": "/**",
          "coverage": ""
        },
        "8": {
          "source": " * @class Luc",
          "coverage": ""
        },
        "9": {
          "source": " * Aliases for common Luc methods and packages.  Check out Luc.define",
          "coverage": ""
        },
        "10": {
          "source": " * to look at the class system Luc provides.",
          "coverage": ""
        },
        "11": {
          "source": " */",
          "coverage": ""
        },
        "12": {
          "source": "module.exports = Luc;",
          "coverage": 1
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "var object = require('./object');",
          "coverage": 1
        },
        "15": {
          "source": "Luc.Object = object;",
          "coverage": 1
        },
        "16": {
          "source": "/**",
          "coverage": ""
        },
        "17": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "18": {
          "source": " * @property O Luc.O",
          "coverage": ""
        },
        "19": {
          "source": " * Alias for Luc.Object",
          "coverage": ""
        },
        "20": {
          "source": " */",
          "coverage": ""
        },
        "21": {
          "source": "Luc.O = object;",
          "coverage": 1
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "/**",
          "coverage": ""
        },
        "25": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "26": {
          "source": " * @method apply",
          "coverage": ""
        },
        "27": {
          "source": " * @inheritdoc Luc.Object#apply",
          "coverage": ""
        },
        "28": {
          "source": " */",
          "coverage": ""
        },
        "29": {
          "source": "Luc.apply = Luc.Object.apply;",
          "coverage": 1
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "/**",
          "coverage": ""
        },
        "32": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "33": {
          "source": " * @method mix",
          "coverage": ""
        },
        "34": {
          "source": " * @inheritdoc Luc.Object#mix",
          "coverage": ""
        },
        "35": {
          "source": " */",
          "coverage": ""
        },
        "36": {
          "source": "Luc.mix = Luc.Object.mix;",
          "coverage": 1
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "",
          "coverage": ""
        },
        "39": {
          "source": "var fun = require('./function');",
          "coverage": 1
        },
        "40": {
          "source": "Luc.Function = fun;",
          "coverage": 1
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "/**",
          "coverage": ""
        },
        "43": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "44": {
          "source": " * @property F Luc.F",
          "coverage": ""
        },
        "45": {
          "source": " * Alias for Luc.Function",
          "coverage": ""
        },
        "46": {
          "source": " */",
          "coverage": ""
        },
        "47": {
          "source": "Luc.F = fun;",
          "coverage": 1
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "/**",
          "coverage": ""
        },
        "50": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "51": {
          "source": " * @method emptyFn",
          "coverage": ""
        },
        "52": {
          "source": " * @inheritdoc Luc.Function#emptyFn",
          "coverage": ""
        },
        "53": {
          "source": " */",
          "coverage": ""
        },
        "54": {
          "source": "Luc.emptyFn = Luc.Function.emptyFn;",
          "coverage": 1
        },
        "55": {
          "source": "",
          "coverage": ""
        },
        "56": {
          "source": "/**",
          "coverage": ""
        },
        "57": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "58": {
          "source": " * @method abstractFn",
          "coverage": ""
        },
        "59": {
          "source": " * @inheritdoc Luc.Function#abstractFn",
          "coverage": ""
        },
        "60": {
          "source": " */",
          "coverage": ""
        },
        "61": {
          "source": "Luc.abstractFn = Luc.Function.abstractFn;",
          "coverage": 1
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "var array = require('./array');",
          "coverage": 1
        },
        "64": {
          "source": "Luc.Array = array;",
          "coverage": 1
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "/**",
          "coverage": ""
        },
        "67": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "68": {
          "source": " * @property A Luc.A",
          "coverage": ""
        },
        "69": {
          "source": " * Alias for Luc.Array",
          "coverage": ""
        },
        "70": {
          "source": " */",
          "coverage": ""
        },
        "71": {
          "source": "Luc.A = array;",
          "coverage": 1
        },
        "72": {
          "source": "",
          "coverage": ""
        },
        "73": {
          "source": "Luc.ArrayFnGenerator = require('./arrayFnGenerator');",
          "coverage": 1
        },
        "74": {
          "source": "",
          "coverage": ""
        },
        "75": {
          "source": "Luc.apply(Luc, require('./is'));",
          "coverage": 1
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "var EventEmitter = require('./events/eventEmitter');",
          "coverage": 1
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "Luc.EventEmitter = EventEmitter;",
          "coverage": 1
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "var Base = require('./class/base');",
          "coverage": 1
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "Luc.Base = Base;",
          "coverage": 1
        },
        "84": {
          "source": "",
          "coverage": ""
        },
        "85": {
          "source": "var Definer = require('./class/definer');",
          "coverage": 1
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "Luc.ClassDefiner = Definer;",
          "coverage": 1
        },
        "88": {
          "source": "",
          "coverage": ""
        },
        "89": {
          "source": "/**",
          "coverage": ""
        },
        "90": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "91": {
          "source": " * @method define",
          "coverage": ""
        },
        "92": {
          "source": " * @inheritdoc Luc.define#define",
          "coverage": ""
        },
        "93": {
          "source": " */",
          "coverage": ""
        },
        "94": {
          "source": "Luc.define = Definer.define;",
          "coverage": 1
        },
        "95": {
          "source": "",
          "coverage": ""
        },
        "96": {
          "source": "Luc.Plugin = require('./class/plugin');",
          "coverage": 1
        },
        "97": {
          "source": "",
          "coverage": ""
        },
        "98": {
          "source": "Luc.PluginManager = require('./class/pluginManager');",
          "coverage": 1
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "Luc.apply(Luc, {",
          "coverage": 1
        },
        "101": {
          "source": "    compositionEnums: require('./class/compositionEnums')",
          "coverage": ""
        },
        "102": {
          "source": "});",
          "coverage": ""
        },
        "103": {
          "source": "",
          "coverage": ""
        },
        "104": {
          "source": "Luc.compare = require('./compare').compare;",
          "coverage": 1
        },
        "105": {
          "source": "",
          "coverage": ""
        },
        "106": {
          "source": "Luc.id = require('./id');",
          "coverage": 1
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "",
          "coverage": ""
        },
        "109": {
          "source": "if(isBrowser) {",
          "coverage": 1
        },
        "110": {
          "source": "    window.Luc = Luc;",
          "coverage": 0
        },
        "111": {
          "source": "}",
          "coverage": ""
        },
        "112": {
          "source": "",
          "coverage": ""
        },
        "113": {
          "source": "/**",
          "coverage": ""
        },
        "114": {
          "source": " * @member Luc",
          "coverage": ""
        },
        "115": {
          "source": " * @method addSubmodule",
          "coverage": ""
        },
        "116": {
          "source": " * Method used by submodule authors to add their module into Luc.",
          "coverage": ""
        },
        "117": {
          "source": " * By default the submodule will only be added to Luc if Luc is in",
          "coverage": ""
        },
        "118": {
          "source": " * the context of a browser.  Node already has a nice module system.  ",
          "coverage": ""
        },
        "119": {
          "source": " * This behavior can be overridden by setting",
          "coverage": ""
        },
        "120": {
          "source": " * Luc.alwaysAddSubmodule to true.",
          "coverage": ""
        },
        "121": {
          "source": " *",
          "coverage": ""
        },
        "122": {
          "source": " * @param {String} namespace the namespace of the submodule",
          "coverage": ""
        },
        "123": {
          "source": " * @param {Object} obj the object  to add to the namespace.  If keys already exist in",
          "coverage": ""
        },
        "124": {
          "source": " * the namespace they will not be overwritten.",
          "coverage": ""
        },
        "125": {
          "source": " *",
          "coverage": ""
        },
        "126": {
          "source": "    function Tooltip() {}",
          "coverage": ""
        },
        "127": {
          "source": "    var coolTooltip =  {Tooltip: Tooltip};",
          "coverage": ""
        },
        "128": {
          "source": "    Luc.addSubmodule('ui', coolTooltip);",
          "coverage": ""
        },
        "129": {
          "source": "    Luc.ui.Tooltip;",
          "coverage": ""
        },
        "130": {
          "source": "    &gt;function Tooltip() {}",
          "coverage": ""
        },
        "131": {
          "source": "",
          "coverage": ""
        },
        "132": {
          "source": "    *use another submodule",
          "coverage": ""
        },
        "133": {
          "source": "    ",
          "coverage": ""
        },
        "134": {
          "source": "    Luc.addSubmodule('ui', {SomeonesObject: {a:true}});",
          "coverage": ""
        },
        "135": {
          "source": "    Luc.ui.Tooltip;",
          "coverage": ""
        },
        "136": {
          "source": "    &gt;function Tooltip() {}",
          "coverage": ""
        },
        "137": {
          "source": "    Luc.ui.SomeonesObject;",
          "coverage": ""
        },
        "138": {
          "source": "    &gt;{a:true}",
          "coverage": ""
        },
        "139": {
          "source": " */",
          "coverage": ""
        },
        "140": {
          "source": "Luc.addSubmodule = function(namespace, obj) {",
          "coverage": 1
        },
        "141": {
          "source": "    var toAdd;",
          "coverage": 2
        },
        "142": {
          "source": "    if (Luc.alwaysAddSubmodule || isBrowser) {",
          "coverage": 2
        },
        "143": {
          "source": "        toAdd = {};",
          "coverage": 1
        },
        "144": {
          "source": "        toAdd[namespace] = obj;",
          "coverage": 1
        },
        "145": {
          "source": "        Luc.Object.merge(Luc, toAdd);",
          "coverage": 1
        },
        "146": {
          "source": "    }",
          "coverage": ""
        },
        "147": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "object.js",
      "coverage": 97.77777777777777,
      "hits": 44,
      "misses": 1,
      "sloc": 45,
      "source": {
        "1": {
          "source": "var is = require('./is');",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "/**",
          "coverage": ""
        },
        "4": {
          "source": " * @class Luc.Object",
          "coverage": ""
        },
        "5": {
          "source": " * Package for Object methods.  Luc.Object.apply and Luc.Object.each",
          "coverage": ""
        },
        "6": {
          "source": " * are used very often.  mix and apply are aliased to Luc.apply and Luc.mix.",
          "coverage": ""
        },
        "7": {
          "source": " */",
          "coverage": ""
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "/**",
          "coverage": ""
        },
        "10": {
          "source": " * Apply the properties from fromObject to the toObject.  fromObject will",
          "coverage": ""
        },
        "11": {
          "source": " * overwrite any shared keys.  It can also be used as a simple shallow clone.",
          "coverage": ""
        },
        "12": {
          "source": " * ",
          "coverage": ""
        },
        "13": {
          "source": "    var to = {a:1, c:1}, from = {a:2, b:2}",
          "coverage": ""
        },
        "14": {
          "source": "    Luc.Object.apply(to, from)",
          "coverage": ""
        },
        "15": {
          "source": "    &gt;Object {a: 2, c: 1, b: 2}",
          "coverage": ""
        },
        "16": {
          "source": "    to === to",
          "coverage": ""
        },
        "17": {
          "source": "    &gt;true",
          "coverage": ""
        },
        "18": {
          "source": "    var clone = Luc.Object.apply({}, from)",
          "coverage": ""
        },
        "19": {
          "source": "    &gt;undefined",
          "coverage": ""
        },
        "20": {
          "source": "    clone",
          "coverage": ""
        },
        "21": {
          "source": "    &gt;Object {a: 2, b: 2}",
          "coverage": ""
        },
        "22": {
          "source": "    clone === from",
          "coverage": ""
        },
        "23": {
          "source": "    &gt;false",
          "coverage": ""
        },
        "24": {
          "source": " *",
          "coverage": ""
        },
        "25": {
          "source": " * No null checks are needed.",
          "coverage": ""
        },
        "26": {
          "source": "    ",
          "coverage": ""
        },
        "27": {
          "source": "    Luc.apply(undefined, {a:1})",
          "coverage": ""
        },
        "28": {
          "source": "    &gt;{a:1}",
          "coverage": ""
        },
        "29": {
          "source": "    Luc.apply({a: 1})",
          "coverage": ""
        },
        "30": {
          "source": "    &gt;{a:1}",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": " *",
          "coverage": ""
        },
        "33": {
          "source": " * ",
          "coverage": ""
        },
        "34": {
          "source": " * @param  {Object} [toObject] Object to put the properties fromObject on.",
          "coverage": ""
        },
        "35": {
          "source": " * @param  {Object} [fromObject] Object to put the properties on the toObject",
          "coverage": ""
        },
        "36": {
          "source": " * @return {Object} the toObject",
          "coverage": ""
        },
        "37": {
          "source": " */",
          "coverage": ""
        },
        "38": {
          "source": "exports.apply = function(toObject, fromObject) {",
          "coverage": 1
        },
        "39": {
          "source": "    var to = toObject || {},",
          "coverage": 161
        },
        "40": {
          "source": "        from = fromObject || {},",
          "coverage": ""
        },
        "41": {
          "source": "        prop;",
          "coverage": ""
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "    for (prop in from) {",
          "coverage": 161
        },
        "44": {
          "source": "        if (from.hasOwnProperty(prop)) {",
          "coverage": 394
        },
        "45": {
          "source": "            to[prop] = from[prop];",
          "coverage": 394
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "    }",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "    return to;",
          "coverage": 161
        },
        "50": {
          "source": "};",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "/**",
          "coverage": ""
        },
        "53": {
          "source": " * Similar to Luc.Object.apply except that the fromObject will ",
          "coverage": ""
        },
        "54": {
          "source": " * NOT overwrite the keys of the toObject if they are defined.",
          "coverage": ""
        },
        "55": {
          "source": " *",
          "coverage": ""
        },
        "56": {
          "source": "    Luc.mix({a:1,b:2}, {a:3,b:4,c:5})",
          "coverage": ""
        },
        "57": {
          "source": "    &gt;{a: 1, b: 2, c: 5}",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": " * No null checks are needed.",
          "coverage": ""
        },
        "60": {
          "source": "    ",
          "coverage": ""
        },
        "61": {
          "source": "    Luc.mix(undefined, {a:1})",
          "coverage": ""
        },
        "62": {
          "source": "    &gt;{a:1}",
          "coverage": ""
        },
        "63": {
          "source": "    Luc.mix({a: 1})",
          "coverage": ""
        },
        "64": {
          "source": "    &gt;{a:1}",
          "coverage": ""
        },
        "65": {
          "source": "    ",
          "coverage": ""
        },
        "66": {
          "source": " *",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": " * @param  {Object} [toObject] Object to put the properties fromObject on.",
          "coverage": ""
        },
        "69": {
          "source": " * @param  {Object} [fromObject] fromObject Object to put the properties on the toObject",
          "coverage": ""
        },
        "70": {
          "source": " * @return {Object} the toObject",
          "coverage": ""
        },
        "71": {
          "source": " */",
          "coverage": ""
        },
        "72": {
          "source": "exports.mix = function(toObject, fromObject) {",
          "coverage": 1
        },
        "73": {
          "source": "    var to = toObject || {},",
          "coverage": 12
        },
        "74": {
          "source": "        from = fromObject || {},",
          "coverage": ""
        },
        "75": {
          "source": "        prop;",
          "coverage": ""
        },
        "76": {
          "source": "",
          "coverage": ""
        },
        "77": {
          "source": "    for (prop in from) {",
          "coverage": 12
        },
        "78": {
          "source": "        if (from.hasOwnProperty(prop) &amp;&amp; to[prop] === undefined) {",
          "coverage": 45
        },
        "79": {
          "source": "            to[prop] = from[prop];",
          "coverage": 44
        },
        "80": {
          "source": "        }",
          "coverage": ""
        },
        "81": {
          "source": "    }",
          "coverage": ""
        },
        "82": {
          "source": "",
          "coverage": ""
        },
        "83": {
          "source": "    return to;",
          "coverage": 12
        },
        "84": {
          "source": "};",
          "coverage": ""
        },
        "85": {
          "source": "",
          "coverage": ""
        },
        "86": {
          "source": "/**",
          "coverage": ""
        },
        "87": {
          "source": " * Iterate over an objects properties",
          "coverage": ""
        },
        "88": {
          "source": " * as key value \"pairs\" with the passed in function.",
          "coverage": ""
        },
        "89": {
          "source": " * ",
          "coverage": ""
        },
        "90": {
          "source": "    var thisArg = {val:'c'};",
          "coverage": ""
        },
        "91": {
          "source": "    Luc.Object.each({",
          "coverage": ""
        },
        "92": {
          "source": "        u: 'L'",
          "coverage": ""
        },
        "93": {
          "source": "    }, function(key, value) {",
          "coverage": ""
        },
        "94": {
          "source": "        console.log(value + key + this.val)",
          "coverage": ""
        },
        "95": {
          "source": "    }, thisArg)",
          "coverage": ""
        },
        "96": {
          "source": "    ",
          "coverage": ""
        },
        "97": {
          "source": "    &gt;Luc ",
          "coverage": ""
        },
        "98": {
          "source": " ",
          "coverage": ""
        },
        "99": {
          "source": " * @param  {Object}   obj  the object to iterate over",
          "coverage": ""
        },
        "100": {
          "source": " * @param  {Function} fn   the function to call",
          "coverage": ""
        },
        "101": {
          "source": " * @param  {String} fn.key   the object key",
          "coverage": ""
        },
        "102": {
          "source": " * @param  {Object} fn.value   the object value",
          "coverage": ""
        },
        "103": {
          "source": " * @param  {Object}   [thisArg] ",
          "coverage": ""
        },
        "104": {
          "source": " * @param {Object}  [config]",
          "coverage": ""
        },
        "105": {
          "source": " * @param {Boolean}  config.ownProperties set to false",
          "coverage": ""
        },
        "106": {
          "source": " * to iterate over all of the objects enumerable properties.",
          "coverage": ""
        },
        "107": {
          "source": " */",
          "coverage": ""
        },
        "108": {
          "source": "exports.each = function(obj, fn, thisArg, config) {",
          "coverage": 1
        },
        "109": {
          "source": "    var key, value,",
          "coverage": 86
        },
        "110": {
          "source": "        allProperties = config &amp;&amp; config.ownProperties === false;",
          "coverage": ""
        },
        "111": {
          "source": "",
          "coverage": ""
        },
        "112": {
          "source": "    if (allProperties) {",
          "coverage": 86
        },
        "113": {
          "source": "        for (key in obj) {",
          "coverage": 14
        },
        "114": {
          "source": "            fn.call(thisArg, key, obj[key]);",
          "coverage": 68
        },
        "115": {
          "source": "        }",
          "coverage": ""
        },
        "116": {
          "source": "    } else {",
          "coverage": ""
        },
        "117": {
          "source": "        for (key in obj) {",
          "coverage": 72
        },
        "118": {
          "source": "            if (obj.hasOwnProperty(key)) {",
          "coverage": 180
        },
        "119": {
          "source": "                fn.call(thisArg, key, obj[key]);",
          "coverage": 176
        },
        "120": {
          "source": "            }",
          "coverage": ""
        },
        "121": {
          "source": "        }",
          "coverage": ""
        },
        "122": {
          "source": "    }",
          "coverage": ""
        },
        "123": {
          "source": "};",
          "coverage": ""
        },
        "124": {
          "source": "",
          "coverage": ""
        },
        "125": {
          "source": "/**",
          "coverage": ""
        },
        "126": {
          "source": " * Take an array of strings and an array/arguments of",
          "coverage": ""
        },
        "127": {
          "source": " * values and return an object of key value pairs",
          "coverage": ""
        },
        "128": {
          "source": " * based off each arrays index.  It is useful for taking",
          "coverage": ""
        },
        "129": {
          "source": " * a long list of arguments and creating an object that can",
          "coverage": ""
        },
        "130": {
          "source": " * be passed to other methods.",
          "coverage": ""
        },
        "131": {
          "source": " * ",
          "coverage": ""
        },
        "132": {
          "source": "    function longArgs(a,b,c,d,e,f) {",
          "coverage": ""
        },
        "133": {
          "source": "        return Luc.Object.toObject(['a','b', 'c', 'd', 'e', 'f'], arguments)",
          "coverage": ""
        },
        "134": {
          "source": "    }",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "    longArgs(1,2,3,4,5,6,7,8,9)",
          "coverage": ""
        },
        "137": {
          "source": "",
          "coverage": ""
        },
        "138": {
          "source": "    &gt;Object {a: 1, b: 2, c: 3, d: 4, e: 5&#226;&#128;&#166;}",
          "coverage": ""
        },
        "139": {
          "source": "    a: 1",
          "coverage": ""
        },
        "140": {
          "source": "    b: 2",
          "coverage": ""
        },
        "141": {
          "source": "    c: 3",
          "coverage": ""
        },
        "142": {
          "source": "    d: 4",
          "coverage": ""
        },
        "143": {
          "source": "    e: 5",
          "coverage": ""
        },
        "144": {
          "source": "    f: 6",
          "coverage": ""
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "    longArgs(1,2,3)",
          "coverage": ""
        },
        "147": {
          "source": "",
          "coverage": ""
        },
        "148": {
          "source": "    &gt;Object {a: 1, b: 2, c: 3, d: undefined, e: undefined&#226;&#128;&#166;}",
          "coverage": ""
        },
        "149": {
          "source": "    a: 1",
          "coverage": ""
        },
        "150": {
          "source": "    b: 2",
          "coverage": ""
        },
        "151": {
          "source": "    c: 3",
          "coverage": ""
        },
        "152": {
          "source": "    d: undefined",
          "coverage": ""
        },
        "153": {
          "source": "    e: undefined",
          "coverage": ""
        },
        "154": {
          "source": "    f: undefined",
          "coverage": ""
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": " * @param  {String[]} strings",
          "coverage": ""
        },
        "157": {
          "source": " * @param  {Array/arguments} values",
          "coverage": ""
        },
        "158": {
          "source": " * @return {Object}",
          "coverage": ""
        },
        "159": {
          "source": " */",
          "coverage": ""
        },
        "160": {
          "source": "exports.toObject = function(strings, values) {",
          "coverage": 1
        },
        "161": {
          "source": "    var obj = {},",
          "coverage": 2
        },
        "162": {
          "source": "        i = 0,",
          "coverage": ""
        },
        "163": {
          "source": "        len = strings.length;",
          "coverage": ""
        },
        "164": {
          "source": "    for (; i &lt; len; ++i) {",
          "coverage": 2
        },
        "165": {
          "source": "        obj[strings[i]] = values[i];",
          "coverage": 4
        },
        "166": {
          "source": "    }",
          "coverage": ""
        },
        "167": {
          "source": "",
          "coverage": ""
        },
        "168": {
          "source": "    return obj;",
          "coverage": 2
        },
        "169": {
          "source": "};",
          "coverage": ""
        },
        "170": {
          "source": "",
          "coverage": ""
        },
        "171": {
          "source": "/**",
          "coverage": ""
        },
        "172": {
          "source": " * Return key value pairs from the object if the",
          "coverage": ""
        },
        "173": {
          "source": " * filterFn returns a truthy value.",
          "coverage": ""
        },
        "174": {
          "source": " *",
          "coverage": ""
        },
        "175": {
          "source": "    Luc.Object.filter({",
          "coverage": ""
        },
        "176": {
          "source": "        a: false,",
          "coverage": ""
        },
        "177": {
          "source": "        b: true,",
          "coverage": ""
        },
        "178": {
          "source": "        c: false",
          "coverage": ""
        },
        "179": {
          "source": "    }, function(key, value) {",
          "coverage": ""
        },
        "180": {
          "source": "        return key === 'a' || value",
          "coverage": ""
        },
        "181": {
          "source": "    })",
          "coverage": ""
        },
        "182": {
          "source": "    &gt;[{key: 'a', value: false}, {key: 'b', value: true}]",
          "coverage": ""
        },
        "183": {
          "source": "",
          "coverage": ""
        },
        "184": {
          "source": "    Luc.Object.filter({",
          "coverage": ""
        },
        "185": {
          "source": "        a: false,",
          "coverage": ""
        },
        "186": {
          "source": "        b: true,",
          "coverage": ""
        },
        "187": {
          "source": "        c: false",
          "coverage": ""
        },
        "188": {
          "source": "    }, function(key, value) {",
          "coverage": ""
        },
        "189": {
          "source": "        return key === 'a' || value",
          "coverage": ""
        },
        "190": {
          "source": "    }, undefined, {",
          "coverage": ""
        },
        "191": {
          "source": "        keys: true",
          "coverage": ""
        },
        "192": {
          "source": "    })",
          "coverage": ""
        },
        "193": {
          "source": "    &gt;['a', 'b']",
          "coverage": ""
        },
        "194": {
          "source": " * ",
          "coverage": ""
        },
        "195": {
          "source": " * @param  {Object}   obj  the object to iterate over",
          "coverage": ""
        },
        "196": {
          "source": " * @param  {Function} filterFn   the function to call, return a truthy value",
          "coverage": ""
        },
        "197": {
          "source": " * to add the key value pair",
          "coverage": ""
        },
        "198": {
          "source": " * @param  {String} filterFn.key   the object key",
          "coverage": ""
        },
        "199": {
          "source": " * @param  {Object} filterFn.value   the object value",
          "coverage": ""
        },
        "200": {
          "source": " * @param  {Object}   [thisArg] ",
          "coverage": ""
        },
        "201": {
          "source": " * @param {Object}  [config]",
          "coverage": ""
        },
        "202": {
          "source": " * @param {Boolean}  config.ownProperties set to false",
          "coverage": ""
        },
        "203": {
          "source": " * to iterate over all of the objects enumerable properties.",
          "coverage": ""
        },
        "204": {
          "source": " * ",
          "coverage": ""
        },
        "205": {
          "source": " * @param {Boolean}  config.keys set to true to return",
          "coverage": ""
        },
        "206": {
          "source": " * just the keys.",
          "coverage": ""
        },
        "207": {
          "source": " *",
          "coverage": ""
        },
        "208": {
          "source": " * @param {Boolean}  config.values set to true to return",
          "coverage": ""
        },
        "209": {
          "source": " * just the values.",
          "coverage": ""
        },
        "210": {
          "source": " * ",
          "coverage": ""
        },
        "211": {
          "source": " * @return {Object[]/String[]} Array of key value pairs in the form",
          "coverage": ""
        },
        "212": {
          "source": " * of {key: 'key', value: value}.  If keys or values is true on the config",
          "coverage": ""
        },
        "213": {
          "source": " * just the keys or values are returned.",
          "coverage": ""
        },
        "214": {
          "source": " *",
          "coverage": ""
        },
        "215": {
          "source": " */",
          "coverage": ""
        },
        "216": {
          "source": "exports.filter = function(obj, filterFn, thisArg, c) {",
          "coverage": 1
        },
        "217": {
          "source": "    var values = [],",
          "coverage": 16
        },
        "218": {
          "source": "        config = c || {};",
          "coverage": ""
        },
        "219": {
          "source": "",
          "coverage": ""
        },
        "220": {
          "source": "    exports.each(obj, function(key, value) {",
          "coverage": 16
        },
        "221": {
          "source": "        if (filterFn.call(thisArg, key, value)) {",
          "coverage": 70
        },
        "222": {
          "source": "            if (config.keys === true) {",
          "coverage": 49
        },
        "223": {
          "source": "                values.push(key);",
          "coverage": 47
        },
        "224": {
          "source": "            } else if (config.values === true) {",
          "coverage": 2
        },
        "225": {
          "source": "                values.push(value);",
          "coverage": 0
        },
        "226": {
          "source": "            } else {",
          "coverage": ""
        },
        "227": {
          "source": "                values.push({",
          "coverage": 2
        },
        "228": {
          "source": "                    value: value,",
          "coverage": ""
        },
        "229": {
          "source": "                    key: key",
          "coverage": ""
        },
        "230": {
          "source": "                });",
          "coverage": ""
        },
        "231": {
          "source": "            }",
          "coverage": ""
        },
        "232": {
          "source": "        }",
          "coverage": ""
        },
        "233": {
          "source": "    }, thisArg, config);",
          "coverage": ""
        },
        "234": {
          "source": "",
          "coverage": ""
        },
        "235": {
          "source": "    return values;",
          "coverage": 16
        },
        "236": {
          "source": "};",
          "coverage": ""
        },
        "237": {
          "source": "",
          "coverage": ""
        },
        "238": {
          "source": "/**",
          "coverage": ""
        },
        "239": {
          "source": " * Merge the values from object2 into object1.  The values will only be",
          "coverage": ""
        },
        "240": {
          "source": " * merged in if object1's value for the key is null or undefined.  Nested objects",
          "coverage": ""
        },
        "241": {
          "source": " * are handled in the same way.  Array values will not be merged.",
          "coverage": ""
        },
        "242": {
          "source": " * ",
          "coverage": ""
        },
        "243": {
          "source": "    Luc.Object.merge({a: 1}, {b: 2})",
          "coverage": ""
        },
        "244": {
          "source": "    &gt;{a: 1, b: 2}",
          "coverage": ""
        },
        "245": {
          "source": "    ",
          "coverage": ""
        },
        "246": {
          "source": "    Luc.Object.merge({a: {a: 1} }, {b:2, a: {b: 2}})",
          "coverage": ""
        },
        "247": {
          "source": "    &gt;{b: 2, a: {a:1, b:2} }",
          "coverage": ""
        },
        "248": {
          "source": "",
          "coverage": ""
        },
        "249": {
          "source": " * @param  {Object} object1",
          "coverage": ""
        },
        "250": {
          "source": " * @param  {Object} object2",
          "coverage": ""
        },
        "251": {
          "source": " * @return {Object}",
          "coverage": ""
        },
        "252": {
          "source": " */",
          "coverage": ""
        },
        "253": {
          "source": "function merge(obj1, obj2) {",
          "coverage": 1
        },
        "254": {
          "source": "    exports.each(obj2, function(key, value) {",
          "coverage": 13
        },
        "255": {
          "source": "        var obj1Value = obj1[key];",
          "coverage": 17
        },
        "256": {
          "source": "        if (obj1Value == undefined) {",
          "coverage": 17
        },
        "257": {
          "source": "            obj1[key] = value;",
          "coverage": 5
        },
        "258": {
          "source": "        } else if (is.isObject(obj1Value)) {",
          "coverage": 12
        },
        "259": {
          "source": "            merge(obj1[key], obj2[key]);",
          "coverage": 6
        },
        "260": {
          "source": "        }",
          "coverage": ""
        },
        "261": {
          "source": "    });",
          "coverage": ""
        },
        "262": {
          "source": "",
          "coverage": ""
        },
        "263": {
          "source": "    return obj1;",
          "coverage": 13
        },
        "264": {
          "source": "}",
          "coverage": ""
        },
        "265": {
          "source": "",
          "coverage": ""
        },
        "266": {
          "source": "exports.merge = merge;",
          "coverage": 1
        }
      }
    }
  ],
  "stats": {
    "suites": 9,
    "tests": 111,
    "passes": 111,
    "pending": 0,
    "failures": 0,
    "start": "2013-09-11T03:30:30.748Z",
    "end": "2013-09-11T03:30:30.923Z",
    "duration": 175
  },
  "tests": [
    {
      "title": "each",
      "fullTitle": "Luc Array functions each",
      "duration": 1
    },
    {
      "title": "toArray",
      "fullTitle": "Luc Array functions toArray",
      "duration": 2
    },
    {
      "title": "insert append",
      "fullTitle": "Luc Array functions insert append",
      "duration": 1
    },
    {
      "title": "insert from indexes",
      "fullTitle": "Luc Array functions insert from indexes",
      "duration": 5
    },
    {
      "title": "insert arrays are not modified",
      "fullTitle": "Luc Array functions insert arrays are not modified",
      "duration": 0
    },
    {
      "title": "removeAll with single falsy",
      "fullTitle": "Luc Array functions removeAll with single falsy",
      "duration": 1
    },
    {
      "title": "removeAll all values",
      "fullTitle": "Luc Array functions removeAll all values",
      "duration": 2
    },
    {
      "title": "removeAll loose comparison",
      "fullTitle": "Luc Array functions removeAll loose comparison",
      "duration": 1
    },
    {
      "title": "removeAll deep comparison",
      "fullTitle": "Luc Array functions removeAll deep comparison",
      "duration": 1
    },
    {
      "title": "removeAllNot single falsy",
      "fullTitle": "Luc Array functions removeAllNot single falsy",
      "duration": 0
    },
    {
      "title": "removeAllNot no matches",
      "fullTitle": "Luc Array functions removeAllNot no matches",
      "duration": 2
    },
    {
      "title": "removeAllNot single loose compare",
      "fullTitle": "Luc Array functions removeAllNot single loose compare",
      "duration": 0
    },
    {
      "title": "removeFirst first multi array match",
      "fullTitle": "Luc Array functions removeFirst first multi array match",
      "duration": 1
    },
    {
      "title": "removeFirst empty array strict",
      "fullTitle": "Luc Array functions removeFirst empty array strict",
      "duration": 7
    },
    {
      "title": "removeFirst empty array shallow",
      "fullTitle": "Luc Array functions removeFirst empty array shallow",
      "duration": 1
    },
    {
      "title": "removeFirstNot multi array match",
      "fullTitle": "Luc Array functions removeFirstNot multi array match",
      "duration": 1
    },
    {
      "title": "removeFirstNot not matches",
      "fullTitle": "Luc Array functions removeFirstNot not matches",
      "duration": 1
    },
    {
      "title": "removeFirstNot not strict compare",
      "fullTitle": "Luc Array functions removeFirstNot not strict compare",
      "duration": 1
    },
    {
      "title": "findFirst handle loose compare",
      "fullTitle": "Luc Array functions findFirst handle loose compare",
      "duration": 0
    },
    {
      "title": "findFirst strict compare",
      "fullTitle": "Luc Array functions findFirst strict compare",
      "duration": 0
    },
    {
      "title": "findFirst match all props",
      "fullTitle": "Luc Array functions findFirst match all props",
      "duration": 1
    },
    {
      "title": "findFirst all falsys",
      "fullTitle": "Luc Array functions findFirst all falsys",
      "duration": 1
    },
    {
      "title": "findFirst dates",
      "fullTitle": "Luc Array functions findFirst dates",
      "duration": 1
    },
    {
      "title": "findFirst strict and shallow dates",
      "fullTitle": "Luc Array functions findFirst strict and shallow dates",
      "duration": 0
    },
    {
      "title": "findFirstNot matching first key value",
      "fullTitle": "Luc Array functions findFirstNot matching first key value",
      "duration": 1
    },
    {
      "title": "findFirstNot falsys",
      "fullTitle": "Luc Array functions findFirstNot falsys",
      "duration": 1
    },
    {
      "title": "findFirstNot primitives and non-primitives",
      "fullTitle": "Luc Array functions findFirstNot primitives and non-primitives",
      "duration": 0
    },
    {
      "title": "findAll find exact object keys",
      "fullTitle": "Luc Array functions findAll find exact object keys",
      "duration": 2
    },
    {
      "title": "findAll find exact array values",
      "fullTitle": "Luc Array functions findAll find exact array values",
      "duration": 3
    },
    {
      "title": "findAll falsy values",
      "fullTitle": "Luc Array functions findAll falsy values",
      "duration": 1
    },
    {
      "title": "findAll date values",
      "fullTitle": "Luc Array functions findAll date values",
      "duration": 0
    },
    {
      "title": "findAllNot match all keys",
      "fullTitle": "Luc Array functions findAllNot match all keys",
      "duration": 0
    },
    {
      "title": "findAllNot falsy values",
      "fullTitle": "Luc Array functions findAllNot falsy values",
      "duration": 1
    },
    {
      "title": "dynamic findFirstNot",
      "fullTitle": "Luc Array functions dynamic findFirstNot",
      "duration": 1
    },
    {
      "title": "dynamic findAllNot",
      "fullTitle": "Luc Array functions dynamic findAllNot",
      "duration": 1
    },
    {
      "title": "dynamic removeFirstNot",
      "fullTitle": "Luc Array functions dynamic removeFirstNot",
      "duration": 1
    },
    {
      "title": "dynamic removeAllNot",
      "fullTitle": "Luc Array functions dynamic removeAllNot",
      "duration": 4
    },
    {
      "title": "dynamic removeFirst",
      "fullTitle": "Luc Array functions dynamic removeFirst",
      "duration": 1
    },
    {
      "title": "dynamic removeAll",
      "fullTitle": "Luc Array functions dynamic removeAll",
      "duration": 1
    },
    {
      "title": "dynamic removeLastNot",
      "fullTitle": "Luc Array functions dynamic removeLastNot",
      "duration": 1
    },
    {
      "title": "dynamic removeLast",
      "fullTitle": "Luc Array functions dynamic removeLast",
      "duration": 2
    },
    {
      "title": "dynamic findLastNot",
      "fullTitle": "Luc Array functions dynamic findLastNot",
      "duration": 1
    },
    {
      "title": "remove/find with iterator and thisArg",
      "fullTitle": "Luc Array functions remove/find with iterator and thisArg",
      "duration": 1
    },
    {
      "title": "direct function comparison",
      "fullTitle": "Luc Array functions direct function comparison",
      "duration": 0
    },
    {
      "title": "Not remove/find with iterator and thisArg",
      "fullTitle": "Luc Array functions Not remove/find with iterator and thisArg",
      "duration": 0
    },
    {
      "title": "find in",
      "fullTitle": "Luc Array functions find in",
      "duration": 4
    },
    {
      "title": "last",
      "fullTitle": "Luc Array functions last",
      "duration": 0
    },
    {
      "title": "from index",
      "fullTitle": "Luc Array functions from index",
      "duration": 2
    },
    {
      "title": "pluck",
      "fullTitle": "Luc Array functions pluck",
      "duration": 0
    },
    {
      "title": "Base",
      "fullTitle": "Luc Class Base",
      "duration": 1
    },
    {
      "title": "simple define",
      "fullTitle": "Luc Class simple define",
      "duration": 1
    },
    {
      "title": "single mixin",
      "fullTitle": "Luc Class single mixin",
      "duration": 0
    },
    {
      "title": "multiple mixins",
      "fullTitle": "Luc Class multiple mixins",
      "duration": 7
    },
    {
      "title": "statics",
      "fullTitle": "Luc Class statics",
      "duration": 1
    },
    {
      "title": "test get static value",
      "fullTitle": "Luc Class test get static value",
      "duration": 4
    },
    {
      "title": "$class",
      "fullTitle": "Luc Class $class",
      "duration": 1
    },
    {
      "title": "super",
      "fullTitle": "Luc Class super",
      "duration": 2
    },
    {
      "title": "composition",
      "fullTitle": "Luc Class composition",
      "duration": 2
    },
    {
      "title": "all class options together",
      "fullTitle": "Luc Class all class options together",
      "duration": 4
    },
    {
      "title": "class options do not get applied to the instance",
      "fullTitle": "Luc Class class options do not get applied to the instance",
      "duration": 1
    },
    {
      "title": "get composition",
      "fullTitle": "Luc Class get composition",
      "duration": 1
    },
    {
      "title": "initComposition before and after",
      "fullTitle": "Luc Class initComposition before and after",
      "duration": 1
    },
    {
      "title": "test no superclass",
      "fullTitle": "Luc Class test no superclass",
      "duration": 2
    },
    {
      "title": "test composition validation",
      "fullTitle": "Luc Class test composition validation",
      "duration": 1
    },
    {
      "title": "test default plugin composition",
      "fullTitle": "Luc Class test default plugin composition",
      "duration": 2
    },
    {
      "title": "test configured plugin constructors",
      "fullTitle": "Luc Class test configured plugin constructors",
      "duration": 1
    },
    {
      "title": "test default plugin destroy",
      "fullTitle": "Luc Class test default plugin destroy",
      "duration": 1
    },
    {
      "title": "after define",
      "fullTitle": "Luc Class after define",
      "duration": 0
    },
    {
      "title": "callSuperMethod",
      "fullTitle": "Luc Class callSuperMethod callSuperMethod",
      "duration": 3
    },
    {
      "title": "compare empty objects",
      "fullTitle": "Luc compare fn compare empty objects",
      "duration": 1
    },
    {
      "title": "compare values",
      "fullTitle": "Luc compare fn compare values",
      "duration": 1
    },
    {
      "title": "compare different object types",
      "fullTitle": "Luc compare fn compare different object types",
      "duration": 1
    },
    {
      "title": "compare falsys",
      "fullTitle": "Luc compare fn compare falsys",
      "duration": 2
    },
    {
      "title": "deep compare",
      "fullTitle": "Luc compare fn deep compare",
      "duration": 1
    },
    {
      "title": "simple deep and shallow compare",
      "fullTitle": "Luc compare fn simple deep and shallow compare",
      "duration": 1
    },
    {
      "title": "invalid type throws an exception",
      "fullTitle": "Luc compare fn invalid type throws an exception",
      "duration": 1
    },
    {
      "title": "loose compare",
      "fullTitle": "Luc compare fn loose compare",
      "duration": 3
    },
    {
      "title": "create augmentor append and this",
      "fullTitle": "Luc Function utilities create augmentor append and this",
      "duration": 0
    },
    {
      "title": "create augmentor thisArg with append after",
      "fullTitle": "Luc Function utilities create augmentor thisArg with append after",
      "duration": 1
    },
    {
      "title": "create augmentor thisArg index and args after",
      "fullTitle": "Luc Function utilities create augmentor thisArg index and args after",
      "duration": 0
    },
    {
      "title": "create augmentor this arg and default insert args",
      "fullTitle": "Luc Function utilities create augmentor this arg and default insert args",
      "duration": 0
    },
    {
      "title": "create augmentor default insert args",
      "fullTitle": "Luc Function utilities create augmentor default insert args",
      "duration": 0
    },
    {
      "title": "create augmentor just arguments",
      "fullTitle": "Luc Function utilities create augmentor just arguments",
      "duration": 0
    },
    {
      "title": "create sequence",
      "fullTitle": "Luc Function utilities create sequence",
      "duration": 2
    },
    {
      "title": "create sequence augmentor config",
      "fullTitle": "Luc Function utilities create sequence augmentor config",
      "duration": 2
    },
    {
      "title": "create sequenceIf",
      "fullTitle": "Luc Function utilities create sequenceIf",
      "duration": 2
    },
    {
      "title": "create relayer",
      "fullTitle": "Luc Function utilities create relayer",
      "duration": 0
    },
    {
      "title": "create deferred",
      "fullTitle": "Luc Function utilities create deferred",
      "duration": 3
    },
    {
      "title": "create deferred no millis",
      "fullTitle": "Luc Function utilities create deferred no millis",
      "duration": 1
    },
    {
      "title": "create throtteled no millis",
      "fullTitle": "Luc Function utilities create throtteled no millis",
      "duration": 1
    },
    {
      "title": "create throtteled",
      "fullTitle": "Luc Function utilities create throtteled",
      "duration": 6
    },
    {
      "title": "isArray",
      "fullTitle": "Luc is isArray",
      "duration": 0
    },
    {
      "title": "isRegExp",
      "fullTitle": "Luc is isRegExp",
      "duration": 1
    },
    {
      "title": "isDate",
      "fullTitle": "Luc is isDate",
      "duration": 1
    },
    {
      "title": "isString",
      "fullTitle": "Luc is isString",
      "duration": 1
    },
    {
      "title": "isObject",
      "fullTitle": "Luc is isObject",
      "duration": 0
    },
    {
      "title": "isNumber",
      "fullTitle": "Luc is isNumber",
      "duration": 1
    },
    {
      "title": "isFunction",
      "fullTitle": "Luc is isFunction",
      "duration": 1
    },
    {
      "title": "isFalsy",
      "fullTitle": "Luc is isFalsy",
      "duration": 16
    },
    {
      "title": "isEmpty",
      "fullTitle": "Luc is isEmpty",
      "duration": 4
    },
    {
      "title": "isArguments",
      "fullTitle": "Luc is isArguments",
      "duration": 2
    },
    {
      "title": "Emitter",
      "fullTitle": "Luc Node functions Emitter",
      "duration": 1
    },
    {
      "title": "each",
      "fullTitle": "Luc Object functions each",
      "duration": 1
    },
    {
      "title": "apply",
      "fullTitle": "Luc Object functions apply",
      "duration": 2
    },
    {
      "title": "mix",
      "fullTitle": "Luc Object functions mix",
      "duration": 0
    },
    {
      "title": "toObject",
      "fullTitle": "Luc Object functions toObject",
      "duration": 4
    },
    {
      "title": "filter non ownProperties",
      "fullTitle": "Luc Object functions filter non ownProperties",
      "duration": 0
    },
    {
      "title": "filter ownProperties",
      "fullTitle": "Luc Object functions filter ownProperties",
      "duration": 1
    },
    {
      "title": "merge",
      "fullTitle": "Luc Object functions merge",
      "duration": 2
    },
    {
      "title": "module added",
      "fullTitle": "Luc submodule module added",
      "duration": 0
    },
    {
      "title": "alwaysAddSubmodule",
      "fullTitle": "Luc submodule alwaysAddSubmodule",
      "duration": 1
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "each",
      "fullTitle": "Luc Array functions each",
      "duration": 1
    },
    {
      "title": "toArray",
      "fullTitle": "Luc Array functions toArray",
      "duration": 2
    },
    {
      "title": "insert append",
      "fullTitle": "Luc Array functions insert append",
      "duration": 1
    },
    {
      "title": "insert from indexes",
      "fullTitle": "Luc Array functions insert from indexes",
      "duration": 5
    },
    {
      "title": "insert arrays are not modified",
      "fullTitle": "Luc Array functions insert arrays are not modified",
      "duration": 0
    },
    {
      "title": "removeAll with single falsy",
      "fullTitle": "Luc Array functions removeAll with single falsy",
      "duration": 1
    },
    {
      "title": "removeAll all values",
      "fullTitle": "Luc Array functions removeAll all values",
      "duration": 2
    },
    {
      "title": "removeAll loose comparison",
      "fullTitle": "Luc Array functions removeAll loose comparison",
      "duration": 1
    },
    {
      "title": "removeAll deep comparison",
      "fullTitle": "Luc Array functions removeAll deep comparison",
      "duration": 1
    },
    {
      "title": "removeAllNot single falsy",
      "fullTitle": "Luc Array functions removeAllNot single falsy",
      "duration": 0
    },
    {
      "title": "removeAllNot no matches",
      "fullTitle": "Luc Array functions removeAllNot no matches",
      "duration": 2
    },
    {
      "title": "removeAllNot single loose compare",
      "fullTitle": "Luc Array functions removeAllNot single loose compare",
      "duration": 0
    },
    {
      "title": "removeFirst first multi array match",
      "fullTitle": "Luc Array functions removeFirst first multi array match",
      "duration": 1
    },
    {
      "title": "removeFirst empty array strict",
      "fullTitle": "Luc Array functions removeFirst empty array strict",
      "duration": 7
    },
    {
      "title": "removeFirst empty array shallow",
      "fullTitle": "Luc Array functions removeFirst empty array shallow",
      "duration": 1
    },
    {
      "title": "removeFirstNot multi array match",
      "fullTitle": "Luc Array functions removeFirstNot multi array match",
      "duration": 1
    },
    {
      "title": "removeFirstNot not matches",
      "fullTitle": "Luc Array functions removeFirstNot not matches",
      "duration": 1
    },
    {
      "title": "removeFirstNot not strict compare",
      "fullTitle": "Luc Array functions removeFirstNot not strict compare",
      "duration": 1
    },
    {
      "title": "findFirst handle loose compare",
      "fullTitle": "Luc Array functions findFirst handle loose compare",
      "duration": 0
    },
    {
      "title": "findFirst strict compare",
      "fullTitle": "Luc Array functions findFirst strict compare",
      "duration": 0
    },
    {
      "title": "findFirst match all props",
      "fullTitle": "Luc Array functions findFirst match all props",
      "duration": 1
    },
    {
      "title": "findFirst all falsys",
      "fullTitle": "Luc Array functions findFirst all falsys",
      "duration": 1
    },
    {
      "title": "findFirst dates",
      "fullTitle": "Luc Array functions findFirst dates",
      "duration": 1
    },
    {
      "title": "findFirst strict and shallow dates",
      "fullTitle": "Luc Array functions findFirst strict and shallow dates",
      "duration": 0
    },
    {
      "title": "findFirstNot matching first key value",
      "fullTitle": "Luc Array functions findFirstNot matching first key value",
      "duration": 1
    },
    {
      "title": "findFirstNot falsys",
      "fullTitle": "Luc Array functions findFirstNot falsys",
      "duration": 1
    },
    {
      "title": "findFirstNot primitives and non-primitives",
      "fullTitle": "Luc Array functions findFirstNot primitives and non-primitives",
      "duration": 0
    },
    {
      "title": "findAll find exact object keys",
      "fullTitle": "Luc Array functions findAll find exact object keys",
      "duration": 2
    },
    {
      "title": "findAll find exact array values",
      "fullTitle": "Luc Array functions findAll find exact array values",
      "duration": 3
    },
    {
      "title": "findAll falsy values",
      "fullTitle": "Luc Array functions findAll falsy values",
      "duration": 1
    },
    {
      "title": "findAll date values",
      "fullTitle": "Luc Array functions findAll date values",
      "duration": 0
    },
    {
      "title": "findAllNot match all keys",
      "fullTitle": "Luc Array functions findAllNot match all keys",
      "duration": 0
    },
    {
      "title": "findAllNot falsy values",
      "fullTitle": "Luc Array functions findAllNot falsy values",
      "duration": 1
    },
    {
      "title": "dynamic findFirstNot",
      "fullTitle": "Luc Array functions dynamic findFirstNot",
      "duration": 1
    },
    {
      "title": "dynamic findAllNot",
      "fullTitle": "Luc Array functions dynamic findAllNot",
      "duration": 1
    },
    {
      "title": "dynamic removeFirstNot",
      "fullTitle": "Luc Array functions dynamic removeFirstNot",
      "duration": 1
    },
    {
      "title": "dynamic removeAllNot",
      "fullTitle": "Luc Array functions dynamic removeAllNot",
      "duration": 4
    },
    {
      "title": "dynamic removeFirst",
      "fullTitle": "Luc Array functions dynamic removeFirst",
      "duration": 1
    },
    {
      "title": "dynamic removeAll",
      "fullTitle": "Luc Array functions dynamic removeAll",
      "duration": 1
    },
    {
      "title": "dynamic removeLastNot",
      "fullTitle": "Luc Array functions dynamic removeLastNot",
      "duration": 1
    },
    {
      "title": "dynamic removeLast",
      "fullTitle": "Luc Array functions dynamic removeLast",
      "duration": 2
    },
    {
      "title": "dynamic findLastNot",
      "fullTitle": "Luc Array functions dynamic findLastNot",
      "duration": 1
    },
    {
      "title": "remove/find with iterator and thisArg",
      "fullTitle": "Luc Array functions remove/find with iterator and thisArg",
      "duration": 1
    },
    {
      "title": "direct function comparison",
      "fullTitle": "Luc Array functions direct function comparison",
      "duration": 0
    },
    {
      "title": "Not remove/find with iterator and thisArg",
      "fullTitle": "Luc Array functions Not remove/find with iterator and thisArg",
      "duration": 0
    },
    {
      "title": "find in",
      "fullTitle": "Luc Array functions find in",
      "duration": 4
    },
    {
      "title": "last",
      "fullTitle": "Luc Array functions last",
      "duration": 0
    },
    {
      "title": "from index",
      "fullTitle": "Luc Array functions from index",
      "duration": 2
    },
    {
      "title": "pluck",
      "fullTitle": "Luc Array functions pluck",
      "duration": 0
    },
    {
      "title": "Base",
      "fullTitle": "Luc Class Base",
      "duration": 1
    },
    {
      "title": "simple define",
      "fullTitle": "Luc Class simple define",
      "duration": 1
    },
    {
      "title": "single mixin",
      "fullTitle": "Luc Class single mixin",
      "duration": 0
    },
    {
      "title": "multiple mixins",
      "fullTitle": "Luc Class multiple mixins",
      "duration": 7
    },
    {
      "title": "statics",
      "fullTitle": "Luc Class statics",
      "duration": 1
    },
    {
      "title": "test get static value",
      "fullTitle": "Luc Class test get static value",
      "duration": 4
    },
    {
      "title": "$class",
      "fullTitle": "Luc Class $class",
      "duration": 1
    },
    {
      "title": "super",
      "fullTitle": "Luc Class super",
      "duration": 2
    },
    {
      "title": "composition",
      "fullTitle": "Luc Class composition",
      "duration": 2
    },
    {
      "title": "all class options together",
      "fullTitle": "Luc Class all class options together",
      "duration": 4
    },
    {
      "title": "class options do not get applied to the instance",
      "fullTitle": "Luc Class class options do not get applied to the instance",
      "duration": 1
    },
    {
      "title": "get composition",
      "fullTitle": "Luc Class get composition",
      "duration": 1
    },
    {
      "title": "initComposition before and after",
      "fullTitle": "Luc Class initComposition before and after",
      "duration": 1
    },
    {
      "title": "test no superclass",
      "fullTitle": "Luc Class test no superclass",
      "duration": 2
    },
    {
      "title": "test composition validation",
      "fullTitle": "Luc Class test composition validation",
      "duration": 1
    },
    {
      "title": "test default plugin composition",
      "fullTitle": "Luc Class test default plugin composition",
      "duration": 2
    },
    {
      "title": "test configured plugin constructors",
      "fullTitle": "Luc Class test configured plugin constructors",
      "duration": 1
    },
    {
      "title": "test default plugin destroy",
      "fullTitle": "Luc Class test default plugin destroy",
      "duration": 1
    },
    {
      "title": "after define",
      "fullTitle": "Luc Class after define",
      "duration": 0
    },
    {
      "title": "callSuperMethod",
      "fullTitle": "Luc Class callSuperMethod callSuperMethod",
      "duration": 3
    },
    {
      "title": "compare empty objects",
      "fullTitle": "Luc compare fn compare empty objects",
      "duration": 1
    },
    {
      "title": "compare values",
      "fullTitle": "Luc compare fn compare values",
      "duration": 1
    },
    {
      "title": "compare different object types",
      "fullTitle": "Luc compare fn compare different object types",
      "duration": 1
    },
    {
      "title": "compare falsys",
      "fullTitle": "Luc compare fn compare falsys",
      "duration": 2
    },
    {
      "title": "deep compare",
      "fullTitle": "Luc compare fn deep compare",
      "duration": 1
    },
    {
      "title": "simple deep and shallow compare",
      "fullTitle": "Luc compare fn simple deep and shallow compare",
      "duration": 1
    },
    {
      "title": "invalid type throws an exception",
      "fullTitle": "Luc compare fn invalid type throws an exception",
      "duration": 1
    },
    {
      "title": "loose compare",
      "fullTitle": "Luc compare fn loose compare",
      "duration": 3
    },
    {
      "title": "create augmentor append and this",
      "fullTitle": "Luc Function utilities create augmentor append and this",
      "duration": 0
    },
    {
      "title": "create augmentor thisArg with append after",
      "fullTitle": "Luc Function utilities create augmentor thisArg with append after",
      "duration": 1
    },
    {
      "title": "create augmentor thisArg index and args after",
      "fullTitle": "Luc Function utilities create augmentor thisArg index and args after",
      "duration": 0
    },
    {
      "title": "create augmentor this arg and default insert args",
      "fullTitle": "Luc Function utilities create augmentor this arg and default insert args",
      "duration": 0
    },
    {
      "title": "create augmentor default insert args",
      "fullTitle": "Luc Function utilities create augmentor default insert args",
      "duration": 0
    },
    {
      "title": "create augmentor just arguments",
      "fullTitle": "Luc Function utilities create augmentor just arguments",
      "duration": 0
    },
    {
      "title": "create sequence",
      "fullTitle": "Luc Function utilities create sequence",
      "duration": 2
    },
    {
      "title": "create sequence augmentor config",
      "fullTitle": "Luc Function utilities create sequence augmentor config",
      "duration": 2
    },
    {
      "title": "create sequenceIf",
      "fullTitle": "Luc Function utilities create sequenceIf",
      "duration": 2
    },
    {
      "title": "create relayer",
      "fullTitle": "Luc Function utilities create relayer",
      "duration": 0
    },
    {
      "title": "create deferred",
      "fullTitle": "Luc Function utilities create deferred",
      "duration": 3
    },
    {
      "title": "create deferred no millis",
      "fullTitle": "Luc Function utilities create deferred no millis",
      "duration": 1
    },
    {
      "title": "create throtteled no millis",
      "fullTitle": "Luc Function utilities create throtteled no millis",
      "duration": 1
    },
    {
      "title": "create throtteled",
      "fullTitle": "Luc Function utilities create throtteled",
      "duration": 6
    },
    {
      "title": "isArray",
      "fullTitle": "Luc is isArray",
      "duration": 0
    },
    {
      "title": "isRegExp",
      "fullTitle": "Luc is isRegExp",
      "duration": 1
    },
    {
      "title": "isDate",
      "fullTitle": "Luc is isDate",
      "duration": 1
    },
    {
      "title": "isString",
      "fullTitle": "Luc is isString",
      "duration": 1
    },
    {
      "title": "isObject",
      "fullTitle": "Luc is isObject",
      "duration": 0
    },
    {
      "title": "isNumber",
      "fullTitle": "Luc is isNumber",
      "duration": 1
    },
    {
      "title": "isFunction",
      "fullTitle": "Luc is isFunction",
      "duration": 1
    },
    {
      "title": "isFalsy",
      "fullTitle": "Luc is isFalsy",
      "duration": 16
    },
    {
      "title": "isEmpty",
      "fullTitle": "Luc is isEmpty",
      "duration": 4
    },
    {
      "title": "isArguments",
      "fullTitle": "Luc is isArguments",
      "duration": 2
    },
    {
      "title": "Emitter",
      "fullTitle": "Luc Node functions Emitter",
      "duration": 1
    },
    {
      "title": "each",
      "fullTitle": "Luc Object functions each",
      "duration": 1
    },
    {
      "title": "apply",
      "fullTitle": "Luc Object functions apply",
      "duration": 2
    },
    {
      "title": "mix",
      "fullTitle": "Luc Object functions mix",
      "duration": 0
    },
    {
      "title": "toObject",
      "fullTitle": "Luc Object functions toObject",
      "duration": 4
    },
    {
      "title": "filter non ownProperties",
      "fullTitle": "Luc Object functions filter non ownProperties",
      "duration": 0
    },
    {
      "title": "filter ownProperties",
      "fullTitle": "Luc Object functions filter ownProperties",
      "duration": 1
    },
    {
      "title": "merge",
      "fullTitle": "Luc Object functions merge",
      "duration": 2
    },
    {
      "title": "module added",
      "fullTitle": "Luc submodule module added",
      "duration": 0
    },
    {
      "title": "alwaysAddSubmodule",
      "fullTitle": "Luc submodule alwaysAddSubmodule",
      "duration": 1
    }
  ]
}