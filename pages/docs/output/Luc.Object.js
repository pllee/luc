Ext.data.JsonP.Luc_Object({"tagname":"class","name":"Luc.Object","autodetected":{},"files":[{"filename":"object.js","href":"object.html#Luc-Object"}],"members":[{"name":"apply","tagname":"method","owner":"Luc.Object","id":"method-apply","meta":{}},{"name":"each","tagname":"method","owner":"Luc.Object","id":"method-each","meta":{}},{"name":"filter","tagname":"method","owner":"Luc.Object","id":"method-filter","meta":{}},{"name":"merge","tagname":"method","owner":"Luc.Object","id":"method-merge","meta":{}},{"name":"mix","tagname":"method","owner":"Luc.Object","id":"method-mix","meta":{}},{"name":"toObject","tagname":"method","owner":"Luc.Object","id":"method-toObject","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Luc.Object","short_doc":"Package for Object methods. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/object.html#Luc-Object' target='_blank'>object.js</a></div></pre><div class='doc-contents'><p>Package for Object methods.  <a href=\"#!/api/Luc.Object-method-apply\" rel=\"Luc.Object-method-apply\" class=\"docClass\">Luc.Object.apply</a> and <a href=\"#!/api/Luc.Object-method-each\" rel=\"Luc.Object-method-each\" class=\"docClass\">Luc.Object.each</a>\nare used very often.  mix and apply are aliased to <a href=\"#!/api/Luc-method-apply\" rel=\"Luc-method-apply\" class=\"docClass\">Luc.apply</a> and <a href=\"#!/api/Luc-method-mix\" rel=\"Luc-method-mix\" class=\"docClass\">Luc.mix</a>.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-apply' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-apply' class='name expandable'>apply</a>( <span class='pre'>[toObject], [fromObject]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Apply the properties from fromObject to the toObject. ...</div><div class='long'><p>Apply the properties from fromObject to the toObject.  fromObject will\noverwrite any shared keys.  It can also be used as a simple shallow clone.</p>\n\n<pre><code>var to = {a:1, c:1}, from = {a:2, b:2}\n<a href=\"#!/api/Luc.Object-method-apply\" rel=\"Luc.Object-method-apply\" class=\"docClass\">Luc.Object.apply</a>(to, from)\n&gt;Object {a: 2, c: 1, b: 2}\nto === to\n&gt;true\nvar clone = <a href=\"#!/api/Luc.Object-method-apply\" rel=\"Luc.Object-method-apply\" class=\"docClass\">Luc.Object.apply</a>({}, from)\n&gt;undefined\nclone\n&gt;Object {a: 2, b: 2}\nclone === from\n&gt;false\n</code></pre>\n\n<p>No null checks are needed.</p>\n\n<pre><code><a href=\"#!/api/Luc-method-apply\" rel=\"Luc-method-apply\" class=\"docClass\">Luc.apply</a>(undefined, {a:1})\n&gt;{a:1}\n<a href=\"#!/api/Luc-method-apply\" rel=\"Luc-method-apply\" class=\"docClass\">Luc.apply</a>({a: 1})\n&gt;{a:1}\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>toObject</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Object to put the properties fromObject on.</p>\n</div></li><li><span class='pre'>fromObject</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Object to put the properties on the toObject</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the toObject</p>\n</div></li></ul></div></div></div><div id='method-each' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-each' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-each' class='name expandable'>each</a>( <span class='pre'>obj, fn, [thisArg], [config]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Iterate over an objects properties\nas key value \"pairs\" with the passed in function. ...</div><div class='long'><p>Iterate over an objects properties\nas key value \"pairs\" with the passed in function.</p>\n\n<pre><code>var thisArg = {val:'c'};\n<a href=\"#!/api/Luc.Object-method-each\" rel=\"Luc.Object-method-each\" class=\"docClass\">Luc.Object.each</a>({\n    u: 'L'\n}, function(key, value) {\n    console.log(value + key + this.val)\n}, thisArg)\n\n&gt;Luc\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>the object to iterate over</p>\n</div></li><li><span class='pre'>fn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>the function to call</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>the object key</p>\n</div></li><li><span class='pre'>value</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>the object value</p>\n</div></li></ul></div></li><li><span class='pre'>thisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'>\n</div></li><li><span class='pre'>config</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'>\n<ul><li><span class='pre'>ownProperties</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>set to false\nto iterate over all of the objects enumerable properties.</p>\n</div></li></ul></div></li></ul></div></div></div><div id='method-filter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-filter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-filter' class='name expandable'>filter</a>( <span class='pre'>obj, filterFn, [thisArg], [config]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>[]/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]<span class=\"signature\"></span></div><div class='description'><div class='short'>Return key value pairs from the object if the\nfilterFn returns a truthy value. ...</div><div class='long'><p>Return key value pairs from the object if the\nfilterFn returns a truthy value.</p>\n\n<pre><code><a href=\"#!/api/Luc.Object-method-filter\" rel=\"Luc.Object-method-filter\" class=\"docClass\">Luc.Object.filter</a>({\n    a: false,\n    b: true,\n    c: false\n}, function(key, value) {\n    return key === 'a' || value\n})\n&gt;[{key: 'a', value: false}, {key: 'b', value: true}]\n\n<a href=\"#!/api/Luc.Object-method-filter\" rel=\"Luc.Object-method-filter\" class=\"docClass\">Luc.Object.filter</a>({\n    a: false,\n    b: true,\n    c: false\n}, function(key, value) {\n    return key === 'a' || value\n}, undefined, {\n    keys: true\n})\n&gt;['a', 'b']\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>the object to iterate over</p>\n</div></li><li><span class='pre'>filterFn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>the function to call, return a truthy value\nto add the key value pair</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>the object key</p>\n</div></li><li><span class='pre'>value</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>the object value</p>\n</div></li></ul></div></li><li><span class='pre'>thisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'>\n</div></li><li><span class='pre'>config</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'>\n<ul><li><span class='pre'>ownProperties</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>set to false\nto iterate over all of the objects enumerable properties.</p>\n</div></li><li><span class='pre'>keys</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>set to true to return\njust the keys.</p>\n</div></li><li><span class='pre'>values</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>set to true to return\njust the values.</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>[]/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]</span><div class='sub-desc'><p>Array of key value pairs in the form\nof {key: 'key', value: value}.  If keys or values is true on the config\njust the keys or values are returned.</p>\n</div></li></ul></div></div></div><div id='method-merge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-merge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-merge' class='name expandable'>merge</a>( <span class='pre'>object1, object2</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Merge the values from object2 into object1. ...</div><div class='long'><p>Merge the values from object2 into object1.  The values will only be\nmerged in if object1's value for the key is null or undefined.  Nested objects\nare handled in the same way.  Array values will not be merged.</p>\n\n<pre><code><a href=\"#!/api/Luc.Object-method-merge\" rel=\"Luc.Object-method-merge\" class=\"docClass\">Luc.Object.merge</a>({a: 1}, {b: 2})\n&gt;{a: 1, b: 2}\n\n<a href=\"#!/api/Luc.Object-method-merge\" rel=\"Luc.Object-method-merge\" class=\"docClass\">Luc.Object.merge</a>({a: {a: 1} }, {b:2, a: {b: 2}})\n&gt;{b: 2, a: {a:1, b:2} }\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object1</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li><li><span class='pre'>object2</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-mix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-mix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-mix' class='name expandable'>mix</a>( <span class='pre'>[toObject], [fromObject]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Similar to Luc.Object.apply except that the fromObject will\nNOT overwrite the keys of the toObject if they are defined. ...</div><div class='long'><p>Similar to <a href=\"#!/api/Luc.Object-method-apply\" rel=\"Luc.Object-method-apply\" class=\"docClass\">Luc.Object.apply</a> except that the fromObject will\nNOT overwrite the keys of the toObject if they are defined.</p>\n\n<pre><code><a href=\"#!/api/Luc-method-mix\" rel=\"Luc-method-mix\" class=\"docClass\">Luc.mix</a>({a:1,b:2}, {a:3,b:4,c:5})\n&gt;{a: 1, b: 2, c: 5}\n</code></pre>\n\n<p>No null checks are needed.</p>\n\n<pre><code><a href=\"#!/api/Luc-method-mix\" rel=\"Luc-method-mix\" class=\"docClass\">Luc.mix</a>(undefined, {a:1})\n&gt;{a:1}\n<a href=\"#!/api/Luc-method-mix\" rel=\"Luc-method-mix\" class=\"docClass\">Luc.mix</a>({a: 1})\n&gt;{a:1}\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>toObject</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>Object to put the properties fromObject on.</p>\n</div></li><li><span class='pre'>fromObject</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>fromObject Object to put the properties on the toObject</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the toObject</p>\n</div></li></ul></div></div></div><div id='method-toObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Object'>Luc.Object</span><br/><a href='source/object.html#Luc-Object-method-toObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Object-method-toObject' class='name expandable'>toObject</a>( <span class='pre'>strings, values</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Take an array of strings and an array/arguments of\nvalues and return an object of key value pairs\nbased off each arra...</div><div class='long'><p>Take an array of strings and an array/arguments of\nvalues and return an object of key value pairs\nbased off each arrays index.  It is useful for taking\na long list of arguments and creating an object that can\nbe passed to other methods.</p>\n\n<pre><code>function longArgs(a,b,c,d,e,f) {\n    return <a href=\"#!/api/Luc.Object-method-toObject\" rel=\"Luc.Object-method-toObject\" class=\"docClass\">Luc.Object.toObject</a>(['a','b', 'c', 'd', 'e', 'f'], arguments)\n}\n\nlongArgs(1,2,3,4,5,6,7,8,9)\n\n&gt;Object {a: 1, b: 2, c: 3, d: 4, e: 5…}\na: 1\nb: 2\nc: 3\nd: 4\ne: 5\nf: 6\n\nlongArgs(1,2,3)\n\n&gt;Object {a: 1, b: 2, c: 3, d: undefined, e: undefined…}\na: 1\nb: 2\nc: 3\nd: undefined\ne: undefined\nf: undefined\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>strings</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]<div class='sub-desc'>\n</div></li><li><span class='pre'>values</span> : Array/arguments<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});