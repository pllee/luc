Ext.data.JsonP.Luc_Array({"tagname":"class","name":"Luc.Array","autodetected":{},"files":[{"filename":"array.js","href":"array.html#Luc-Array"}],"members":[{"name":"each","tagname":"method","owner":"Luc.Array","id":"method-each","meta":{}},{"name":"findAll","tagname":"method","owner":"Luc.Array","id":"method-findAll","meta":{}},{"name":"findAllNot","tagname":"method","owner":"Luc.Array","id":"method-findAllNot","meta":{}},{"name":"findFirst","tagname":"method","owner":"Luc.Array","id":"method-findFirst","meta":{}},{"name":"findFirstNot","tagname":"method","owner":"Luc.Array","id":"method-findFirstNot","meta":{}},{"name":"findLast","tagname":"method","owner":"Luc.Array","id":"method-findLast","meta":{}},{"name":"findLastNot","tagname":"method","owner":"Luc.Array","id":"method-findLastNot","meta":{}},{"name":"fromIndex","tagname":"method","owner":"Luc.Array","id":"method-fromIndex","meta":{}},{"name":"insert","tagname":"method","owner":"Luc.Array","id":"method-insert","meta":{}},{"name":"last","tagname":"method","owner":"Luc.Array","id":"method-last","meta":{}},{"name":"pluck","tagname":"method","owner":"Luc.Array","id":"method-pluck","meta":{}},{"name":"removeAll","tagname":"method","owner":"Luc.Array","id":"method-removeAll","meta":{}},{"name":"removeAllNot","tagname":"method","owner":"Luc.Array","id":"method-removeAllNot","meta":{}},{"name":"removeAtIndex","tagname":"method","owner":"Luc.Array","id":"method-removeAtIndex","meta":{}},{"name":"removeFirst","tagname":"method","owner":"Luc.Array","id":"method-removeFirst","meta":{}},{"name":"removeFirstNot","tagname":"method","owner":"Luc.Array","id":"method-removeFirstNot","meta":{}},{"name":"removeLast","tagname":"method","owner":"Luc.Array","id":"method-removeLast","meta":{}},{"name":"removeLastNot","tagname":"method","owner":"Luc.Array","id":"method-removeLastNot","meta":{}},{"name":"toArray","tagname":"method","owner":"Luc.Array","id":"method-toArray","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Luc.Array","short_doc":"Package for Array methods. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/array.html#Luc-Array' target='_blank'>array.js</a></div></pre><div class='doc-contents'><p>Package for Array methods. <br></p>\n\n<p>Keep in mind that Luc is optionally packaged with es5 shim so you can write es5 code in non es5 browsers.\nIt comes with your favorite <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a> methods such as <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>, <a href=\"#!/api/Array-method-filter\" rel=\"Array-method-filter\" class=\"docClass\">Array.filter</a>, <a href=\"#!/api/Array-method-some\" rel=\"Array-method-some\" class=\"docClass\">Array.some</a>, <a href=\"#!/api/Array-method-every\" rel=\"Array-method-every\" class=\"docClass\">Array.every</a> <a href=\"#!/api/Array-method-reduceRight\" rel=\"Array-method-reduceRight\" class=\"docClass\">Array.reduceRight</a> ..</p>\n\n<p>Also don't forget about <a href=\"#!/api/Luc.Array-method-each\" rel=\"Luc.Array-method-each\" class=\"docClass\">Luc.Array.each</a> and <a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a>, they are great utility methods\nthat are used all over the framework.</p>\n\n<p>All remove* / find* methods follow the same api.  *All functions will return an array of removed or found\nitems.  The items will be added to the array in the order they are\nfound.  *First functions will return the first item and stop iterating after that, if none\n is found false is returned.  remove* functions will directly change the passed in array.\n *Not functions only do the following actions if the comparison is not true.\n All remove* / find* take the following api: array, objectToCompareOrIterator, compareConfigOrThisArg <br>for example:</p>\n\n<pre><code>//most common use case\n<a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {}], {});\n&gt;Object {}\n\n//pass in optional config for a strict === comparison\n<a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3,{}], {}, {type: 'strict'});\n&gt;false\n\n//pass in an iterator and thisArg\n<a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3,{}], function(val, index, array){\n    return val === 3 || this.num === val;\n}, {num: 1});\n&gt;1\n\n//you can see remove modifies the passed in array.\nvar arr = [1,2,{a:1},1, {a:1}];\n<a href=\"#!/api/Luc.Array-method-removeFirst\" rel=\"Luc.Array-method-removeFirst\" class=\"docClass\">Luc.Array.removeFirst</a>(arr, {a:1})\n&gt;{a:1}\narr;\n&gt;[1, 2, 1, {a:1}]\n<a href=\"#!/api/Luc.Array-method-removeLast\" rel=\"Luc.Array-method-removeLast\" class=\"docClass\">Luc.Array.removeLast</a>(arr, 1)\n&gt;1\narr;\n&gt;[1,2, {a:1}]\n\n\n<a href=\"#!/api/Luc.Array-method-findAll\" rel=\"Luc.Array-method-findAll\" class=\"docClass\">Luc.Array.findAll</a>([1,2,3, {a:1,b:2}], function() {return true;})\n&gt; [1,2,3, {a:1,b:2}]\n//show how not works with an iterator\n<a href=\"#!/api/Luc.Array-method-findAllNot\" rel=\"Luc.Array-method-findAllNot\" class=\"docClass\">Luc.Array.findAllNot</a>([1,2,3, {a:1,b:2}], function() {return true;})\n&gt;[]\n</code></pre>\n\n<p>For commonly used find/remove functions check out <a href=\"#!/api/Luc.ArrayFns\" rel=\"Luc.ArrayFns\" class=\"docClass\">Luc.ArrayFns</a> for example a\n\"compact\" like function</p>\n\n<pre><code>Luc.Array.findAllNotFalsy([false, '', undefined, 0, {}, []])\n&gt;[0, {}, []]\n</code></pre>\n\n<p>Or remove all empty items</p>\n\n<pre><code>var arr = ['', 0 , [], {a:1}, true, {}, [1]]\nLuc.Array.removeAllEmpty(arr)\n&gt;['', [], {}]\narr\n&gt;[0, {a:1}, true, [1]]\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-each' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-each' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-each' class='name expandable'>each</a>( <span class='pre'>item, callback, thisArg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Runs an Array.forEach after calling Luc.Array.toArray on the item. ...</div><div class='long'><p>Runs an <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a> after calling <a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a> on the item.\n  It is very useful for setting up flexible api's that can handle none one or many.</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-each\" rel=\"Luc.Array-method-each\" class=\"docClass\">Luc.Array.each</a>(this.items, function(item) {\n    this._addItem(item);\n});\n\nvs.\n\nif(<a href=\"#!/api/Array-static-method-isArray\" rel=\"Array-static-method-isArray\" class=\"docClass\">Array.isArray</a>(this.items)){\n    this.items.forEach(function(item) {\n        this._addItem(item);\n    })\n}\nelse if(this.items !== undefined) {\n    this._addItem(this.items);\n}\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'>\n</div></li><li><span class='pre'>thisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-findAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findAll' class='name expandable'>findAll</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Find all of the the items from the passed in array\nthat matches the passed in object. ...</div><div class='long'><p>Find all of the the items from the passed in array\nthat <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">matches</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>an array of items found</p>\n</div></li></ul></div></div></div><div id='method-findAllNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findAllNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findAllNot' class='name expandable'>findAllNot</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Find all of the the items from the passed in array\nthat do not match the passed in object. ...</div><div class='long'><p>Find all of the the items from the passed in array\nthat do not <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">match</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>an array of items found</p>\n</div></li></ul></div></div></div><div id='method-findFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findFirst' class='name expandable'>findFirst</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Find the first item from the passed in array\nthat does matches the passed in object. ...</div><div class='long'><p>Find the first item from the passed in array\nthat does <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">matches</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the object that was found\nfalse if no object was found;</p>\n</div></li></ul></div></div></div><div id='method-findFirstNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findFirstNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findFirstNot' class='name expandable'>findFirstNot</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Find the first item from the passed in array\nthat does not match the passed in object. ...</div><div class='long'><p>Find the first item from the passed in array\nthat does not <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">match</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the object that was found\nfalse if no object was found;</p>\n</div></li></ul></div></div></div><div id='method-findLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findLast' class='name expandable'>findLast</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as Luc.Array.findFirst except start at the end. ...</div><div class='long'><p>Same as <a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a> except start at the end.</p>\n</div></div></div><div id='method-findLastNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-findLastNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-findLastNot' class='name expandable'>findLastNot</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as Luc.Array.findFirstNot except start at the end. ...</div><div class='long'><p>Same as <a href=\"#!/api/Luc.Array-method-findFirstNot\" rel=\"Luc.Array-method-findFirstNot\" class=\"docClass\">Luc.Array.findFirstNot</a> except start at the end.</p>\n</div></div></div><div id='method-fromIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-fromIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-fromIndex' class='name expandable'>fromIndex</a>( <span class='pre'>arr, index</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Return the items in between the passed in index\nand the end of the array. ...</div><div class='long'><p>Return the items in between the passed in index\nand the end of the array.</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-fromIndex\" rel=\"Luc.Array-method-fromIndex\" class=\"docClass\">Luc.Array.fromIndex</a>([1,2,3,4,5], 1)\n&gt;[2, 3, 4, 5]\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : Array/arguments<div class='sub-desc'>\n</div></li><li><span class='pre'>index</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>the new array.</p>\n</div></li></ul></div></div></div><div id='method-insert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-insert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-insert' class='name expandable'>insert</a>( <span class='pre'>firstArrayOrArgs, secondArrayOrArgs, indexOrAppend</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Insert or append the second array/arguments into the\nfirst array/arguments. ...</div><div class='long'><p>Insert or append the second array/arguments into the\nfirst array/arguments.  This method does not alter\nthe passed in array/arguments.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>firstArrayOrArgs</span> : Array/arguments<div class='sub-desc'>\n</div></li><li><span class='pre'>secondArrayOrArgs</span> : Array/arguments<div class='sub-desc'>\n</div></li><li><span class='pre'>indexOrAppend</span> : Number/true<div class='sub-desc'><p>true to append\nthe second array to the end of the first one.  If it is a number\ninsert the secondArray into the first one at the passed in index.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>the newly created array.</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-insert\" rel=\"Luc.Array-method-insert\" class=\"docClass\">Luc.Array.insert</a>([0,4], [1,2,3], 1);\n&gt;[0, 1, 2, 3, 4]\n<a href=\"#!/api/Luc.Array-method-insert\" rel=\"Luc.Array-method-insert\" class=\"docClass\">Luc.Array.insert</a>([0,4], [1,2,3], true);\n&gt;[0, 4, 1, 2, 3]\n<a href=\"#!/api/Luc.Array-method-insert\" rel=\"Luc.Array-method-insert\" class=\"docClass\">Luc.Array.insert</a>([0,4], [1,2,3], 0);\n&gt;[1, 2, 3, 0, 4]\n</code></pre>\n</div></li></ul></div></div></div><div id='method-last' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-last' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-last' class='name expandable'>last</a>( <span class='pre'>arr</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Return the last item of the array ...</div><div class='long'><p>Return the last item of the array</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the item</p>\n\n<pre><code>var myLongArrayNameForThingsThatIWantToKeepTrackOf = [1,2,3]\n\n<a href=\"#!/api/Luc.Array-method-last\" rel=\"Luc.Array-method-last\" class=\"docClass\">Luc.Array.last</a>(myLongArrayNameForThingsThatIWantToKeepTrackOf);\nvs.\nmyLongArrayNameForThingsThatIWantToKeepTrackOf[myLongArrayNameForThingsThatIWantToKeepTrackOf.length -1]\n</code></pre>\n</div></li></ul></div></div></div><div id='method-pluck' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-pluck' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-pluck' class='name expandable'>pluck</a>( <span class='pre'>arr, key</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Flatten out an array of objects based of their value for the passed in key. ...</div><div class='long'><p>Flatten out an array of objects based of their value for the passed in key.\nThis also takes account for null/undefined values.</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-pluck\" rel=\"Luc.Array-method-pluck\" class=\"docClass\">Luc.Array.pluck</a>([undefined, {a:'1', b:2}, {b:3}, {b:4}], 'b')\n&gt;[undefined, 2, 3, 4]\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>[]<div class='sub-desc'>\n</div></li><li><span class='pre'>key</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-removeAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeAll' class='name expandable'>removeAll</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Remove the all the items from the passed in array\nthat matches the passed in object. ...</div><div class='long'><p>Remove the all the items from the passed in array\nthat <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">matches</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>an array of items removed</p>\n</div></li></ul></div></div></div><div id='method-removeAllNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeAllNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeAllNot' class='name expandable'>removeAllNot</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Remove the all the items from the passed in array\nthat do not match the passed in object. ...</div><div class='long'><p>Remove the all the items from the passed in array\nthat do not <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">match</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>an array of items removed</p>\n</div></li></ul></div></div></div><div id='method-removeAtIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeAtIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeAtIndex' class='name expandable'>removeAtIndex</a>( <span class='pre'>arr, index</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Remove an item from the passed in arr\nfrom the index. ...</div><div class='long'><p>Remove an item from the passed in arr\nfrom the index.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>index</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the item removed.</p>\n\n<pre><code>var arr = [1,2,3];\n<a href=\"#!/api/Luc.Array-method-removeAtIndex\" rel=\"Luc.Array-method-removeAtIndex\" class=\"docClass\">Luc.Array.removeAtIndex</a>(arr, 1);\n&gt;2\narr;\n&gt;[1,3]\n</code></pre>\n</div></li></ul></div></div></div><div id='method-removeFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeFirst' class='name expandable'>removeFirst</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Remove the first item from the passed in array\nthat matches the passed in object. ...</div><div class='long'><p>Remove the first item from the passed in array\nthat <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">matches</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the object that was removed\nfalse if no object was removed;</p>\n</div></li></ul></div></div></div><div id='method-removeFirstNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeFirstNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeFirstNot' class='name expandable'>removeFirstNot</a>( <span class='pre'>arr, objectOrCallback, [configOrthisArg]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Remove the first item from the passed in array\nthat does not match the passed in object. ...</div><div class='long'><p>Remove the first item from the passed in array\nthat does not <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">match</a> the passed in object.  Instead of\ncomparing an object an iterator function can be\nused.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arr</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'>\n</div></li><li><span class='pre'>objectOrCallback</span> : Any/Function<div class='sub-desc'><p>if the value\nis <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">equal</a> to or the iterator returns true remove the\nobject from the array.</p>\n\n<p>If an iterator function is passed it will be called with the same\nparameters to <a href=\"#!/api/Array-method-forEach\" rel=\"Array-method-forEach\" class=\"docClass\">Array.forEach</a>.</p>\n</div></li><li><span class='pre'>configOrthisArg</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>thisArg for the iterator function an iterator is\nused.</p>\n\n<p>Optional config object for <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">Luc.compare</a> if an iterator\nfunction is not passed in.  The default is to do a loose <a href=\"#!/api/Luc-method-compare\" rel=\"Luc-method-compare\" class=\"docClass\">comparison</a>.\nIf you want to actually want to do a direct equality comparison\non a function instead of using it as an iterator pass in {type: 'strict'}\nThe loose default allows you to find things like:</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-findFirst\" rel=\"Luc.Array-method-findFirst\" class=\"docClass\">Luc.Array.findFirst</a>([1,2,3, {a:1,b:2}], {a:1})\n&gt; {a:1, b:2}\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the object that was removed\nfalse if no object was removed;</p>\n</div></li></ul></div></div></div><div id='method-removeLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeLast' class='name expandable'>removeLast</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as Luc.Array.removeFirst except start at the end. ...</div><div class='long'><p>Same as <a href=\"#!/api/Luc.Array-method-removeFirst\" rel=\"Luc.Array-method-removeFirst\" class=\"docClass\">Luc.Array.removeFirst</a> except start at the end.</p>\n</div></div></div><div id='method-removeLastNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-removeLastNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-removeLastNot' class='name expandable'>removeLastNot</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as Luc.Array.removeFirstNot except start at the end. ...</div><div class='long'><p>Same as <a href=\"#!/api/Luc.Array-method-removeFirstNot\" rel=\"Luc.Array-method-removeFirstNot\" class=\"docClass\">Luc.Array.removeFirstNot</a> except start at the end.</p>\n</div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Array'>Luc.Array</span><br/><a href='source/array.html#Luc-Array-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Array-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>item</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Turn the passed in item into an array if it\nisn't one already, if the item is an array just return it. ...</div><div class='long'><p>Turn the passed in item into an array if it\nisn't one already, if the item is an array just return it.<br/>\nIt returns an empty array if item is null or undefined.\nIf it is just a single item return an array containing the item.</p>\n\n<pre><code><a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a>()\n&gt;[]\n<a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a>(null)\n&gt;[]\n<a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a>(1)\n&gt;[1]\n<a href=\"#!/api/Luc.Array-method-toArray\" rel=\"Luc.Array-method-toArray\" class=\"docClass\">Luc.Array.toArray</a>([1,2])\n&gt;[1, 2]\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>item to turn into an array.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the array</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});