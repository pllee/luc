Ext.data.JsonP.Luc_Composition({"tagname":"class","name":"Luc.Composition","autodetected":{},"files":[{"filename":"composition.js","href":"composition.html#Luc-Composition"}],"protected":true,"members":[{"name":"Constructor","tagname":"cfg","owner":"Luc.Composition","id":"cfg-Constructor","meta":{"required":true}},{"name":"defaults","tagname":"cfg","owner":"Luc.Composition","id":"cfg-defaults","meta":{}},{"name":"ignoreMethods","tagname":"cfg","owner":"Luc.Composition","id":"cfg-ignoreMethods","meta":{}},{"name":"initAfter","tagname":"cfg","owner":"Luc.Composition","id":"cfg-initAfter","meta":{}},{"name":"methods","tagname":"cfg","owner":"Luc.Composition","id":"cfg-methods","meta":{}},{"name":"name","tagname":"cfg","owner":"Luc.Composition","id":"cfg-name","meta":{"required":true}},{"name":"filterMethodFns","tagname":"property","owner":"Luc.Composition","id":"property-filterMethodFns","meta":{}},{"name":"create","tagname":"method","owner":"Luc.Composition","id":"method-create","meta":{"protected":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Luc.Composition","short_doc":"Class that wraps composition config objects\nto conform to an api. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/composition.html#Luc-Composition' target='_blank'>composition.js</a></div></pre><div class='doc-contents'><p>Class that wraps <a href=\"#!/api/Luc.define-cfg-S-compositions\" rel=\"Luc.define-cfg-S-compositions\" class=\"docClass\">composition</a> config objects\nto conform to an api. This class is not available externally.  The config object\nwill override any protected methods and default configs.  Defaults\ncan be used for often used configs, keys that are not defaults will\noverride the defaults.</p>\n\n<pre><code>var C = <a href=\"#!/api/Luc.define\" rel=\"Luc.define\" class=\"docClass\">Luc.define</a>({\n    $compositions: {\n        defaults: <a href=\"#!/api/Luc.compositionEnums-property-EventEmitter\" rel=\"Luc.compositionEnums-property-EventEmitter\" class=\"docClass\">Luc.compositionEnums.EventEmitter</a>,\n        methods: ['emit']\n    }\n});\n\nvar c = new C()\ntypeof c.emit\n&gt;\"function\"\ntypeof c.on\n&gt;\"undefined\"\n</code></pre>\n\n<p>If you want to add your own composition all you need to have is\na name and a Constructor, the rest of the configs of this class and <a href=\"#!/api/Luc.Composition-method-create\" rel=\"Luc.Composition-method-create\" class=\"docClass\">Luc.Composition.create</a>\ncan be used to inject behavior if needed.</p>\n\n<pre><code> function Counter() {\n    this.count = 0;\n };\n\n Counter.prototype = {\n    getCount: function() {\n        return this.count;\n    },\n    increaseCount: function() {\n        this.count++;\n    }\n }\n\n var C = <a href=\"#!/api/Luc.define\" rel=\"Luc.define\" class=\"docClass\">Luc.define</a>({\n        $compositions: {\n            name: 'counter',\n            Constructor: Counter,\n            methods: 'allMethods'\n        }\n});\n\nvar c = new C()\n\nc.increaseCount();\nc.increaseCount();\nc.increaseCount();\nc.getCount();\n&gt;3\nc.count\n&gt;undefined\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Required config options</h3><div id='cfg-Constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-Constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-Constructor' class='name expandable'>Constructor</a> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><span class=\"signature\"><span class='required' >required</span></span></div><div class='description'><div class='short'>the Constructor\nto use when creating the composition instance. ...</div><div class='long'><p>the Constructor\nto use when creating the composition instance.  This\nis required if <a href=\"#!/api/Luc.Composition-method-create\" rel=\"Luc.Composition-method-create\" class=\"docClass\">Luc.Composition.create</a> is not overwritten by\nthe passed in composition config object.</p>\n</div></div></div><div id='cfg-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-name' class='name expandable'>name</a> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><span class=\"signature\"><span class='required' >required</span></span></div><div class='description'><div class='short'><p>the name which the composition\nwill be referred to by the instance.</p>\n</div><div class='long'><p>the name which the composition\nwill be referred to by the instance.</p>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Optional config options</h3><div id='cfg-defaults' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-defaults' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-defaults' class='name expandable'>defaults</a> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='cfg-ignoreMethods' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-ignoreMethods' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-ignoreMethods' class='name expandable'>ignoreMethods</a> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>[]/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><span class=\"signature\"></span></div><div class='description'><div class='short'>methods that will always\nbe ignored if methods is not an Array. ...</div><div class='long'><p>methods that will always\nbe ignored if methods is not an Array.</p>\n\n<pre><code>    var C = <a href=\"#!/api/Luc.define\" rel=\"Luc.define\" class=\"docClass\">Luc.define</a>({\n            $compositions: {\n                defaults: <a href=\"#!/api/Luc.compositionEnums-property-EventEmitter\" rel=\"Luc.compositionEnums-property-EventEmitter\" class=\"docClass\">Luc.compositionEnums.EventEmitter</a>,\n                methods: 'allMethods',\n                ignoreMethods: ['emit']\n            }\n        });\n\n        var c = new C();\n        typeof c.emit\n        &gt;\"undefined\"\n</code></pre>\n</div></div></div><div id='cfg-initAfter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-initAfter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-initAfter' class='name expandable'>initAfter</a> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><span class=\"signature\"></span></div><div class='description'><div class='short'><p>defaults to false\npass in true to init the composition instance after the\nsuperclass has been called.</p>\n</div><div class='long'><p>defaults to false\npass in true to init the composition instance after the\nsuperclass has been called.</p>\n</div></div></div><div id='cfg-methods' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-methods' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-methods' class='name expandable'>methods</a> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>[]<span class=\"signature\"></span></div><div class='description'><div class='short'>The keys to add to the definers prototype that will in turn call\nthe compositions method. ...</div><div class='long'><p>The keys to add to the definers prototype that will in turn call\nthe compositions method.</p>\n\n<p>Defaults to <a href=\"#!/api/Luc-method-emptyFn\" rel=\"Luc-method-emptyFn\" class=\"docClass\">Luc.emptyFn</a>.\nIf an array is passed it will just use that Array.</p>\n\n<p>If a string is passed and matches a method from\n<a href=\"#!/api/Luc.Composition-property-filterMethodFns\" rel=\"Luc.Composition-property-filterMethodFns\" class=\"docClass\">Luc.Composition.filterMethodFns</a> it will call that instead.</p>\n\n<p>If a function is defined it\nwill get called while iterating over each key value pair of the\nConstructor's prototype, if a truthy value is\nreturned the property will be added to the defining\nclasses prototype.</p>\n\n<p>For example this config will only expose the emit method\nto the defining class</p>\n\n<pre><code>    $compositions: {\n        Constructor: <a href=\"#!/api/Luc.EventEmitter\" rel=\"Luc.EventEmitter\" class=\"docClass\">Luc.EventEmitter</a>,\n        methods: function(key, value) {\n            return key === 'emit';\n        },\n        name: 'emitter'\n    }\n</code></pre>\n\n<p>this is also a valid config</p>\n\n<pre><code>    $compositions: {\n        Constructor: <a href=\"#!/api/Luc.EventEmitter\" rel=\"Luc.EventEmitter\" class=\"docClass\">Luc.EventEmitter</a>,\n        methods: ['emitter'],\n        name: 'emitter'\n    }\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-filterMethodFns' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-property-filterMethodFns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-property-filterMethodFns' class='name expandable'>filterMethodFns</a> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<ul><li><span class='pre'>allMethods</span> : <div class='sub-desc'><p>return all methods from the\nconstructors prototype</p>\n</div></li><li><span class='pre'>public</span> : <div class='sub-desc'><p>return all methods that don't\nstart with _.  We know not everyone follows this convention, but we\ndo and so do many others.</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-create' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-method-create' class='name expandable'>create</a>( <span class='pre'></span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>By default just return a newly created Constructor instance. ...</div><div class='long'><p>By default just return a newly created Constructor instance.</p>\n\n<p>When create is called the following properties can be used :</p>\n\n<p>this.instance The instance that is creating\nthe composition.</p>\n\n<p>this.Constructor the constructor that is passed in from\nthe composition config.</p>\n\n<p>this.instanceArgs the arguments passed into the instance when it\nis being created.  For example</p>\n\n<pre><code>    new MyClassWithAComposition({plugins: []})\n    //inside of the create method\n    this.instanceArgs\n    &gt;[{plugins: []}]\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the composition instance.</p>\n\n<p>For example set the emitters maxListeners\nto what the instance has configed.</p>\n\n<pre><code>    maxListeners: 100,\n    $compositions: {\n        Constructor: <a href=\"#!/api/Luc.EventEmitter\" rel=\"Luc.EventEmitter\" class=\"docClass\">Luc.EventEmitter</a>,\n        create: function() {\n            var emitter = new this.Constructor();\n            emitter.setMaxListeners(this.instance.maxListeners);\n            return emitter;\n        },\n        name: 'emitter'\n    }\n</code></pre>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"protected":true}});